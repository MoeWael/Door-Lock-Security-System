
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ba4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00002ba4  00002c38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080007e  0080007e  00002c56  2**0
                  ALLOC
  3 .stab         000030fc  00000000  00000000  00002c58  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001330  00000000  00000000  00005d54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000071c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007334  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ac18  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ad78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b005  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b7d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 62 12 	jmp	0x24c4	; 0x24c4 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 95 12 	jmp	0x252a	; 0x252a <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ea       	ldi	r30, 0xA4	; 164
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 38       	cpi	r26, 0x82	; 130
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 80 06 	call	0xd00	; 0xd00 <main>
      8a:	0c 94 d0 15 	jmp	0x2ba0	; 0x2ba0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 68 15 	jmp	0x2ad0	; 0x2ad0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e6       	ldi	r26, 0x67	; 103
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 84 15 	jmp	0x2b08	; 0x2b08 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 74 15 	jmp	0x2ae8	; 0x2ae8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 90 15 	jmp	0x2b20	; 0x2b20 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 74 15 	jmp	0x2ae8	; 0x2ae8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 90 15 	jmp	0x2b20	; 0x2b20 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 68 15 	jmp	0x2ad0	; 0x2ad0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	87 e6       	ldi	r24, 0x67	; 103
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 84 15 	jmp	0x2b08	; 0x2b08 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 74 15 	jmp	0x2ae8	; 0x2ae8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 90 15 	jmp	0x2b20	; 0x2b20 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 74 15 	jmp	0x2ae8	; 0x2ae8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 90 15 	jmp	0x2b20	; 0x2b20 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 74 15 	jmp	0x2ae8	; 0x2ae8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 90 15 	jmp	0x2b20	; 0x2b20 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 78 15 	jmp	0x2af0	; 0x2af0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 94 15 	jmp	0x2b28	; 0x2b28 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Timer0_CallBack_15>:
TWI_ConfigType TWIConfig = {400000, 0x01};

/* Timer ticks */
uint16 g_ticks = 0;

void Timer0_CallBack_15(){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2e 97       	sbiw	r28, 0x0e	; 14
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
     b5a:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <LCD_clearScreen>
	LCD_intgerToString(g_ticks);
     b5e:	80 91 7e 00 	lds	r24, 0x007E
     b62:	90 91 7f 00 	lds	r25, 0x007F
     b66:	0e 94 b5 11 	call	0x236a	; 0x236a <LCD_intgerToString>
	g_ticks++;
     b6a:	80 91 7e 00 	lds	r24, 0x007E
     b6e:	90 91 7f 00 	lds	r25, 0x007F
     b72:	01 96       	adiw	r24, 0x01	; 1
     b74:	90 93 7f 00 	sts	0x007F, r25
     b78:	80 93 7e 00 	sts	0x007E, r24
	if(g_ticks == 458){
     b7c:	80 91 7e 00 	lds	r24, 0x007E
     b80:	90 91 7f 00 	lds	r25, 0x007F
     b84:	21 e0       	ldi	r18, 0x01	; 1
     b86:	8a 3c       	cpi	r24, 0xCA	; 202
     b88:	92 07       	cpc	r25, r18
     b8a:	09 f0       	breq	.+2      	; 0xb8e <Timer0_CallBack_15+0x48>
     b8c:	7a c0       	rjmp	.+244    	; 0xc82 <Timer0_CallBack_15+0x13c>
		DcMotor_Rotate(MOTOR_OFF, 0);
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	60 e0       	ldi	r22, 0x00	; 0
     b92:	0e 94 07 12 	call	0x240e	; 0x240e <DcMotor_Rotate>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e8       	ldi	r25, 0x80	; 128
     b9a:	ab e3       	ldi	r26, 0x3B	; 59
     b9c:	b5 e4       	ldi	r27, 0x45	; 69
     b9e:	8b 87       	std	Y+11, r24	; 0x0b
     ba0:	9c 87       	std	Y+12, r25	; 0x0c
     ba2:	ad 87       	std	Y+13, r26	; 0x0d
     ba4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ba6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ba8:	7c 85       	ldd	r23, Y+12	; 0x0c
     baa:	8d 85       	ldd	r24, Y+13	; 0x0d
     bac:	9e 85       	ldd	r25, Y+14	; 0x0e
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	4a ef       	ldi	r20, 0xFA	; 250
     bb4:	54 e4       	ldi	r21, 0x44	; 68
     bb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bba:	dc 01       	movw	r26, r24
     bbc:	cb 01       	movw	r24, r22
     bbe:	8f 83       	std	Y+7, r24	; 0x07
     bc0:	98 87       	std	Y+8, r25	; 0x08
     bc2:	a9 87       	std	Y+9, r26	; 0x09
     bc4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bc6:	6f 81       	ldd	r22, Y+7	; 0x07
     bc8:	78 85       	ldd	r23, Y+8	; 0x08
     bca:	89 85       	ldd	r24, Y+9	; 0x09
     bcc:	9a 85       	ldd	r25, Y+10	; 0x0a
     bce:	20 e0       	ldi	r18, 0x00	; 0
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	40 e8       	ldi	r20, 0x80	; 128
     bd4:	5f e3       	ldi	r21, 0x3F	; 63
     bd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bda:	88 23       	and	r24, r24
     bdc:	2c f4       	brge	.+10     	; 0xbe8 <Timer0_CallBack_15+0xa2>
		__ticks = 1;
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	9e 83       	std	Y+6, r25	; 0x06
     be4:	8d 83       	std	Y+5, r24	; 0x05
     be6:	3f c0       	rjmp	.+126    	; 0xc66 <Timer0_CallBack_15+0x120>
	else if (__tmp > 65535)
     be8:	6f 81       	ldd	r22, Y+7	; 0x07
     bea:	78 85       	ldd	r23, Y+8	; 0x08
     bec:	89 85       	ldd	r24, Y+9	; 0x09
     bee:	9a 85       	ldd	r25, Y+10	; 0x0a
     bf0:	20 e0       	ldi	r18, 0x00	; 0
     bf2:	3f ef       	ldi	r19, 0xFF	; 255
     bf4:	4f e7       	ldi	r20, 0x7F	; 127
     bf6:	57 e4       	ldi	r21, 0x47	; 71
     bf8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bfc:	18 16       	cp	r1, r24
     bfe:	4c f5       	brge	.+82     	; 0xc52 <Timer0_CallBack_15+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c00:	6b 85       	ldd	r22, Y+11	; 0x0b
     c02:	7c 85       	ldd	r23, Y+12	; 0x0c
     c04:	8d 85       	ldd	r24, Y+13	; 0x0d
     c06:	9e 85       	ldd	r25, Y+14	; 0x0e
     c08:	20 e0       	ldi	r18, 0x00	; 0
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	40 e2       	ldi	r20, 0x20	; 32
     c0e:	51 e4       	ldi	r21, 0x41	; 65
     c10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c14:	dc 01       	movw	r26, r24
     c16:	cb 01       	movw	r24, r22
     c18:	bc 01       	movw	r22, r24
     c1a:	cd 01       	movw	r24, r26
     c1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c20:	dc 01       	movw	r26, r24
     c22:	cb 01       	movw	r24, r22
     c24:	9e 83       	std	Y+6, r25	; 0x06
     c26:	8d 83       	std	Y+5, r24	; 0x05
     c28:	0f c0       	rjmp	.+30     	; 0xc48 <Timer0_CallBack_15+0x102>
     c2a:	88 ec       	ldi	r24, 0xC8	; 200
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	9c 83       	std	Y+4, r25	; 0x04
     c30:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c32:	8b 81       	ldd	r24, Y+3	; 0x03
     c34:	9c 81       	ldd	r25, Y+4	; 0x04
     c36:	01 97       	sbiw	r24, 0x01	; 1
     c38:	f1 f7       	brne	.-4      	; 0xc36 <Timer0_CallBack_15+0xf0>
     c3a:	9c 83       	std	Y+4, r25	; 0x04
     c3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c3e:	8d 81       	ldd	r24, Y+5	; 0x05
     c40:	9e 81       	ldd	r25, Y+6	; 0x06
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	9e 83       	std	Y+6, r25	; 0x06
     c46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c48:	8d 81       	ldd	r24, Y+5	; 0x05
     c4a:	9e 81       	ldd	r25, Y+6	; 0x06
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	69 f7       	brne	.-38     	; 0xc2a <Timer0_CallBack_15+0xe4>
     c50:	14 c0       	rjmp	.+40     	; 0xc7a <Timer0_CallBack_15+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c52:	6f 81       	ldd	r22, Y+7	; 0x07
     c54:	78 85       	ldd	r23, Y+8	; 0x08
     c56:	89 85       	ldd	r24, Y+9	; 0x09
     c58:	9a 85       	ldd	r25, Y+10	; 0x0a
     c5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c5e:	dc 01       	movw	r26, r24
     c60:	cb 01       	movw	r24, r22
     c62:	9e 83       	std	Y+6, r25	; 0x06
     c64:	8d 83       	std	Y+5, r24	; 0x05
     c66:	8d 81       	ldd	r24, Y+5	; 0x05
     c68:	9e 81       	ldd	r25, Y+6	; 0x06
     c6a:	9a 83       	std	Y+2, r25	; 0x02
     c6c:	89 83       	std	Y+1, r24	; 0x01
     c6e:	89 81       	ldd	r24, Y+1	; 0x01
     c70:	9a 81       	ldd	r25, Y+2	; 0x02
     c72:	01 97       	sbiw	r24, 0x01	; 1
     c74:	f1 f7       	brne	.-4      	; 0xc72 <Timer0_CallBack_15+0x12c>
     c76:	9a 83       	std	Y+2, r25	; 0x02
     c78:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(3000);
		DcMotor_Rotate(MOTOR_ANTICLOCKWISE, 100);
     c7a:	82 e0       	ldi	r24, 0x02	; 2
     c7c:	64 e6       	ldi	r22, 0x64	; 100
     c7e:	0e 94 07 12 	call	0x240e	; 0x240e <DcMotor_Rotate>
	}
	if(g_ticks == 916){
     c82:	80 91 7e 00 	lds	r24, 0x007E
     c86:	90 91 7f 00 	lds	r25, 0x007F
     c8a:	23 e0       	ldi	r18, 0x03	; 3
     c8c:	84 39       	cpi	r24, 0x94	; 148
     c8e:	92 07       	cpc	r25, r18
     c90:	51 f4       	brne	.+20     	; 0xca6 <Timer0_CallBack_15+0x160>
		DcMotor_Rotate(MOTOR_OFF, 0);
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	0e 94 07 12 	call	0x240e	; 0x240e <DcMotor_Rotate>
		Timer0_DeInit();
     c9a:	0e 94 38 13 	call	0x2670	; 0x2670 <Timer0_DeInit>
		g_ticks = 0;
     c9e:	10 92 7f 00 	sts	0x007F, r1
     ca2:	10 92 7e 00 	sts	0x007E, r1
	}
}
     ca6:	2e 96       	adiw	r28, 0x0e	; 14
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	cf 91       	pop	r28
     cb4:	df 91       	pop	r29
     cb6:	08 95       	ret

00000cb8 <Timer0_CallBack_Buzzer>:

void Timer0_CallBack_Buzzer(){
     cb8:	df 93       	push	r29
     cba:	cf 93       	push	r28
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
     cc0:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <LCD_clearScreen>
	LCD_intgerToString(g_ticks);
     cc4:	80 91 7e 00 	lds	r24, 0x007E
     cc8:	90 91 7f 00 	lds	r25, 0x007F
     ccc:	0e 94 b5 11 	call	0x236a	; 0x236a <LCD_intgerToString>
	g_ticks++;
     cd0:	80 91 7e 00 	lds	r24, 0x007E
     cd4:	90 91 7f 00 	lds	r25, 0x007F
     cd8:	01 96       	adiw	r24, 0x01	; 1
     cda:	90 93 7f 00 	sts	0x007F, r25
     cde:	80 93 7e 00 	sts	0x007E, r24
	if(g_ticks == 458){
     ce2:	80 91 7e 00 	lds	r24, 0x007E
     ce6:	90 91 7f 00 	lds	r25, 0x007F
     cea:	21 e0       	ldi	r18, 0x01	; 1
     cec:	8a 3c       	cpi	r24, 0xCA	; 202
     cee:	92 07       	cpc	r25, r18
     cf0:	21 f4       	brne	.+8      	; 0xcfa <Timer0_CallBack_Buzzer+0x42>
		Buzzer_off();
     cf2:	0e 94 42 08 	call	0x1084	; 0x1084 <Buzzer_off>
		Timer0_DeInit();
     cf6:	0e 94 38 13 	call	0x2670	; 0x2670 <Timer0_DeInit>
	}
}
     cfa:	cf 91       	pop	r28
     cfc:	df 91       	pop	r29
     cfe:	08 95       	ret

00000d00 <main>:


int main(void){
     d00:	0f 93       	push	r16
     d02:	1f 93       	push	r17
     d04:	df 93       	push	r29
     d06:	cf 93       	push	r28
     d08:	cd b7       	in	r28, 0x3d	; 61
     d0a:	de b7       	in	r29, 0x3e	; 62
     d0c:	6d 97       	sbiw	r28, 0x1d	; 29
     d0e:	0f b6       	in	r0, 0x3f	; 63
     d10:	f8 94       	cli
     d12:	de bf       	out	0x3e, r29	; 62
     d14:	0f be       	out	0x3f, r0	; 63
     d16:	cd bf       	out	0x3d, r28	; 61

	UART_init(&UARTConfig);
     d18:	85 e7       	ldi	r24, 0x75	; 117
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <UART_init>
	LCD_init();
     d20:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <LCD_init>
	TWI_init(&TWIConfig);
     d24:	89 e7       	ldi	r24, 0x79	; 121
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	0e 94 4f 13 	call	0x269e	; 0x269e <TWI_init>
	DcMotor_Init();
     d2c:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <DcMotor_Init>
	//Buzzer_Init();
	GPIO_setupPinDirection(PORTA_ID, PIN0_ID, PIN_OUTPUT);
     d30:	80 e0       	ldi	r24, 0x00	; 0
     d32:	60 e0       	ldi	r22, 0x00	; 0
     d34:	41 e0       	ldi	r20, 0x01	; 1
     d36:	0e 94 ef 08 	call	0x11de	; 0x11de <GPIO_setupPinDirection>

	SREG |= (1<<7);
     d3a:	af e5       	ldi	r26, 0x5F	; 95
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	ef e5       	ldi	r30, 0x5F	; 95
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	80 68       	ori	r24, 0x80	; 128
     d46:	8c 93       	st	X, r24

	uint8 receiveString[5] = {0};
     d48:	85 e0       	ldi	r24, 0x05	; 5
     d4a:	fe 01       	movw	r30, r28
     d4c:	75 96       	adiw	r30, 0x15	; 21
     d4e:	df 01       	movw	r26, r30
     d50:	28 2f       	mov	r18, r24
     d52:	1d 92       	st	X+, r1
     d54:	2a 95       	dec	r18
     d56:	e9 f7       	brne	.-6      	; 0xd52 <main+0x52>
	uint8 symbol;

	while(1){
		/* Wait for the Ready symbol */
		symbol = UART_recieveByte();
     d58:	0e 94 a4 14 	call	0x2948	; 0x2948 <UART_recieveByte>
     d5c:	8c 8b       	std	Y+20, r24	; 0x14
		LCD_displayCharacter(symbol);
     d5e:	8c 89       	ldd	r24, Y+20	; 0x14
     d60:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <LCD_displayCharacter>
		switch(symbol){
     d64:	8c 89       	ldd	r24, Y+20	; 0x14
     d66:	a8 2f       	mov	r26, r24
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	bd 8f       	std	Y+29, r27	; 0x1d
     d6c:	ac 8f       	std	Y+28, r26	; 0x1c
     d6e:	2c 8d       	ldd	r18, Y+28	; 0x1c
     d70:	3d 8d       	ldd	r19, Y+29	; 0x1d
     d72:	26 32       	cpi	r18, 0x26	; 38
     d74:	31 05       	cpc	r19, r1
     d76:	c9 f0       	breq	.+50     	; 0xdaa <main+0xaa>
     d78:	8c 8d       	ldd	r24, Y+28	; 0x1c
     d7a:	9d 8d       	ldd	r25, Y+29	; 0x1d
     d7c:	87 32       	cpi	r24, 0x27	; 39
     d7e:	91 05       	cpc	r25, r1
     d80:	3c f4       	brge	.+14     	; 0xd90 <main+0x90>
     d82:	ac 8d       	ldd	r26, Y+28	; 0x1c
     d84:	bd 8d       	ldd	r27, Y+29	; 0x1d
     d86:	a4 32       	cpi	r26, 0x24	; 36
     d88:	b1 05       	cpc	r27, r1
     d8a:	09 f4       	brne	.+2      	; 0xd8e <main+0x8e>
     d8c:	94 c0       	rjmp	.+296    	; 0xeb6 <main+0x1b6>
     d8e:	e4 cf       	rjmp	.-56     	; 0xd58 <main+0x58>
     d90:	2c 8d       	ldd	r18, Y+28	; 0x1c
     d92:	3d 8d       	ldd	r19, Y+29	; 0x1d
     d94:	2b 32       	cpi	r18, 0x2B	; 43
     d96:	31 05       	cpc	r19, r1
     d98:	09 f4       	brne	.+2      	; 0xd9c <main+0x9c>
     d9a:	06 c1       	rjmp	.+524    	; 0xfa8 <main+0x2a8>
     d9c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     d9e:	9d 8d       	ldd	r25, Y+29	; 0x1d
     da0:	8d 32       	cpi	r24, 0x2D	; 45
     da2:	91 05       	cpc	r25, r1
     da4:	09 f4       	brne	.+2      	; 0xda8 <main+0xa8>
     da6:	bc c0       	rjmp	.+376    	; 0xf20 <main+0x220>
     da8:	d7 cf       	rjmp	.-82     	; 0xd58 <main+0x58>
		case DANGER : {
				Timer0_Init(&TimerConfig);
     daa:	8f e6       	ldi	r24, 0x6F	; 111
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	0e 94 c8 12 	call	0x2590	; 0x2590 <Timer0_Init>
				Timer0_SetCallback(Timer0_CallBack_Buzzer);
     db2:	8c e5       	ldi	r24, 0x5C	; 92
     db4:	96 e0       	ldi	r25, 0x06	; 6
     db6:	0e 94 26 13 	call	0x264c	; 0x264c <Timer0_SetCallback>
				GPIO_writePin(PORTA_ID, PIN0_ID, 1);
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	60 e0       	ldi	r22, 0x00	; 0
     dbe:	41 e0       	ldi	r20, 0x01	; 1
     dc0:	0e 94 da 09 	call	0x13b4	; 0x13b4 <GPIO_writePin>
				LCD_clearScreen();
     dc4:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <LCD_clearScreen>
				LCD_displayString("BUZZER");
     dc8:	80 e6       	ldi	r24, 0x60	; 96
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	90 e4       	ldi	r25, 0x40	; 64
     dd4:	ac e9       	ldi	r26, 0x9C	; 156
     dd6:	b5 e4       	ldi	r27, 0x45	; 69
     dd8:	8b 87       	std	Y+11, r24	; 0x0b
     dda:	9c 87       	std	Y+12, r25	; 0x0c
     ddc:	ad 87       	std	Y+13, r26	; 0x0d
     dde:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     de0:	6b 85       	ldd	r22, Y+11	; 0x0b
     de2:	7c 85       	ldd	r23, Y+12	; 0x0c
     de4:	8d 85       	ldd	r24, Y+13	; 0x0d
     de6:	9e 85       	ldd	r25, Y+14	; 0x0e
     de8:	20 e0       	ldi	r18, 0x00	; 0
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	4a ef       	ldi	r20, 0xFA	; 250
     dee:	54 e4       	ldi	r21, 0x44	; 68
     df0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df4:	dc 01       	movw	r26, r24
     df6:	cb 01       	movw	r24, r22
     df8:	8f 83       	std	Y+7, r24	; 0x07
     dfa:	98 87       	std	Y+8, r25	; 0x08
     dfc:	a9 87       	std	Y+9, r26	; 0x09
     dfe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e00:	6f 81       	ldd	r22, Y+7	; 0x07
     e02:	78 85       	ldd	r23, Y+8	; 0x08
     e04:	89 85       	ldd	r24, Y+9	; 0x09
     e06:	9a 85       	ldd	r25, Y+10	; 0x0a
     e08:	20 e0       	ldi	r18, 0x00	; 0
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	40 e8       	ldi	r20, 0x80	; 128
     e0e:	5f e3       	ldi	r21, 0x3F	; 63
     e10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e14:	88 23       	and	r24, r24
     e16:	2c f4       	brge	.+10     	; 0xe22 <main+0x122>
		__ticks = 1;
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	9e 83       	std	Y+6, r25	; 0x06
     e1e:	8d 83       	std	Y+5, r24	; 0x05
     e20:	3f c0       	rjmp	.+126    	; 0xea0 <main+0x1a0>
	else if (__tmp > 65535)
     e22:	6f 81       	ldd	r22, Y+7	; 0x07
     e24:	78 85       	ldd	r23, Y+8	; 0x08
     e26:	89 85       	ldd	r24, Y+9	; 0x09
     e28:	9a 85       	ldd	r25, Y+10	; 0x0a
     e2a:	20 e0       	ldi	r18, 0x00	; 0
     e2c:	3f ef       	ldi	r19, 0xFF	; 255
     e2e:	4f e7       	ldi	r20, 0x7F	; 127
     e30:	57 e4       	ldi	r21, 0x47	; 71
     e32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e36:	18 16       	cp	r1, r24
     e38:	4c f5       	brge	.+82     	; 0xe8c <main+0x18c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e3a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e3c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e3e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e40:	9e 85       	ldd	r25, Y+14	; 0x0e
     e42:	20 e0       	ldi	r18, 0x00	; 0
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	40 e2       	ldi	r20, 0x20	; 32
     e48:	51 e4       	ldi	r21, 0x41	; 65
     e4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e4e:	dc 01       	movw	r26, r24
     e50:	cb 01       	movw	r24, r22
     e52:	bc 01       	movw	r22, r24
     e54:	cd 01       	movw	r24, r26
     e56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e5a:	dc 01       	movw	r26, r24
     e5c:	cb 01       	movw	r24, r22
     e5e:	9e 83       	std	Y+6, r25	; 0x06
     e60:	8d 83       	std	Y+5, r24	; 0x05
     e62:	0f c0       	rjmp	.+30     	; 0xe82 <main+0x182>
     e64:	88 ec       	ldi	r24, 0xC8	; 200
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	9c 83       	std	Y+4, r25	; 0x04
     e6a:	8b 83       	std	Y+3, r24	; 0x03
     e6c:	8b 81       	ldd	r24, Y+3	; 0x03
     e6e:	9c 81       	ldd	r25, Y+4	; 0x04
     e70:	01 97       	sbiw	r24, 0x01	; 1
     e72:	f1 f7       	brne	.-4      	; 0xe70 <main+0x170>
     e74:	9c 83       	std	Y+4, r25	; 0x04
     e76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e78:	8d 81       	ldd	r24, Y+5	; 0x05
     e7a:	9e 81       	ldd	r25, Y+6	; 0x06
     e7c:	01 97       	sbiw	r24, 0x01	; 1
     e7e:	9e 83       	std	Y+6, r25	; 0x06
     e80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e82:	8d 81       	ldd	r24, Y+5	; 0x05
     e84:	9e 81       	ldd	r25, Y+6	; 0x06
     e86:	00 97       	sbiw	r24, 0x00	; 0
     e88:	69 f7       	brne	.-38     	; 0xe64 <main+0x164>
     e8a:	66 cf       	rjmp	.-308    	; 0xd58 <main+0x58>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e8c:	6f 81       	ldd	r22, Y+7	; 0x07
     e8e:	78 85       	ldd	r23, Y+8	; 0x08
     e90:	89 85       	ldd	r24, Y+9	; 0x09
     e92:	9a 85       	ldd	r25, Y+10	; 0x0a
     e94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e98:	dc 01       	movw	r26, r24
     e9a:	cb 01       	movw	r24, r22
     e9c:	9e 83       	std	Y+6, r25	; 0x06
     e9e:	8d 83       	std	Y+5, r24	; 0x05
     ea0:	8d 81       	ldd	r24, Y+5	; 0x05
     ea2:	9e 81       	ldd	r25, Y+6	; 0x06
     ea4:	9a 83       	std	Y+2, r25	; 0x02
     ea6:	89 83       	std	Y+1, r24	; 0x01
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	9a 81       	ldd	r25, Y+2	; 0x02
     eac:	01 97       	sbiw	r24, 0x01	; 1
     eae:	f1 f7       	brne	.-4      	; 0xeac <main+0x1ac>
     eb0:	9a 83       	std	Y+2, r25	; 0x02
     eb2:	89 83       	std	Y+1, r24	; 0x01
     eb4:	51 cf       	rjmp	.-350    	; 0xd58 <main+0x58>

			break;
		}
		case READY :{
		/* Receive and save the password */
		UART_sendByte(READY);
     eb6:	84 e2       	ldi	r24, 0x24	; 36
     eb8:	0e 94 8d 14 	call	0x291a	; 0x291a <UART_sendByte>
		for(uint8 i = 0; i<5; i++){
     ebc:	1b 8a       	std	Y+19, r1	; 0x13
     ebe:	2c c0       	rjmp	.+88     	; 0xf18 <main+0x218>
			receiveString[i] = UART_recieveByte();
     ec0:	8b 89       	ldd	r24, Y+19	; 0x13
     ec2:	08 2f       	mov	r16, r24
     ec4:	10 e0       	ldi	r17, 0x00	; 0
     ec6:	0e 94 a4 14 	call	0x2948	; 0x2948 <UART_recieveByte>
     eca:	28 2f       	mov	r18, r24
     ecc:	ce 01       	movw	r24, r28
     ece:	45 96       	adiw	r24, 0x15	; 21
     ed0:	fc 01       	movw	r30, r24
     ed2:	e0 0f       	add	r30, r16
     ed4:	f1 1f       	adc	r31, r17
     ed6:	20 83       	st	Z, r18
			LCD_intgerToString(receiveString[i]);
     ed8:	8b 89       	ldd	r24, Y+19	; 0x13
     eda:	28 2f       	mov	r18, r24
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	ce 01       	movw	r24, r28
     ee0:	45 96       	adiw	r24, 0x15	; 21
     ee2:	fc 01       	movw	r30, r24
     ee4:	e2 0f       	add	r30, r18
     ee6:	f3 1f       	adc	r31, r19
     ee8:	80 81       	ld	r24, Z
     eea:	88 2f       	mov	r24, r24
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	0e 94 b5 11 	call	0x236a	; 0x236a <LCD_intgerToString>
			EEPROM_writeByte(0x0000 + i, receiveString[i]);
     ef2:	8b 89       	ldd	r24, Y+19	; 0x13
     ef4:	48 2f       	mov	r20, r24
     ef6:	50 e0       	ldi	r21, 0x00	; 0
     ef8:	8b 89       	ldd	r24, Y+19	; 0x13
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	ce 01       	movw	r24, r28
     f00:	45 96       	adiw	r24, 0x15	; 21
     f02:	fc 01       	movw	r30, r24
     f04:	e2 0f       	add	r30, r18
     f06:	f3 1f       	adc	r31, r19
     f08:	20 81       	ld	r18, Z
     f0a:	ca 01       	movw	r24, r20
     f0c:	62 2f       	mov	r22, r18
     f0e:	0e 94 4e 08 	call	0x109c	; 0x109c <EEPROM_writeByte>
			break;
		}
		case READY :{
		/* Receive and save the password */
		UART_sendByte(READY);
		for(uint8 i = 0; i<5; i++){
     f12:	8b 89       	ldd	r24, Y+19	; 0x13
     f14:	8f 5f       	subi	r24, 0xFF	; 255
     f16:	8b 8b       	std	Y+19, r24	; 0x13
     f18:	8b 89       	ldd	r24, Y+19	; 0x13
     f1a:	85 30       	cpi	r24, 0x05	; 5
     f1c:	88 f2       	brcs	.-94     	; 0xec0 <main+0x1c0>
     f1e:	1c cf       	rjmp	.-456    	; 0xd58 <main+0x58>
			EEPROM_writeByte(0x0000 + i, receiveString[i]);
			}
		break;
		}
		case '-' :{
			uint8 flag = 1;
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	8a 8b       	std	Y+18, r24	; 0x12
			uint8 data;
			/* Receive and save the password */
			for(uint8 i = 0; i<5; i++){
     f24:	19 8a       	std	Y+17, r1	; 0x11
     f26:	32 c0       	rjmp	.+100    	; 0xf8c <main+0x28c>
				receiveString[i] = UART_recieveByte();
     f28:	89 89       	ldd	r24, Y+17	; 0x11
     f2a:	08 2f       	mov	r16, r24
     f2c:	10 e0       	ldi	r17, 0x00	; 0
     f2e:	0e 94 a4 14 	call	0x2948	; 0x2948 <UART_recieveByte>
     f32:	28 2f       	mov	r18, r24
     f34:	ce 01       	movw	r24, r28
     f36:	45 96       	adiw	r24, 0x15	; 21
     f38:	fc 01       	movw	r30, r24
     f3a:	e0 0f       	add	r30, r16
     f3c:	f1 1f       	adc	r31, r17
     f3e:	20 83       	st	Z, r18
				LCD_intgerToString(receiveString[i]);
     f40:	89 89       	ldd	r24, Y+17	; 0x11
     f42:	28 2f       	mov	r18, r24
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	ce 01       	movw	r24, r28
     f48:	45 96       	adiw	r24, 0x15	; 21
     f4a:	fc 01       	movw	r30, r24
     f4c:	e2 0f       	add	r30, r18
     f4e:	f3 1f       	adc	r31, r19
     f50:	80 81       	ld	r24, Z
     f52:	88 2f       	mov	r24, r24
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	0e 94 b5 11 	call	0x236a	; 0x236a <LCD_intgerToString>
				EEPROM_readByte(0x0000 + i, &data);
     f5a:	89 89       	ldd	r24, Y+17	; 0x11
     f5c:	88 2f       	mov	r24, r24
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	9e 01       	movw	r18, r28
     f62:	26 5e       	subi	r18, 0xE6	; 230
     f64:	3f 4f       	sbci	r19, 0xFF	; 255
     f66:	b9 01       	movw	r22, r18
     f68:	0e 94 8f 08 	call	0x111e	; 0x111e <EEPROM_readByte>
				if(receiveString[i] != data){
     f6c:	89 89       	ldd	r24, Y+17	; 0x11
     f6e:	28 2f       	mov	r18, r24
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	ce 01       	movw	r24, r28
     f74:	45 96       	adiw	r24, 0x15	; 21
     f76:	fc 01       	movw	r30, r24
     f78:	e2 0f       	add	r30, r18
     f7a:	f3 1f       	adc	r31, r19
     f7c:	90 81       	ld	r25, Z
     f7e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f80:	98 17       	cp	r25, r24
     f82:	09 f0       	breq	.+2      	; 0xf86 <main+0x286>
					flag = 0;
     f84:	1a 8a       	std	Y+18, r1	; 0x12
		}
		case '-' :{
			uint8 flag = 1;
			uint8 data;
			/* Receive and save the password */
			for(uint8 i = 0; i<5; i++){
     f86:	89 89       	ldd	r24, Y+17	; 0x11
     f88:	8f 5f       	subi	r24, 0xFF	; 255
     f8a:	89 8b       	std	Y+17, r24	; 0x11
     f8c:	89 89       	ldd	r24, Y+17	; 0x11
     f8e:	85 30       	cpi	r24, 0x05	; 5
     f90:	58 f2       	brcs	.-106    	; 0xf28 <main+0x228>
				EEPROM_readByte(0x0000 + i, &data);
				if(receiveString[i] != data){
					flag = 0;
				}
			}
			if(flag){
     f92:	8a 89       	ldd	r24, Y+18	; 0x12
     f94:	88 23       	and	r24, r24
     f96:	21 f0       	breq	.+8      	; 0xfa0 <main+0x2a0>
				UART_sendByte('-');
     f98:	8d e2       	ldi	r24, 0x2D	; 45
     f9a:	0e 94 8d 14 	call	0x291a	; 0x291a <UART_sendByte>
     f9e:	dc ce       	rjmp	.-584    	; 0xd58 <main+0x58>
			}
			else{
				UART_sendByte(FAIL);
     fa0:	80 e4       	ldi	r24, 0x40	; 64
     fa2:	0e 94 8d 14 	call	0x291a	; 0x291a <UART_sendByte>
     fa6:	d8 ce       	rjmp	.-592    	; 0xd58 <main+0x58>
			}
			break;
		}
		case '+' :{

			uint8 flag = 1;
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	88 8b       	std	Y+16, r24	; 0x10
			uint8 data;
			/* Receive and save the password */
			for(uint8 i = 0; i<5; i++){
     fac:	1f 86       	std	Y+15, r1	; 0x0f
     fae:	32 c0       	rjmp	.+100    	; 0x1014 <main+0x314>
				receiveString[i] = UART_recieveByte();
     fb0:	8f 85       	ldd	r24, Y+15	; 0x0f
     fb2:	08 2f       	mov	r16, r24
     fb4:	10 e0       	ldi	r17, 0x00	; 0
     fb6:	0e 94 a4 14 	call	0x2948	; 0x2948 <UART_recieveByte>
     fba:	28 2f       	mov	r18, r24
     fbc:	ce 01       	movw	r24, r28
     fbe:	45 96       	adiw	r24, 0x15	; 21
     fc0:	fc 01       	movw	r30, r24
     fc2:	e0 0f       	add	r30, r16
     fc4:	f1 1f       	adc	r31, r17
     fc6:	20 83       	st	Z, r18
				LCD_intgerToString(receiveString[i]);
     fc8:	8f 85       	ldd	r24, Y+15	; 0x0f
     fca:	28 2f       	mov	r18, r24
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	ce 01       	movw	r24, r28
     fd0:	45 96       	adiw	r24, 0x15	; 21
     fd2:	fc 01       	movw	r30, r24
     fd4:	e2 0f       	add	r30, r18
     fd6:	f3 1f       	adc	r31, r19
     fd8:	80 81       	ld	r24, Z
     fda:	88 2f       	mov	r24, r24
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	0e 94 b5 11 	call	0x236a	; 0x236a <LCD_intgerToString>
				EEPROM_readByte(0x0000 + i, &data);
     fe2:	8f 85       	ldd	r24, Y+15	; 0x0f
     fe4:	88 2f       	mov	r24, r24
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	9e 01       	movw	r18, r28
     fea:	25 5e       	subi	r18, 0xE5	; 229
     fec:	3f 4f       	sbci	r19, 0xFF	; 255
     fee:	b9 01       	movw	r22, r18
     ff0:	0e 94 8f 08 	call	0x111e	; 0x111e <EEPROM_readByte>
				/* Check if matched */
				if(receiveString[i] != data){
     ff4:	8f 85       	ldd	r24, Y+15	; 0x0f
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	ce 01       	movw	r24, r28
     ffc:	45 96       	adiw	r24, 0x15	; 21
     ffe:	fc 01       	movw	r30, r24
    1000:	e2 0f       	add	r30, r18
    1002:	f3 1f       	adc	r31, r19
    1004:	90 81       	ld	r25, Z
    1006:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1008:	98 17       	cp	r25, r24
    100a:	09 f0       	breq	.+2      	; 0x100e <main+0x30e>
				flag = 0;
    100c:	18 8a       	std	Y+16, r1	; 0x10
		case '+' :{

			uint8 flag = 1;
			uint8 data;
			/* Receive and save the password */
			for(uint8 i = 0; i<5; i++){
    100e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1010:	8f 5f       	subi	r24, 0xFF	; 255
    1012:	8f 87       	std	Y+15, r24	; 0x0f
    1014:	8f 85       	ldd	r24, Y+15	; 0x0f
    1016:	85 30       	cpi	r24, 0x05	; 5
    1018:	58 f2       	brcs	.-106    	; 0xfb0 <main+0x2b0>
				/* Check if matched */
				if(receiveString[i] != data){
				flag = 0;
				}
			}
			if(flag){
    101a:	88 89       	ldd	r24, Y+16	; 0x10
    101c:	88 23       	and	r24, r24
    101e:	b1 f0       	breq	.+44     	; 0x104c <main+0x34c>
				/* Send success symbol */
				UART_sendByte('+');
    1020:	8b e2       	ldi	r24, 0x2B	; 43
    1022:	0e 94 8d 14 	call	0x291a	; 0x291a <UART_sendByte>
				/* Wait for response */
				LCD_clearScreen();
    1026:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <LCD_clearScreen>
				LCD_displayCharacter(UART_recieveByte());
    102a:	0e 94 a4 14 	call	0x2948	; 0x2948 <UART_recieveByte>
    102e:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <LCD_displayCharacter>
				/* Start unlocking and locking the door */
				Timer0_Init(&TimerConfig);
    1032:	8f e6       	ldi	r24, 0x6F	; 111
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	0e 94 c8 12 	call	0x2590	; 0x2590 <Timer0_Init>
				Timer0_SetCallback(Timer0_CallBack_15);
    103a:	83 ea       	ldi	r24, 0xA3	; 163
    103c:	95 e0       	ldi	r25, 0x05	; 5
    103e:	0e 94 26 13 	call	0x264c	; 0x264c <Timer0_SetCallback>
				DcMotor_Rotate(MOTOR_CLOCKWISE, 100);
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	64 e6       	ldi	r22, 0x64	; 100
    1046:	0e 94 07 12 	call	0x240e	; 0x240e <DcMotor_Rotate>
    104a:	86 ce       	rjmp	.-756    	; 0xd58 <main+0x58>

			}
			else{
				UART_sendByte(FAIL);
    104c:	80 e4       	ldi	r24, 0x40	; 64
    104e:	0e 94 8d 14 	call	0x291a	; 0x291a <UART_sendByte>
    1052:	82 ce       	rjmp	.-764    	; 0xd58 <main+0x58>

00001054 <Buzzer_Init>:
#include "buzzer.h"

#include <avr/io.h>


void Buzzer_Init(void){
    1054:	df 93       	push	r29
    1056:	cf 93       	push	r28
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT, BUZZER_PIN, PIN_OUTPUT);
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	60 e0       	ldi	r22, 0x00	; 0
    1060:	41 e0       	ldi	r20, 0x01	; 1
    1062:	0e 94 ef 08 	call	0x11de	; 0x11de <GPIO_setupPinDirection>
}
    1066:	cf 91       	pop	r28
    1068:	df 91       	pop	r29
    106a:	08 95       	ret

0000106c <Buzzer_on>:

void Buzzer_on(void){
    106c:	df 93       	push	r29
    106e:	cf 93       	push	r28
    1070:	cd b7       	in	r28, 0x3d	; 61
    1072:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_HIGH);
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	60 e0       	ldi	r22, 0x00	; 0
    1078:	41 e0       	ldi	r20, 0x01	; 1
    107a:	0e 94 da 09 	call	0x13b4	; 0x13b4 <GPIO_writePin>
}
    107e:	cf 91       	pop	r28
    1080:	df 91       	pop	r29
    1082:	08 95       	ret

00001084 <Buzzer_off>:

void Buzzer_off(void){
    1084:	df 93       	push	r29
    1086:	cf 93       	push	r28
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	60 e0       	ldi	r22, 0x00	; 0
    1090:	40 e0       	ldi	r20, 0x00	; 0
    1092:	0e 94 da 09 	call	0x13b4	; 0x13b4 <GPIO_writePin>
}
    1096:	cf 91       	pop	r28
    1098:	df 91       	pop	r29
    109a:	08 95       	ret

0000109c <EEPROM_writeByte>:
#include "twi.h"
#include "external_eeprom.h"


uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    109c:	df 93       	push	r29
    109e:	cf 93       	push	r28
    10a0:	00 d0       	rcall	.+0      	; 0x10a2 <EEPROM_writeByte+0x6>
    10a2:	00 d0       	rcall	.+0      	; 0x10a4 <EEPROM_writeByte+0x8>
    10a4:	cd b7       	in	r28, 0x3d	; 61
    10a6:	de b7       	in	r29, 0x3e	; 62
    10a8:	9a 83       	std	Y+2, r25	; 0x02
    10aa:	89 83       	std	Y+1, r24	; 0x01
    10ac:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    10ae:	0e 94 94 13 	call	0x2728	; 0x2728 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    10b2:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <TWI_getStatus>
    10b6:	88 30       	cpi	r24, 0x08	; 8
    10b8:	11 f0       	breq	.+4      	; 0x10be <EEPROM_writeByte+0x22>
        return ERROR;
    10ba:	1c 82       	std	Y+4, r1	; 0x04
    10bc:	28 c0       	rjmp	.+80     	; 0x110e <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    10be:	89 81       	ldd	r24, Y+1	; 0x01
    10c0:	9a 81       	ldd	r25, Y+2	; 0x02
    10c2:	80 70       	andi	r24, 0x00	; 0
    10c4:	97 70       	andi	r25, 0x07	; 7
    10c6:	88 0f       	add	r24, r24
    10c8:	89 2f       	mov	r24, r25
    10ca:	88 1f       	adc	r24, r24
    10cc:	99 0b       	sbc	r25, r25
    10ce:	91 95       	neg	r25
    10d0:	80 6a       	ori	r24, 0xA0	; 160
    10d2:	0e 94 af 13 	call	0x275e	; 0x275e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    10d6:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <TWI_getStatus>
    10da:	88 31       	cpi	r24, 0x18	; 24
    10dc:	11 f0       	breq	.+4      	; 0x10e2 <EEPROM_writeByte+0x46>
        return ERROR; 
    10de:	1c 82       	std	Y+4, r1	; 0x04
    10e0:	16 c0       	rjmp	.+44     	; 0x110e <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	0e 94 af 13 	call	0x275e	; 0x275e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    10e8:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <TWI_getStatus>
    10ec:	88 32       	cpi	r24, 0x28	; 40
    10ee:	11 f0       	breq	.+4      	; 0x10f4 <EEPROM_writeByte+0x58>
        return ERROR;
    10f0:	1c 82       	std	Y+4, r1	; 0x04
    10f2:	0d c0       	rjmp	.+26     	; 0x110e <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    10f4:	8b 81       	ldd	r24, Y+3	; 0x03
    10f6:	0e 94 af 13 	call	0x275e	; 0x275e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    10fa:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <TWI_getStatus>
    10fe:	88 32       	cpi	r24, 0x28	; 40
    1100:	11 f0       	breq	.+4      	; 0x1106 <EEPROM_writeByte+0x6a>
        return ERROR;
    1102:	1c 82       	std	Y+4, r1	; 0x04
    1104:	04 c0       	rjmp	.+8      	; 0x110e <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1106:	0e 94 a4 13 	call	0x2748	; 0x2748 <TWI_stop>
	
    return SUCCESS;
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	8c 83       	std	Y+4, r24	; 0x04
    110e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1110:	0f 90       	pop	r0
    1112:	0f 90       	pop	r0
    1114:	0f 90       	pop	r0
    1116:	0f 90       	pop	r0
    1118:	cf 91       	pop	r28
    111a:	df 91       	pop	r29
    111c:	08 95       	ret

0000111e <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    111e:	df 93       	push	r29
    1120:	cf 93       	push	r28
    1122:	00 d0       	rcall	.+0      	; 0x1124 <EEPROM_readByte+0x6>
    1124:	00 d0       	rcall	.+0      	; 0x1126 <EEPROM_readByte+0x8>
    1126:	0f 92       	push	r0
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
    112c:	9a 83       	std	Y+2, r25	; 0x02
    112e:	89 83       	std	Y+1, r24	; 0x01
    1130:	7c 83       	std	Y+4, r23	; 0x04
    1132:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1134:	0e 94 94 13 	call	0x2728	; 0x2728 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1138:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <TWI_getStatus>
    113c:	88 30       	cpi	r24, 0x08	; 8
    113e:	11 f0       	breq	.+4      	; 0x1144 <EEPROM_readByte+0x26>
        return ERROR;
    1140:	1d 82       	std	Y+5, r1	; 0x05
    1142:	44 c0       	rjmp	.+136    	; 0x11cc <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	9a 81       	ldd	r25, Y+2	; 0x02
    1148:	80 70       	andi	r24, 0x00	; 0
    114a:	97 70       	andi	r25, 0x07	; 7
    114c:	88 0f       	add	r24, r24
    114e:	89 2f       	mov	r24, r25
    1150:	88 1f       	adc	r24, r24
    1152:	99 0b       	sbc	r25, r25
    1154:	91 95       	neg	r25
    1156:	80 6a       	ori	r24, 0xA0	; 160
    1158:	0e 94 af 13 	call	0x275e	; 0x275e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    115c:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <TWI_getStatus>
    1160:	88 31       	cpi	r24, 0x18	; 24
    1162:	11 f0       	breq	.+4      	; 0x1168 <EEPROM_readByte+0x4a>
        return ERROR;
    1164:	1d 82       	std	Y+5, r1	; 0x05
    1166:	32 c0       	rjmp	.+100    	; 0x11cc <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	0e 94 af 13 	call	0x275e	; 0x275e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    116e:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <TWI_getStatus>
    1172:	88 32       	cpi	r24, 0x28	; 40
    1174:	11 f0       	breq	.+4      	; 0x117a <EEPROM_readByte+0x5c>
        return ERROR;
    1176:	1d 82       	std	Y+5, r1	; 0x05
    1178:	29 c0       	rjmp	.+82     	; 0x11cc <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    117a:	0e 94 94 13 	call	0x2728	; 0x2728 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    117e:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <TWI_getStatus>
    1182:	80 31       	cpi	r24, 0x10	; 16
    1184:	11 f0       	breq	.+4      	; 0x118a <EEPROM_readByte+0x6c>
        return ERROR;
    1186:	1d 82       	std	Y+5, r1	; 0x05
    1188:	21 c0       	rjmp	.+66     	; 0x11cc <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	9a 81       	ldd	r25, Y+2	; 0x02
    118e:	80 70       	andi	r24, 0x00	; 0
    1190:	97 70       	andi	r25, 0x07	; 7
    1192:	88 0f       	add	r24, r24
    1194:	89 2f       	mov	r24, r25
    1196:	88 1f       	adc	r24, r24
    1198:	99 0b       	sbc	r25, r25
    119a:	91 95       	neg	r25
    119c:	81 6a       	ori	r24, 0xA1	; 161
    119e:	0e 94 af 13 	call	0x275e	; 0x275e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    11a2:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <TWI_getStatus>
    11a6:	80 34       	cpi	r24, 0x40	; 64
    11a8:	11 f0       	breq	.+4      	; 0x11ae <EEPROM_readByte+0x90>
        return ERROR;
    11aa:	1d 82       	std	Y+5, r1	; 0x05
    11ac:	0f c0       	rjmp	.+30     	; 0x11cc <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    11ae:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <TWI_readByteWithNACK>
    11b2:	eb 81       	ldd	r30, Y+3	; 0x03
    11b4:	fc 81       	ldd	r31, Y+4	; 0x04
    11b6:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    11b8:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <TWI_getStatus>
    11bc:	88 35       	cpi	r24, 0x58	; 88
    11be:	11 f0       	breq	.+4      	; 0x11c4 <EEPROM_readByte+0xa6>
        return ERROR;
    11c0:	1d 82       	std	Y+5, r1	; 0x05
    11c2:	04 c0       	rjmp	.+8      	; 0x11cc <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    11c4:	0e 94 a4 13 	call	0x2748	; 0x2748 <TWI_stop>

    return SUCCESS;
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	8d 83       	std	Y+5, r24	; 0x05
    11cc:	8d 81       	ldd	r24, Y+5	; 0x05
}
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	cf 91       	pop	r28
    11da:	df 91       	pop	r29
    11dc:	08 95       	ret

000011de <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    11de:	df 93       	push	r29
    11e0:	cf 93       	push	r28
    11e2:	00 d0       	rcall	.+0      	; 0x11e4 <GPIO_setupPinDirection+0x6>
    11e4:	00 d0       	rcall	.+0      	; 0x11e6 <GPIO_setupPinDirection+0x8>
    11e6:	0f 92       	push	r0
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
    11ec:	89 83       	std	Y+1, r24	; 0x01
    11ee:	6a 83       	std	Y+2, r22	; 0x02
    11f0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    11f2:	8a 81       	ldd	r24, Y+2	; 0x02
    11f4:	88 30       	cpi	r24, 0x08	; 8
    11f6:	08 f0       	brcs	.+2      	; 0x11fa <GPIO_setupPinDirection+0x1c>
    11f8:	d5 c0       	rjmp	.+426    	; 0x13a4 <GPIO_setupPinDirection+0x1c6>
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	84 30       	cpi	r24, 0x04	; 4
    11fe:	08 f0       	brcs	.+2      	; 0x1202 <GPIO_setupPinDirection+0x24>
    1200:	d1 c0       	rjmp	.+418    	; 0x13a4 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	28 2f       	mov	r18, r24
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	3d 83       	std	Y+5, r19	; 0x05
    120a:	2c 83       	std	Y+4, r18	; 0x04
    120c:	8c 81       	ldd	r24, Y+4	; 0x04
    120e:	9d 81       	ldd	r25, Y+5	; 0x05
    1210:	81 30       	cpi	r24, 0x01	; 1
    1212:	91 05       	cpc	r25, r1
    1214:	09 f4       	brne	.+2      	; 0x1218 <GPIO_setupPinDirection+0x3a>
    1216:	43 c0       	rjmp	.+134    	; 0x129e <GPIO_setupPinDirection+0xc0>
    1218:	2c 81       	ldd	r18, Y+4	; 0x04
    121a:	3d 81       	ldd	r19, Y+5	; 0x05
    121c:	22 30       	cpi	r18, 0x02	; 2
    121e:	31 05       	cpc	r19, r1
    1220:	2c f4       	brge	.+10     	; 0x122c <GPIO_setupPinDirection+0x4e>
    1222:	8c 81       	ldd	r24, Y+4	; 0x04
    1224:	9d 81       	ldd	r25, Y+5	; 0x05
    1226:	00 97       	sbiw	r24, 0x00	; 0
    1228:	71 f0       	breq	.+28     	; 0x1246 <GPIO_setupPinDirection+0x68>
    122a:	bc c0       	rjmp	.+376    	; 0x13a4 <GPIO_setupPinDirection+0x1c6>
    122c:	2c 81       	ldd	r18, Y+4	; 0x04
    122e:	3d 81       	ldd	r19, Y+5	; 0x05
    1230:	22 30       	cpi	r18, 0x02	; 2
    1232:	31 05       	cpc	r19, r1
    1234:	09 f4       	brne	.+2      	; 0x1238 <GPIO_setupPinDirection+0x5a>
    1236:	5f c0       	rjmp	.+190    	; 0x12f6 <GPIO_setupPinDirection+0x118>
    1238:	8c 81       	ldd	r24, Y+4	; 0x04
    123a:	9d 81       	ldd	r25, Y+5	; 0x05
    123c:	83 30       	cpi	r24, 0x03	; 3
    123e:	91 05       	cpc	r25, r1
    1240:	09 f4       	brne	.+2      	; 0x1244 <GPIO_setupPinDirection+0x66>
    1242:	85 c0       	rjmp	.+266    	; 0x134e <GPIO_setupPinDirection+0x170>
    1244:	af c0       	rjmp	.+350    	; 0x13a4 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1246:	8b 81       	ldd	r24, Y+3	; 0x03
    1248:	81 30       	cpi	r24, 0x01	; 1
    124a:	a1 f4       	brne	.+40     	; 0x1274 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    124c:	aa e3       	ldi	r26, 0x3A	; 58
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	ea e3       	ldi	r30, 0x3A	; 58
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	48 2f       	mov	r20, r24
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	02 2e       	mov	r0, r18
    1264:	02 c0       	rjmp	.+4      	; 0x126a <GPIO_setupPinDirection+0x8c>
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	0a 94       	dec	r0
    126c:	e2 f7       	brpl	.-8      	; 0x1266 <GPIO_setupPinDirection+0x88>
    126e:	84 2b       	or	r24, r20
    1270:	8c 93       	st	X, r24
    1272:	98 c0       	rjmp	.+304    	; 0x13a4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1274:	aa e3       	ldi	r26, 0x3A	; 58
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	ea e3       	ldi	r30, 0x3A	; 58
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	48 2f       	mov	r20, r24
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	28 2f       	mov	r18, r24
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	02 2e       	mov	r0, r18
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <GPIO_setupPinDirection+0xb4>
    128e:	88 0f       	add	r24, r24
    1290:	99 1f       	adc	r25, r25
    1292:	0a 94       	dec	r0
    1294:	e2 f7       	brpl	.-8      	; 0x128e <GPIO_setupPinDirection+0xb0>
    1296:	80 95       	com	r24
    1298:	84 23       	and	r24, r20
    129a:	8c 93       	st	X, r24
    129c:	83 c0       	rjmp	.+262    	; 0x13a4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    129e:	8b 81       	ldd	r24, Y+3	; 0x03
    12a0:	81 30       	cpi	r24, 0x01	; 1
    12a2:	a1 f4       	brne	.+40     	; 0x12cc <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    12a4:	a7 e3       	ldi	r26, 0x37	; 55
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e7 e3       	ldi	r30, 0x37	; 55
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	48 2f       	mov	r20, r24
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	02 2e       	mov	r0, r18
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <GPIO_setupPinDirection+0xe4>
    12be:	88 0f       	add	r24, r24
    12c0:	99 1f       	adc	r25, r25
    12c2:	0a 94       	dec	r0
    12c4:	e2 f7       	brpl	.-8      	; 0x12be <GPIO_setupPinDirection+0xe0>
    12c6:	84 2b       	or	r24, r20
    12c8:	8c 93       	st	X, r24
    12ca:	6c c0       	rjmp	.+216    	; 0x13a4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    12cc:	a7 e3       	ldi	r26, 0x37	; 55
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	e7 e3       	ldi	r30, 0x37	; 55
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	48 2f       	mov	r20, r24
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	02 2e       	mov	r0, r18
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <GPIO_setupPinDirection+0x10c>
    12e6:	88 0f       	add	r24, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	0a 94       	dec	r0
    12ec:	e2 f7       	brpl	.-8      	; 0x12e6 <GPIO_setupPinDirection+0x108>
    12ee:	80 95       	com	r24
    12f0:	84 23       	and	r24, r20
    12f2:	8c 93       	st	X, r24
    12f4:	57 c0       	rjmp	.+174    	; 0x13a4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	81 30       	cpi	r24, 0x01	; 1
    12fa:	a1 f4       	brne	.+40     	; 0x1324 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    12fc:	a4 e3       	ldi	r26, 0x34	; 52
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	e4 e3       	ldi	r30, 0x34	; 52
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	48 2f       	mov	r20, r24
    1308:	8a 81       	ldd	r24, Y+2	; 0x02
    130a:	28 2f       	mov	r18, r24
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	02 2e       	mov	r0, r18
    1314:	02 c0       	rjmp	.+4      	; 0x131a <GPIO_setupPinDirection+0x13c>
    1316:	88 0f       	add	r24, r24
    1318:	99 1f       	adc	r25, r25
    131a:	0a 94       	dec	r0
    131c:	e2 f7       	brpl	.-8      	; 0x1316 <GPIO_setupPinDirection+0x138>
    131e:	84 2b       	or	r24, r20
    1320:	8c 93       	st	X, r24
    1322:	40 c0       	rjmp	.+128    	; 0x13a4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1324:	a4 e3       	ldi	r26, 0x34	; 52
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	e4 e3       	ldi	r30, 0x34	; 52
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	48 2f       	mov	r20, r24
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
    1332:	28 2f       	mov	r18, r24
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	02 2e       	mov	r0, r18
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <GPIO_setupPinDirection+0x164>
    133e:	88 0f       	add	r24, r24
    1340:	99 1f       	adc	r25, r25
    1342:	0a 94       	dec	r0
    1344:	e2 f7       	brpl	.-8      	; 0x133e <GPIO_setupPinDirection+0x160>
    1346:	80 95       	com	r24
    1348:	84 23       	and	r24, r20
    134a:	8c 93       	st	X, r24
    134c:	2b c0       	rjmp	.+86     	; 0x13a4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	81 30       	cpi	r24, 0x01	; 1
    1352:	a1 f4       	brne	.+40     	; 0x137c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1354:	a1 e3       	ldi	r26, 0x31	; 49
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	e1 e3       	ldi	r30, 0x31	; 49
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	48 2f       	mov	r20, r24
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	02 2e       	mov	r0, r18
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <GPIO_setupPinDirection+0x194>
    136e:	88 0f       	add	r24, r24
    1370:	99 1f       	adc	r25, r25
    1372:	0a 94       	dec	r0
    1374:	e2 f7       	brpl	.-8      	; 0x136e <GPIO_setupPinDirection+0x190>
    1376:	84 2b       	or	r24, r20
    1378:	8c 93       	st	X, r24
    137a:	14 c0       	rjmp	.+40     	; 0x13a4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    137c:	a1 e3       	ldi	r26, 0x31	; 49
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	e1 e3       	ldi	r30, 0x31	; 49
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	48 2f       	mov	r20, r24
    1388:	8a 81       	ldd	r24, Y+2	; 0x02
    138a:	28 2f       	mov	r18, r24
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	02 2e       	mov	r0, r18
    1394:	02 c0       	rjmp	.+4      	; 0x139a <GPIO_setupPinDirection+0x1bc>
    1396:	88 0f       	add	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	0a 94       	dec	r0
    139c:	e2 f7       	brpl	.-8      	; 0x1396 <GPIO_setupPinDirection+0x1b8>
    139e:	80 95       	com	r24
    13a0:	84 23       	and	r24, r20
    13a2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	cf 91       	pop	r28
    13b0:	df 91       	pop	r29
    13b2:	08 95       	ret

000013b4 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    13b4:	df 93       	push	r29
    13b6:	cf 93       	push	r28
    13b8:	00 d0       	rcall	.+0      	; 0x13ba <GPIO_writePin+0x6>
    13ba:	00 d0       	rcall	.+0      	; 0x13bc <GPIO_writePin+0x8>
    13bc:	0f 92       	push	r0
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
    13c2:	89 83       	std	Y+1, r24	; 0x01
    13c4:	6a 83       	std	Y+2, r22	; 0x02
    13c6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	88 30       	cpi	r24, 0x08	; 8
    13cc:	08 f0       	brcs	.+2      	; 0x13d0 <GPIO_writePin+0x1c>
    13ce:	d5 c0       	rjmp	.+426    	; 0x157a <GPIO_writePin+0x1c6>
    13d0:	89 81       	ldd	r24, Y+1	; 0x01
    13d2:	84 30       	cpi	r24, 0x04	; 4
    13d4:	08 f0       	brcs	.+2      	; 0x13d8 <GPIO_writePin+0x24>
    13d6:	d1 c0       	rjmp	.+418    	; 0x157a <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    13d8:	89 81       	ldd	r24, Y+1	; 0x01
    13da:	28 2f       	mov	r18, r24
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	3d 83       	std	Y+5, r19	; 0x05
    13e0:	2c 83       	std	Y+4, r18	; 0x04
    13e2:	8c 81       	ldd	r24, Y+4	; 0x04
    13e4:	9d 81       	ldd	r25, Y+5	; 0x05
    13e6:	81 30       	cpi	r24, 0x01	; 1
    13e8:	91 05       	cpc	r25, r1
    13ea:	09 f4       	brne	.+2      	; 0x13ee <GPIO_writePin+0x3a>
    13ec:	43 c0       	rjmp	.+134    	; 0x1474 <GPIO_writePin+0xc0>
    13ee:	2c 81       	ldd	r18, Y+4	; 0x04
    13f0:	3d 81       	ldd	r19, Y+5	; 0x05
    13f2:	22 30       	cpi	r18, 0x02	; 2
    13f4:	31 05       	cpc	r19, r1
    13f6:	2c f4       	brge	.+10     	; 0x1402 <GPIO_writePin+0x4e>
    13f8:	8c 81       	ldd	r24, Y+4	; 0x04
    13fa:	9d 81       	ldd	r25, Y+5	; 0x05
    13fc:	00 97       	sbiw	r24, 0x00	; 0
    13fe:	71 f0       	breq	.+28     	; 0x141c <GPIO_writePin+0x68>
    1400:	bc c0       	rjmp	.+376    	; 0x157a <GPIO_writePin+0x1c6>
    1402:	2c 81       	ldd	r18, Y+4	; 0x04
    1404:	3d 81       	ldd	r19, Y+5	; 0x05
    1406:	22 30       	cpi	r18, 0x02	; 2
    1408:	31 05       	cpc	r19, r1
    140a:	09 f4       	brne	.+2      	; 0x140e <GPIO_writePin+0x5a>
    140c:	5f c0       	rjmp	.+190    	; 0x14cc <GPIO_writePin+0x118>
    140e:	8c 81       	ldd	r24, Y+4	; 0x04
    1410:	9d 81       	ldd	r25, Y+5	; 0x05
    1412:	83 30       	cpi	r24, 0x03	; 3
    1414:	91 05       	cpc	r25, r1
    1416:	09 f4       	brne	.+2      	; 0x141a <GPIO_writePin+0x66>
    1418:	85 c0       	rjmp	.+266    	; 0x1524 <GPIO_writePin+0x170>
    141a:	af c0       	rjmp	.+350    	; 0x157a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    141c:	8b 81       	ldd	r24, Y+3	; 0x03
    141e:	81 30       	cpi	r24, 0x01	; 1
    1420:	a1 f4       	brne	.+40     	; 0x144a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1422:	ab e3       	ldi	r26, 0x3B	; 59
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	eb e3       	ldi	r30, 0x3B	; 59
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	48 2f       	mov	r20, r24
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	02 2e       	mov	r0, r18
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <GPIO_writePin+0x8c>
    143c:	88 0f       	add	r24, r24
    143e:	99 1f       	adc	r25, r25
    1440:	0a 94       	dec	r0
    1442:	e2 f7       	brpl	.-8      	; 0x143c <GPIO_writePin+0x88>
    1444:	84 2b       	or	r24, r20
    1446:	8c 93       	st	X, r24
    1448:	98 c0       	rjmp	.+304    	; 0x157a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    144a:	ab e3       	ldi	r26, 0x3B	; 59
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	eb e3       	ldi	r30, 0x3B	; 59
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	48 2f       	mov	r20, r24
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	02 2e       	mov	r0, r18
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <GPIO_writePin+0xb4>
    1464:	88 0f       	add	r24, r24
    1466:	99 1f       	adc	r25, r25
    1468:	0a 94       	dec	r0
    146a:	e2 f7       	brpl	.-8      	; 0x1464 <GPIO_writePin+0xb0>
    146c:	80 95       	com	r24
    146e:	84 23       	and	r24, r20
    1470:	8c 93       	st	X, r24
    1472:	83 c0       	rjmp	.+262    	; 0x157a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	81 30       	cpi	r24, 0x01	; 1
    1478:	a1 f4       	brne	.+40     	; 0x14a2 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    147a:	a8 e3       	ldi	r26, 0x38	; 56
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	e8 e3       	ldi	r30, 0x38	; 56
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	48 2f       	mov	r20, r24
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	28 2f       	mov	r18, r24
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	02 2e       	mov	r0, r18
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <GPIO_writePin+0xe4>
    1494:	88 0f       	add	r24, r24
    1496:	99 1f       	adc	r25, r25
    1498:	0a 94       	dec	r0
    149a:	e2 f7       	brpl	.-8      	; 0x1494 <GPIO_writePin+0xe0>
    149c:	84 2b       	or	r24, r20
    149e:	8c 93       	st	X, r24
    14a0:	6c c0       	rjmp	.+216    	; 0x157a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    14a2:	a8 e3       	ldi	r26, 0x38	; 56
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	e8 e3       	ldi	r30, 0x38	; 56
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	48 2f       	mov	r20, r24
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	28 2f       	mov	r18, r24
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	02 2e       	mov	r0, r18
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <GPIO_writePin+0x10c>
    14bc:	88 0f       	add	r24, r24
    14be:	99 1f       	adc	r25, r25
    14c0:	0a 94       	dec	r0
    14c2:	e2 f7       	brpl	.-8      	; 0x14bc <GPIO_writePin+0x108>
    14c4:	80 95       	com	r24
    14c6:	84 23       	and	r24, r20
    14c8:	8c 93       	st	X, r24
    14ca:	57 c0       	rjmp	.+174    	; 0x157a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    14cc:	8b 81       	ldd	r24, Y+3	; 0x03
    14ce:	81 30       	cpi	r24, 0x01	; 1
    14d0:	a1 f4       	brne	.+40     	; 0x14fa <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    14d2:	a5 e3       	ldi	r26, 0x35	; 53
    14d4:	b0 e0       	ldi	r27, 0x00	; 0
    14d6:	e5 e3       	ldi	r30, 0x35	; 53
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	48 2f       	mov	r20, r24
    14de:	8a 81       	ldd	r24, Y+2	; 0x02
    14e0:	28 2f       	mov	r18, r24
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	02 2e       	mov	r0, r18
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <GPIO_writePin+0x13c>
    14ec:	88 0f       	add	r24, r24
    14ee:	99 1f       	adc	r25, r25
    14f0:	0a 94       	dec	r0
    14f2:	e2 f7       	brpl	.-8      	; 0x14ec <GPIO_writePin+0x138>
    14f4:	84 2b       	or	r24, r20
    14f6:	8c 93       	st	X, r24
    14f8:	40 c0       	rjmp	.+128    	; 0x157a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    14fa:	a5 e3       	ldi	r26, 0x35	; 53
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	e5 e3       	ldi	r30, 0x35	; 53
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	48 2f       	mov	r20, r24
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	02 2e       	mov	r0, r18
    1512:	02 c0       	rjmp	.+4      	; 0x1518 <GPIO_writePin+0x164>
    1514:	88 0f       	add	r24, r24
    1516:	99 1f       	adc	r25, r25
    1518:	0a 94       	dec	r0
    151a:	e2 f7       	brpl	.-8      	; 0x1514 <GPIO_writePin+0x160>
    151c:	80 95       	com	r24
    151e:	84 23       	and	r24, r20
    1520:	8c 93       	st	X, r24
    1522:	2b c0       	rjmp	.+86     	; 0x157a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	81 30       	cpi	r24, 0x01	; 1
    1528:	a1 f4       	brne	.+40     	; 0x1552 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    152a:	a2 e3       	ldi	r26, 0x32	; 50
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	e2 e3       	ldi	r30, 0x32	; 50
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	48 2f       	mov	r20, r24
    1536:	8a 81       	ldd	r24, Y+2	; 0x02
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	02 2e       	mov	r0, r18
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <GPIO_writePin+0x194>
    1544:	88 0f       	add	r24, r24
    1546:	99 1f       	adc	r25, r25
    1548:	0a 94       	dec	r0
    154a:	e2 f7       	brpl	.-8      	; 0x1544 <GPIO_writePin+0x190>
    154c:	84 2b       	or	r24, r20
    154e:	8c 93       	st	X, r24
    1550:	14 c0       	rjmp	.+40     	; 0x157a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1552:	a2 e3       	ldi	r26, 0x32	; 50
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e2 e3       	ldi	r30, 0x32	; 50
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	48 2f       	mov	r20, r24
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	02 2e       	mov	r0, r18
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <GPIO_writePin+0x1bc>
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	0a 94       	dec	r0
    1572:	e2 f7       	brpl	.-8      	; 0x156c <GPIO_writePin+0x1b8>
    1574:	80 95       	com	r24
    1576:	84 23       	and	r24, r20
    1578:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    157a:	0f 90       	pop	r0
    157c:	0f 90       	pop	r0
    157e:	0f 90       	pop	r0
    1580:	0f 90       	pop	r0
    1582:	0f 90       	pop	r0
    1584:	cf 91       	pop	r28
    1586:	df 91       	pop	r29
    1588:	08 95       	ret

0000158a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    158a:	df 93       	push	r29
    158c:	cf 93       	push	r28
    158e:	00 d0       	rcall	.+0      	; 0x1590 <GPIO_readPin+0x6>
    1590:	00 d0       	rcall	.+0      	; 0x1592 <GPIO_readPin+0x8>
    1592:	0f 92       	push	r0
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
    1598:	8a 83       	std	Y+2, r24	; 0x02
    159a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    159c:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    159e:	8b 81       	ldd	r24, Y+3	; 0x03
    15a0:	88 30       	cpi	r24, 0x08	; 8
    15a2:	08 f0       	brcs	.+2      	; 0x15a6 <GPIO_readPin+0x1c>
    15a4:	84 c0       	rjmp	.+264    	; 0x16ae <GPIO_readPin+0x124>
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	84 30       	cpi	r24, 0x04	; 4
    15aa:	08 f0       	brcs	.+2      	; 0x15ae <GPIO_readPin+0x24>
    15ac:	80 c0       	rjmp	.+256    	; 0x16ae <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	3d 83       	std	Y+5, r19	; 0x05
    15b6:	2c 83       	std	Y+4, r18	; 0x04
    15b8:	4c 81       	ldd	r20, Y+4	; 0x04
    15ba:	5d 81       	ldd	r21, Y+5	; 0x05
    15bc:	41 30       	cpi	r20, 0x01	; 1
    15be:	51 05       	cpc	r21, r1
    15c0:	79 f1       	breq	.+94     	; 0x1620 <GPIO_readPin+0x96>
    15c2:	8c 81       	ldd	r24, Y+4	; 0x04
    15c4:	9d 81       	ldd	r25, Y+5	; 0x05
    15c6:	82 30       	cpi	r24, 0x02	; 2
    15c8:	91 05       	cpc	r25, r1
    15ca:	34 f4       	brge	.+12     	; 0x15d8 <GPIO_readPin+0x4e>
    15cc:	2c 81       	ldd	r18, Y+4	; 0x04
    15ce:	3d 81       	ldd	r19, Y+5	; 0x05
    15d0:	21 15       	cp	r18, r1
    15d2:	31 05       	cpc	r19, r1
    15d4:	69 f0       	breq	.+26     	; 0x15f0 <GPIO_readPin+0x66>
    15d6:	6b c0       	rjmp	.+214    	; 0x16ae <GPIO_readPin+0x124>
    15d8:	4c 81       	ldd	r20, Y+4	; 0x04
    15da:	5d 81       	ldd	r21, Y+5	; 0x05
    15dc:	42 30       	cpi	r20, 0x02	; 2
    15de:	51 05       	cpc	r21, r1
    15e0:	b9 f1       	breq	.+110    	; 0x1650 <GPIO_readPin+0xc6>
    15e2:	8c 81       	ldd	r24, Y+4	; 0x04
    15e4:	9d 81       	ldd	r25, Y+5	; 0x05
    15e6:	83 30       	cpi	r24, 0x03	; 3
    15e8:	91 05       	cpc	r25, r1
    15ea:	09 f4       	brne	.+2      	; 0x15ee <GPIO_readPin+0x64>
    15ec:	49 c0       	rjmp	.+146    	; 0x1680 <GPIO_readPin+0xf6>
    15ee:	5f c0       	rjmp	.+190    	; 0x16ae <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    15f0:	e9 e3       	ldi	r30, 0x39	; 57
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	28 2f       	mov	r18, r24
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	8b 81       	ldd	r24, Y+3	; 0x03
    15fc:	88 2f       	mov	r24, r24
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	a9 01       	movw	r20, r18
    1602:	02 c0       	rjmp	.+4      	; 0x1608 <GPIO_readPin+0x7e>
    1604:	55 95       	asr	r21
    1606:	47 95       	ror	r20
    1608:	8a 95       	dec	r24
    160a:	e2 f7       	brpl	.-8      	; 0x1604 <GPIO_readPin+0x7a>
    160c:	ca 01       	movw	r24, r20
    160e:	81 70       	andi	r24, 0x01	; 1
    1610:	90 70       	andi	r25, 0x00	; 0
    1612:	88 23       	and	r24, r24
    1614:	19 f0       	breq	.+6      	; 0x161c <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	89 83       	std	Y+1, r24	; 0x01
    161a:	49 c0       	rjmp	.+146    	; 0x16ae <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    161c:	19 82       	std	Y+1, r1	; 0x01
    161e:	47 c0       	rjmp	.+142    	; 0x16ae <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1620:	e6 e3       	ldi	r30, 0x36	; 54
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	28 2f       	mov	r18, r24
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	8b 81       	ldd	r24, Y+3	; 0x03
    162c:	88 2f       	mov	r24, r24
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	a9 01       	movw	r20, r18
    1632:	02 c0       	rjmp	.+4      	; 0x1638 <GPIO_readPin+0xae>
    1634:	55 95       	asr	r21
    1636:	47 95       	ror	r20
    1638:	8a 95       	dec	r24
    163a:	e2 f7       	brpl	.-8      	; 0x1634 <GPIO_readPin+0xaa>
    163c:	ca 01       	movw	r24, r20
    163e:	81 70       	andi	r24, 0x01	; 1
    1640:	90 70       	andi	r25, 0x00	; 0
    1642:	88 23       	and	r24, r24
    1644:	19 f0       	breq	.+6      	; 0x164c <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	89 83       	std	Y+1, r24	; 0x01
    164a:	31 c0       	rjmp	.+98     	; 0x16ae <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    164c:	19 82       	std	Y+1, r1	; 0x01
    164e:	2f c0       	rjmp	.+94     	; 0x16ae <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1650:	e3 e3       	ldi	r30, 0x33	; 51
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	28 2f       	mov	r18, r24
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	8b 81       	ldd	r24, Y+3	; 0x03
    165c:	88 2f       	mov	r24, r24
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	a9 01       	movw	r20, r18
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <GPIO_readPin+0xde>
    1664:	55 95       	asr	r21
    1666:	47 95       	ror	r20
    1668:	8a 95       	dec	r24
    166a:	e2 f7       	brpl	.-8      	; 0x1664 <GPIO_readPin+0xda>
    166c:	ca 01       	movw	r24, r20
    166e:	81 70       	andi	r24, 0x01	; 1
    1670:	90 70       	andi	r25, 0x00	; 0
    1672:	88 23       	and	r24, r24
    1674:	19 f0       	breq	.+6      	; 0x167c <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	89 83       	std	Y+1, r24	; 0x01
    167a:	19 c0       	rjmp	.+50     	; 0x16ae <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    167c:	19 82       	std	Y+1, r1	; 0x01
    167e:	17 c0       	rjmp	.+46     	; 0x16ae <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1680:	e0 e3       	ldi	r30, 0x30	; 48
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	28 2f       	mov	r18, r24
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	8b 81       	ldd	r24, Y+3	; 0x03
    168c:	88 2f       	mov	r24, r24
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	a9 01       	movw	r20, r18
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <GPIO_readPin+0x10e>
    1694:	55 95       	asr	r21
    1696:	47 95       	ror	r20
    1698:	8a 95       	dec	r24
    169a:	e2 f7       	brpl	.-8      	; 0x1694 <GPIO_readPin+0x10a>
    169c:	ca 01       	movw	r24, r20
    169e:	81 70       	andi	r24, 0x01	; 1
    16a0:	90 70       	andi	r25, 0x00	; 0
    16a2:	88 23       	and	r24, r24
    16a4:	19 f0       	breq	.+6      	; 0x16ac <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	89 83       	std	Y+1, r24	; 0x01
    16aa:	01 c0       	rjmp	.+2      	; 0x16ae <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    16ac:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    16ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	0f 90       	pop	r0
    16b6:	0f 90       	pop	r0
    16b8:	0f 90       	pop	r0
    16ba:	cf 91       	pop	r28
    16bc:	df 91       	pop	r29
    16be:	08 95       	ret

000016c0 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    16c0:	df 93       	push	r29
    16c2:	cf 93       	push	r28
    16c4:	00 d0       	rcall	.+0      	; 0x16c6 <GPIO_setupPortDirection+0x6>
    16c6:	00 d0       	rcall	.+0      	; 0x16c8 <GPIO_setupPortDirection+0x8>
    16c8:	cd b7       	in	r28, 0x3d	; 61
    16ca:	de b7       	in	r29, 0x3e	; 62
    16cc:	89 83       	std	Y+1, r24	; 0x01
    16ce:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    16d0:	89 81       	ldd	r24, Y+1	; 0x01
    16d2:	84 30       	cpi	r24, 0x04	; 4
    16d4:	90 f5       	brcc	.+100    	; 0x173a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    16d6:	89 81       	ldd	r24, Y+1	; 0x01
    16d8:	28 2f       	mov	r18, r24
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	3c 83       	std	Y+4, r19	; 0x04
    16de:	2b 83       	std	Y+3, r18	; 0x03
    16e0:	8b 81       	ldd	r24, Y+3	; 0x03
    16e2:	9c 81       	ldd	r25, Y+4	; 0x04
    16e4:	81 30       	cpi	r24, 0x01	; 1
    16e6:	91 05       	cpc	r25, r1
    16e8:	d1 f0       	breq	.+52     	; 0x171e <GPIO_setupPortDirection+0x5e>
    16ea:	2b 81       	ldd	r18, Y+3	; 0x03
    16ec:	3c 81       	ldd	r19, Y+4	; 0x04
    16ee:	22 30       	cpi	r18, 0x02	; 2
    16f0:	31 05       	cpc	r19, r1
    16f2:	2c f4       	brge	.+10     	; 0x16fe <GPIO_setupPortDirection+0x3e>
    16f4:	8b 81       	ldd	r24, Y+3	; 0x03
    16f6:	9c 81       	ldd	r25, Y+4	; 0x04
    16f8:	00 97       	sbiw	r24, 0x00	; 0
    16fa:	61 f0       	breq	.+24     	; 0x1714 <GPIO_setupPortDirection+0x54>
    16fc:	1e c0       	rjmp	.+60     	; 0x173a <GPIO_setupPortDirection+0x7a>
    16fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1700:	3c 81       	ldd	r19, Y+4	; 0x04
    1702:	22 30       	cpi	r18, 0x02	; 2
    1704:	31 05       	cpc	r19, r1
    1706:	81 f0       	breq	.+32     	; 0x1728 <GPIO_setupPortDirection+0x68>
    1708:	8b 81       	ldd	r24, Y+3	; 0x03
    170a:	9c 81       	ldd	r25, Y+4	; 0x04
    170c:	83 30       	cpi	r24, 0x03	; 3
    170e:	91 05       	cpc	r25, r1
    1710:	81 f0       	breq	.+32     	; 0x1732 <GPIO_setupPortDirection+0x72>
    1712:	13 c0       	rjmp	.+38     	; 0x173a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1714:	ea e3       	ldi	r30, 0x3A	; 58
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	8a 81       	ldd	r24, Y+2	; 0x02
    171a:	80 83       	st	Z, r24
    171c:	0e c0       	rjmp	.+28     	; 0x173a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    171e:	e7 e3       	ldi	r30, 0x37	; 55
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	8a 81       	ldd	r24, Y+2	; 0x02
    1724:	80 83       	st	Z, r24
    1726:	09 c0       	rjmp	.+18     	; 0x173a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1728:	e4 e3       	ldi	r30, 0x34	; 52
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	8a 81       	ldd	r24, Y+2	; 0x02
    172e:	80 83       	st	Z, r24
    1730:	04 c0       	rjmp	.+8      	; 0x173a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1732:	e1 e3       	ldi	r30, 0x31	; 49
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	8a 81       	ldd	r24, Y+2	; 0x02
    1738:	80 83       	st	Z, r24
			break;
		}
	}
}
    173a:	0f 90       	pop	r0
    173c:	0f 90       	pop	r0
    173e:	0f 90       	pop	r0
    1740:	0f 90       	pop	r0
    1742:	cf 91       	pop	r28
    1744:	df 91       	pop	r29
    1746:	08 95       	ret

00001748 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1748:	df 93       	push	r29
    174a:	cf 93       	push	r28
    174c:	00 d0       	rcall	.+0      	; 0x174e <GPIO_writePort+0x6>
    174e:	00 d0       	rcall	.+0      	; 0x1750 <GPIO_writePort+0x8>
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62
    1754:	89 83       	std	Y+1, r24	; 0x01
    1756:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1758:	89 81       	ldd	r24, Y+1	; 0x01
    175a:	84 30       	cpi	r24, 0x04	; 4
    175c:	90 f5       	brcc	.+100    	; 0x17c2 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    175e:	89 81       	ldd	r24, Y+1	; 0x01
    1760:	28 2f       	mov	r18, r24
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	3c 83       	std	Y+4, r19	; 0x04
    1766:	2b 83       	std	Y+3, r18	; 0x03
    1768:	8b 81       	ldd	r24, Y+3	; 0x03
    176a:	9c 81       	ldd	r25, Y+4	; 0x04
    176c:	81 30       	cpi	r24, 0x01	; 1
    176e:	91 05       	cpc	r25, r1
    1770:	d1 f0       	breq	.+52     	; 0x17a6 <GPIO_writePort+0x5e>
    1772:	2b 81       	ldd	r18, Y+3	; 0x03
    1774:	3c 81       	ldd	r19, Y+4	; 0x04
    1776:	22 30       	cpi	r18, 0x02	; 2
    1778:	31 05       	cpc	r19, r1
    177a:	2c f4       	brge	.+10     	; 0x1786 <GPIO_writePort+0x3e>
    177c:	8b 81       	ldd	r24, Y+3	; 0x03
    177e:	9c 81       	ldd	r25, Y+4	; 0x04
    1780:	00 97       	sbiw	r24, 0x00	; 0
    1782:	61 f0       	breq	.+24     	; 0x179c <GPIO_writePort+0x54>
    1784:	1e c0       	rjmp	.+60     	; 0x17c2 <GPIO_writePort+0x7a>
    1786:	2b 81       	ldd	r18, Y+3	; 0x03
    1788:	3c 81       	ldd	r19, Y+4	; 0x04
    178a:	22 30       	cpi	r18, 0x02	; 2
    178c:	31 05       	cpc	r19, r1
    178e:	81 f0       	breq	.+32     	; 0x17b0 <GPIO_writePort+0x68>
    1790:	8b 81       	ldd	r24, Y+3	; 0x03
    1792:	9c 81       	ldd	r25, Y+4	; 0x04
    1794:	83 30       	cpi	r24, 0x03	; 3
    1796:	91 05       	cpc	r25, r1
    1798:	81 f0       	breq	.+32     	; 0x17ba <GPIO_writePort+0x72>
    179a:	13 c0       	rjmp	.+38     	; 0x17c2 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    179c:	eb e3       	ldi	r30, 0x3B	; 59
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	8a 81       	ldd	r24, Y+2	; 0x02
    17a2:	80 83       	st	Z, r24
    17a4:	0e c0       	rjmp	.+28     	; 0x17c2 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    17a6:	e8 e3       	ldi	r30, 0x38	; 56
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	8a 81       	ldd	r24, Y+2	; 0x02
    17ac:	80 83       	st	Z, r24
    17ae:	09 c0       	rjmp	.+18     	; 0x17c2 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    17b0:	e5 e3       	ldi	r30, 0x35	; 53
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	8a 81       	ldd	r24, Y+2	; 0x02
    17b6:	80 83       	st	Z, r24
    17b8:	04 c0       	rjmp	.+8      	; 0x17c2 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    17ba:	e2 e3       	ldi	r30, 0x32	; 50
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	8a 81       	ldd	r24, Y+2	; 0x02
    17c0:	80 83       	st	Z, r24
			break;
		}
	}
}
    17c2:	0f 90       	pop	r0
    17c4:	0f 90       	pop	r0
    17c6:	0f 90       	pop	r0
    17c8:	0f 90       	pop	r0
    17ca:	cf 91       	pop	r28
    17cc:	df 91       	pop	r29
    17ce:	08 95       	ret

000017d0 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    17d0:	df 93       	push	r29
    17d2:	cf 93       	push	r28
    17d4:	00 d0       	rcall	.+0      	; 0x17d6 <GPIO_readPort+0x6>
    17d6:	00 d0       	rcall	.+0      	; 0x17d8 <GPIO_readPort+0x8>
    17d8:	cd b7       	in	r28, 0x3d	; 61
    17da:	de b7       	in	r29, 0x3e	; 62
    17dc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    17de:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    17e0:	8a 81       	ldd	r24, Y+2	; 0x02
    17e2:	84 30       	cpi	r24, 0x04	; 4
    17e4:	90 f5       	brcc	.+100    	; 0x184a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    17e6:	8a 81       	ldd	r24, Y+2	; 0x02
    17e8:	28 2f       	mov	r18, r24
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	3c 83       	std	Y+4, r19	; 0x04
    17ee:	2b 83       	std	Y+3, r18	; 0x03
    17f0:	8b 81       	ldd	r24, Y+3	; 0x03
    17f2:	9c 81       	ldd	r25, Y+4	; 0x04
    17f4:	81 30       	cpi	r24, 0x01	; 1
    17f6:	91 05       	cpc	r25, r1
    17f8:	d1 f0       	breq	.+52     	; 0x182e <GPIO_readPort+0x5e>
    17fa:	2b 81       	ldd	r18, Y+3	; 0x03
    17fc:	3c 81       	ldd	r19, Y+4	; 0x04
    17fe:	22 30       	cpi	r18, 0x02	; 2
    1800:	31 05       	cpc	r19, r1
    1802:	2c f4       	brge	.+10     	; 0x180e <GPIO_readPort+0x3e>
    1804:	8b 81       	ldd	r24, Y+3	; 0x03
    1806:	9c 81       	ldd	r25, Y+4	; 0x04
    1808:	00 97       	sbiw	r24, 0x00	; 0
    180a:	61 f0       	breq	.+24     	; 0x1824 <GPIO_readPort+0x54>
    180c:	1e c0       	rjmp	.+60     	; 0x184a <GPIO_readPort+0x7a>
    180e:	2b 81       	ldd	r18, Y+3	; 0x03
    1810:	3c 81       	ldd	r19, Y+4	; 0x04
    1812:	22 30       	cpi	r18, 0x02	; 2
    1814:	31 05       	cpc	r19, r1
    1816:	81 f0       	breq	.+32     	; 0x1838 <GPIO_readPort+0x68>
    1818:	8b 81       	ldd	r24, Y+3	; 0x03
    181a:	9c 81       	ldd	r25, Y+4	; 0x04
    181c:	83 30       	cpi	r24, 0x03	; 3
    181e:	91 05       	cpc	r25, r1
    1820:	81 f0       	breq	.+32     	; 0x1842 <GPIO_readPort+0x72>
    1822:	13 c0       	rjmp	.+38     	; 0x184a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1824:	e9 e3       	ldi	r30, 0x39	; 57
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	89 83       	std	Y+1, r24	; 0x01
    182c:	0e c0       	rjmp	.+28     	; 0x184a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    182e:	e6 e3       	ldi	r30, 0x36	; 54
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	89 83       	std	Y+1, r24	; 0x01
    1836:	09 c0       	rjmp	.+18     	; 0x184a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1838:	e3 e3       	ldi	r30, 0x33	; 51
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	89 83       	std	Y+1, r24	; 0x01
    1840:	04 c0       	rjmp	.+8      	; 0x184a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1842:	e0 e3       	ldi	r30, 0x30	; 48
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    184a:	89 81       	ldd	r24, Y+1	; 0x01
}
    184c:	0f 90       	pop	r0
    184e:	0f 90       	pop	r0
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	cf 91       	pop	r28
    1856:	df 91       	pop	r29
    1858:	08 95       	ret

0000185a <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    185a:	df 93       	push	r29
    185c:	cf 93       	push	r28
    185e:	00 d0       	rcall	.+0      	; 0x1860 <KEYPAD_getPressedKey+0x6>
    1860:	0f 92       	push	r0
    1862:	cd b7       	in	r28, 0x3d	; 61
    1864:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1866:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1868:	1b 82       	std	Y+3, r1	; 0x03
    186a:	42 c0       	rjmp	.+132    	; 0x18f0 <KEYPAD_getPressedKey+0x96>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    186c:	80 e0       	ldi	r24, 0x00	; 0
    186e:	60 e0       	ldi	r22, 0x00	; 0
    1870:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1874:	8b 81       	ldd	r24, Y+3	; 0x03
    1876:	98 2f       	mov	r25, r24
    1878:	9c 5f       	subi	r25, 0xFC	; 252
    187a:	80 e0       	ldi	r24, 0x00	; 0
    187c:	69 2f       	mov	r22, r25
    187e:	41 e0       	ldi	r20, 0x01	; 1
    1880:	0e 94 ef 08 	call	0x11de	; 0x11de <GPIO_setupPinDirection>
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1884:	8b 81       	ldd	r24, Y+3	; 0x03
    1886:	88 2f       	mov	r24, r24
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	9c 01       	movw	r18, r24
    188c:	2c 5f       	subi	r18, 0xFC	; 252
    188e:	3f 4f       	sbci	r19, 0xFF	; 255
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	02 c0       	rjmp	.+4      	; 0x189a <KEYPAD_getPressedKey+0x40>
    1896:	88 0f       	add	r24, r24
    1898:	99 1f       	adc	r25, r25
    189a:	2a 95       	dec	r18
    189c:	e2 f7       	brpl	.-8      	; 0x1896 <KEYPAD_getPressedKey+0x3c>
    189e:	89 83       	std	Y+1, r24	; 0x01
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	69 81       	ldd	r22, Y+1	; 0x01
    18a4:	0e 94 a4 0b 	call	0x1748	; 0x1748 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    18a8:	1a 82       	std	Y+2, r1	; 0x02
    18aa:	1c c0       	rjmp	.+56     	; 0x18e4 <KEYPAD_getPressedKey+0x8a>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	6a 81       	ldd	r22, Y+2	; 0x02
    18b0:	0e 94 c5 0a 	call	0x158a	; 0x158a <GPIO_readPin>
    18b4:	81 30       	cpi	r24, 0x01	; 1
    18b6:	99 f4       	brne	.+38     	; 0x18de <KEYPAD_getPressedKey+0x84>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    18b8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ba:	88 2f       	mov	r24, r24
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	88 0f       	add	r24, r24
    18c0:	99 1f       	adc	r25, r25
    18c2:	88 0f       	add	r24, r24
    18c4:	99 1f       	adc	r25, r25
    18c6:	98 2f       	mov	r25, r24
    18c8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ca:	89 0f       	add	r24, r25
    18cc:	8f 5f       	subi	r24, 0xFF	; 255
    18ce:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    18d2:	0f 90       	pop	r0
    18d4:	0f 90       	pop	r0
    18d6:	0f 90       	pop	r0
    18d8:	cf 91       	pop	r28
    18da:	df 91       	pop	r29
    18dc:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    18de:	8a 81       	ldd	r24, Y+2	; 0x02
    18e0:	8f 5f       	subi	r24, 0xFF	; 255
    18e2:	8a 83       	std	Y+2, r24	; 0x02
    18e4:	8a 81       	ldd	r24, Y+2	; 0x02
    18e6:	84 30       	cpi	r24, 0x04	; 4
    18e8:	08 f3       	brcs	.-62     	; 0x18ac <KEYPAD_getPressedKey+0x52>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	8f 5f       	subi	r24, 0xFF	; 255
    18ee:	8b 83       	std	Y+3, r24	; 0x03
    18f0:	8b 81       	ldd	r24, Y+3	; 0x03
    18f2:	84 30       	cpi	r24, 0x04	; 4
    18f4:	08 f4       	brcc	.+2      	; 0x18f8 <KEYPAD_getPressedKey+0x9e>
    18f6:	ba cf       	rjmp	.-140    	; 0x186c <KEYPAD_getPressedKey+0x12>
    18f8:	b7 cf       	rjmp	.-146    	; 0x1868 <KEYPAD_getPressedKey+0xe>

000018fa <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    18fa:	df 93       	push	r29
    18fc:	cf 93       	push	r28
    18fe:	00 d0       	rcall	.+0      	; 0x1900 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1900:	00 d0       	rcall	.+0      	; 0x1902 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1902:	cd b7       	in	r28, 0x3d	; 61
    1904:	de b7       	in	r29, 0x3e	; 62
    1906:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1908:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    190a:	8a 81       	ldd	r24, Y+2	; 0x02
    190c:	28 2f       	mov	r18, r24
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	3c 83       	std	Y+4, r19	; 0x04
    1912:	2b 83       	std	Y+3, r18	; 0x03
    1914:	8b 81       	ldd	r24, Y+3	; 0x03
    1916:	9c 81       	ldd	r25, Y+4	; 0x04
    1918:	88 30       	cpi	r24, 0x08	; 8
    191a:	91 05       	cpc	r25, r1
    191c:	09 f4       	brne	.+2      	; 0x1920 <KEYPAD_4x4_adjustKeyNumber+0x26>
    191e:	70 c0       	rjmp	.+224    	; 0x1a00 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1920:	2b 81       	ldd	r18, Y+3	; 0x03
    1922:	3c 81       	ldd	r19, Y+4	; 0x04
    1924:	29 30       	cpi	r18, 0x09	; 9
    1926:	31 05       	cpc	r19, r1
    1928:	5c f5       	brge	.+86     	; 0x1980 <KEYPAD_4x4_adjustKeyNumber+0x86>
    192a:	8b 81       	ldd	r24, Y+3	; 0x03
    192c:	9c 81       	ldd	r25, Y+4	; 0x04
    192e:	84 30       	cpi	r24, 0x04	; 4
    1930:	91 05       	cpc	r25, r1
    1932:	09 f4       	brne	.+2      	; 0x1936 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1934:	59 c0       	rjmp	.+178    	; 0x19e8 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1936:	2b 81       	ldd	r18, Y+3	; 0x03
    1938:	3c 81       	ldd	r19, Y+4	; 0x04
    193a:	25 30       	cpi	r18, 0x05	; 5
    193c:	31 05       	cpc	r19, r1
    193e:	9c f4       	brge	.+38     	; 0x1966 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1940:	8b 81       	ldd	r24, Y+3	; 0x03
    1942:	9c 81       	ldd	r25, Y+4	; 0x04
    1944:	82 30       	cpi	r24, 0x02	; 2
    1946:	91 05       	cpc	r25, r1
    1948:	09 f4       	brne	.+2      	; 0x194c <KEYPAD_4x4_adjustKeyNumber+0x52>
    194a:	48 c0       	rjmp	.+144    	; 0x19dc <KEYPAD_4x4_adjustKeyNumber+0xe2>
    194c:	2b 81       	ldd	r18, Y+3	; 0x03
    194e:	3c 81       	ldd	r19, Y+4	; 0x04
    1950:	23 30       	cpi	r18, 0x03	; 3
    1952:	31 05       	cpc	r19, r1
    1954:	0c f0       	brlt	.+2      	; 0x1958 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1956:	45 c0       	rjmp	.+138    	; 0x19e2 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1958:	8b 81       	ldd	r24, Y+3	; 0x03
    195a:	9c 81       	ldd	r25, Y+4	; 0x04
    195c:	81 30       	cpi	r24, 0x01	; 1
    195e:	91 05       	cpc	r25, r1
    1960:	09 f4       	brne	.+2      	; 0x1964 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1962:	39 c0       	rjmp	.+114    	; 0x19d6 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1964:	67 c0       	rjmp	.+206    	; 0x1a34 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1966:	2b 81       	ldd	r18, Y+3	; 0x03
    1968:	3c 81       	ldd	r19, Y+4	; 0x04
    196a:	26 30       	cpi	r18, 0x06	; 6
    196c:	31 05       	cpc	r19, r1
    196e:	09 f4       	brne	.+2      	; 0x1972 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1970:	41 c0       	rjmp	.+130    	; 0x19f4 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1972:	8b 81       	ldd	r24, Y+3	; 0x03
    1974:	9c 81       	ldd	r25, Y+4	; 0x04
    1976:	87 30       	cpi	r24, 0x07	; 7
    1978:	91 05       	cpc	r25, r1
    197a:	0c f0       	brlt	.+2      	; 0x197e <KEYPAD_4x4_adjustKeyNumber+0x84>
    197c:	3e c0       	rjmp	.+124    	; 0x19fa <KEYPAD_4x4_adjustKeyNumber+0x100>
    197e:	37 c0       	rjmp	.+110    	; 0x19ee <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1980:	2b 81       	ldd	r18, Y+3	; 0x03
    1982:	3c 81       	ldd	r19, Y+4	; 0x04
    1984:	2c 30       	cpi	r18, 0x0C	; 12
    1986:	31 05       	cpc	r19, r1
    1988:	09 f4       	brne	.+2      	; 0x198c <KEYPAD_4x4_adjustKeyNumber+0x92>
    198a:	46 c0       	rjmp	.+140    	; 0x1a18 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    198c:	8b 81       	ldd	r24, Y+3	; 0x03
    198e:	9c 81       	ldd	r25, Y+4	; 0x04
    1990:	8d 30       	cpi	r24, 0x0D	; 13
    1992:	91 05       	cpc	r25, r1
    1994:	5c f4       	brge	.+22     	; 0x19ac <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1996:	2b 81       	ldd	r18, Y+3	; 0x03
    1998:	3c 81       	ldd	r19, Y+4	; 0x04
    199a:	2a 30       	cpi	r18, 0x0A	; 10
    199c:	31 05       	cpc	r19, r1
    199e:	b1 f1       	breq	.+108    	; 0x1a0c <KEYPAD_4x4_adjustKeyNumber+0x112>
    19a0:	8b 81       	ldd	r24, Y+3	; 0x03
    19a2:	9c 81       	ldd	r25, Y+4	; 0x04
    19a4:	8b 30       	cpi	r24, 0x0B	; 11
    19a6:	91 05       	cpc	r25, r1
    19a8:	a4 f5       	brge	.+104    	; 0x1a12 <KEYPAD_4x4_adjustKeyNumber+0x118>
    19aa:	2d c0       	rjmp	.+90     	; 0x1a06 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    19ac:	2b 81       	ldd	r18, Y+3	; 0x03
    19ae:	3c 81       	ldd	r19, Y+4	; 0x04
    19b0:	2e 30       	cpi	r18, 0x0E	; 14
    19b2:	31 05       	cpc	r19, r1
    19b4:	b9 f1       	breq	.+110    	; 0x1a24 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    19b6:	8b 81       	ldd	r24, Y+3	; 0x03
    19b8:	9c 81       	ldd	r25, Y+4	; 0x04
    19ba:	8e 30       	cpi	r24, 0x0E	; 14
    19bc:	91 05       	cpc	r25, r1
    19be:	7c f1       	brlt	.+94     	; 0x1a1e <KEYPAD_4x4_adjustKeyNumber+0x124>
    19c0:	2b 81       	ldd	r18, Y+3	; 0x03
    19c2:	3c 81       	ldd	r19, Y+4	; 0x04
    19c4:	2f 30       	cpi	r18, 0x0F	; 15
    19c6:	31 05       	cpc	r19, r1
    19c8:	79 f1       	breq	.+94     	; 0x1a28 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    19ca:	8b 81       	ldd	r24, Y+3	; 0x03
    19cc:	9c 81       	ldd	r25, Y+4	; 0x04
    19ce:	80 31       	cpi	r24, 0x10	; 16
    19d0:	91 05       	cpc	r25, r1
    19d2:	69 f1       	breq	.+90     	; 0x1a2e <KEYPAD_4x4_adjustKeyNumber+0x134>
    19d4:	2f c0       	rjmp	.+94     	; 0x1a34 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    19d6:	87 e0       	ldi	r24, 0x07	; 7
    19d8:	89 83       	std	Y+1, r24	; 0x01
    19da:	2e c0       	rjmp	.+92     	; 0x1a38 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    19dc:	88 e0       	ldi	r24, 0x08	; 8
    19de:	89 83       	std	Y+1, r24	; 0x01
    19e0:	2b c0       	rjmp	.+86     	; 0x1a38 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    19e2:	89 e0       	ldi	r24, 0x09	; 9
    19e4:	89 83       	std	Y+1, r24	; 0x01
    19e6:	28 c0       	rjmp	.+80     	; 0x1a38 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    19e8:	85 e2       	ldi	r24, 0x25	; 37
    19ea:	89 83       	std	Y+1, r24	; 0x01
    19ec:	25 c0       	rjmp	.+74     	; 0x1a38 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    19ee:	84 e0       	ldi	r24, 0x04	; 4
    19f0:	89 83       	std	Y+1, r24	; 0x01
    19f2:	22 c0       	rjmp	.+68     	; 0x1a38 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    19f4:	85 e0       	ldi	r24, 0x05	; 5
    19f6:	89 83       	std	Y+1, r24	; 0x01
    19f8:	1f c0       	rjmp	.+62     	; 0x1a38 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    19fa:	86 e0       	ldi	r24, 0x06	; 6
    19fc:	89 83       	std	Y+1, r24	; 0x01
    19fe:	1c c0       	rjmp	.+56     	; 0x1a38 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1a00:	8a e2       	ldi	r24, 0x2A	; 42
    1a02:	89 83       	std	Y+1, r24	; 0x01
    1a04:	19 c0       	rjmp	.+50     	; 0x1a38 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	89 83       	std	Y+1, r24	; 0x01
    1a0a:	16 c0       	rjmp	.+44     	; 0x1a38 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1a0c:	82 e0       	ldi	r24, 0x02	; 2
    1a0e:	89 83       	std	Y+1, r24	; 0x01
    1a10:	13 c0       	rjmp	.+38     	; 0x1a38 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1a12:	83 e0       	ldi	r24, 0x03	; 3
    1a14:	89 83       	std	Y+1, r24	; 0x01
    1a16:	10 c0       	rjmp	.+32     	; 0x1a38 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1a18:	8d e2       	ldi	r24, 0x2D	; 45
    1a1a:	89 83       	std	Y+1, r24	; 0x01
    1a1c:	0d c0       	rjmp	.+26     	; 0x1a38 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1a1e:	8d e0       	ldi	r24, 0x0D	; 13
    1a20:	89 83       	std	Y+1, r24	; 0x01
    1a22:	0a c0       	rjmp	.+20     	; 0x1a38 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1a24:	19 82       	std	Y+1, r1	; 0x01
    1a26:	08 c0       	rjmp	.+16     	; 0x1a38 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1a28:	8d e3       	ldi	r24, 0x3D	; 61
    1a2a:	89 83       	std	Y+1, r24	; 0x01
    1a2c:	05 c0       	rjmp	.+10     	; 0x1a38 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1a2e:	8b e2       	ldi	r24, 0x2B	; 43
    1a30:	89 83       	std	Y+1, r24	; 0x01
    1a32:	02 c0       	rjmp	.+4      	; 0x1a38 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1a34:	8a 81       	ldd	r24, Y+2	; 0x02
    1a36:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1a38:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1a3a:	0f 90       	pop	r0
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	cf 91       	pop	r28
    1a44:	df 91       	pop	r29
    1a46:	08 95       	ret

00001a48 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1a48:	df 93       	push	r29
    1a4a:	cf 93       	push	r28
    1a4c:	cd b7       	in	r28, 0x3d	; 61
    1a4e:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	65 e0       	ldi	r22, 0x05	; 5
    1a54:	41 e0       	ldi	r20, 0x01	; 1
    1a56:	0e 94 ef 08 	call	0x11de	; 0x11de <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
    1a5c:	66 e0       	ldi	r22, 0x06	; 6
    1a5e:	41 e0       	ldi	r20, 0x01	; 1
    1a60:	0e 94 ef 08 	call	0x11de	; 0x11de <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1a64:	80 e0       	ldi	r24, 0x00	; 0
    1a66:	67 e0       	ldi	r22, 0x07	; 7
    1a68:	41 e0       	ldi	r20, 0x01	; 1
    1a6a:	0e 94 ef 08 	call	0x11de	; 0x11de <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	6f ef       	ldi	r22, 0xFF	; 255
    1a72:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1a76:	88 e3       	ldi	r24, 0x38	; 56
    1a78:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1a7c:	8c e0       	ldi	r24, 0x0C	; 12
    1a7e:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <LCD_sendCommand>
}
    1a88:	cf 91       	pop	r28
    1a8a:	df 91       	pop	r29
    1a8c:	08 95       	ret

00001a8e <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1a8e:	df 93       	push	r29
    1a90:	cf 93       	push	r28
    1a92:	cd b7       	in	r28, 0x3d	; 61
    1a94:	de b7       	in	r29, 0x3e	; 62
    1a96:	ea 97       	sbiw	r28, 0x3a	; 58
    1a98:	0f b6       	in	r0, 0x3f	; 63
    1a9a:	f8 94       	cli
    1a9c:	de bf       	out	0x3e, r29	; 62
    1a9e:	0f be       	out	0x3f, r0	; 63
    1aa0:	cd bf       	out	0x3d, r28	; 61
    1aa2:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    1aa4:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1aa6:	80 e0       	ldi	r24, 0x00	; 0
    1aa8:	65 e0       	ldi	r22, 0x05	; 5
    1aaa:	40 e0       	ldi	r20, 0x00	; 0
    1aac:	0e 94 da 09 	call	0x13b4	; 0x13b4 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	66 e0       	ldi	r22, 0x06	; 6
    1ab4:	40 e0       	ldi	r20, 0x00	; 0
    1ab6:	0e 94 da 09 	call	0x13b4	; 0x13b4 <GPIO_writePin>
    1aba:	80 e0       	ldi	r24, 0x00	; 0
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	a0 e8       	ldi	r26, 0x80	; 128
    1ac0:	bf e3       	ldi	r27, 0x3F	; 63
    1ac2:	8d ab       	std	Y+53, r24	; 0x35
    1ac4:	9e ab       	std	Y+54, r25	; 0x36
    1ac6:	af ab       	std	Y+55, r26	; 0x37
    1ac8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aca:	6d a9       	ldd	r22, Y+53	; 0x35
    1acc:	7e a9       	ldd	r23, Y+54	; 0x36
    1ace:	8f a9       	ldd	r24, Y+55	; 0x37
    1ad0:	98 ad       	ldd	r25, Y+56	; 0x38
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	4a e7       	ldi	r20, 0x7A	; 122
    1ad8:	53 e4       	ldi	r21, 0x43	; 67
    1ada:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ade:	dc 01       	movw	r26, r24
    1ae0:	cb 01       	movw	r24, r22
    1ae2:	89 ab       	std	Y+49, r24	; 0x31
    1ae4:	9a ab       	std	Y+50, r25	; 0x32
    1ae6:	ab ab       	std	Y+51, r26	; 0x33
    1ae8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1aea:	69 a9       	ldd	r22, Y+49	; 0x31
    1aec:	7a a9       	ldd	r23, Y+50	; 0x32
    1aee:	8b a9       	ldd	r24, Y+51	; 0x33
    1af0:	9c a9       	ldd	r25, Y+52	; 0x34
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	40 e8       	ldi	r20, 0x80	; 128
    1af8:	5f e3       	ldi	r21, 0x3F	; 63
    1afa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1afe:	88 23       	and	r24, r24
    1b00:	2c f4       	brge	.+10     	; 0x1b0c <LCD_sendCommand+0x7e>
		__ticks = 1;
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	98 ab       	std	Y+48, r25	; 0x30
    1b08:	8f a7       	std	Y+47, r24	; 0x2f
    1b0a:	3f c0       	rjmp	.+126    	; 0x1b8a <LCD_sendCommand+0xfc>
	else if (__tmp > 65535)
    1b0c:	69 a9       	ldd	r22, Y+49	; 0x31
    1b0e:	7a a9       	ldd	r23, Y+50	; 0x32
    1b10:	8b a9       	ldd	r24, Y+51	; 0x33
    1b12:	9c a9       	ldd	r25, Y+52	; 0x34
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	3f ef       	ldi	r19, 0xFF	; 255
    1b18:	4f e7       	ldi	r20, 0x7F	; 127
    1b1a:	57 e4       	ldi	r21, 0x47	; 71
    1b1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b20:	18 16       	cp	r1, r24
    1b22:	4c f5       	brge	.+82     	; 0x1b76 <LCD_sendCommand+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b24:	6d a9       	ldd	r22, Y+53	; 0x35
    1b26:	7e a9       	ldd	r23, Y+54	; 0x36
    1b28:	8f a9       	ldd	r24, Y+55	; 0x37
    1b2a:	98 ad       	ldd	r25, Y+56	; 0x38
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	40 e2       	ldi	r20, 0x20	; 32
    1b32:	51 e4       	ldi	r21, 0x41	; 65
    1b34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b38:	dc 01       	movw	r26, r24
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	bc 01       	movw	r22, r24
    1b3e:	cd 01       	movw	r24, r26
    1b40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b44:	dc 01       	movw	r26, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	98 ab       	std	Y+48, r25	; 0x30
    1b4a:	8f a7       	std	Y+47, r24	; 0x2f
    1b4c:	0f c0       	rjmp	.+30     	; 0x1b6c <LCD_sendCommand+0xde>
    1b4e:	89 e1       	ldi	r24, 0x19	; 25
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	9e a7       	std	Y+46, r25	; 0x2e
    1b54:	8d a7       	std	Y+45, r24	; 0x2d
    1b56:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b58:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b5a:	01 97       	sbiw	r24, 0x01	; 1
    1b5c:	f1 f7       	brne	.-4      	; 0x1b5a <LCD_sendCommand+0xcc>
    1b5e:	9e a7       	std	Y+46, r25	; 0x2e
    1b60:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b62:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b64:	98 a9       	ldd	r25, Y+48	; 0x30
    1b66:	01 97       	sbiw	r24, 0x01	; 1
    1b68:	98 ab       	std	Y+48, r25	; 0x30
    1b6a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b6c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b6e:	98 a9       	ldd	r25, Y+48	; 0x30
    1b70:	00 97       	sbiw	r24, 0x00	; 0
    1b72:	69 f7       	brne	.-38     	; 0x1b4e <LCD_sendCommand+0xc0>
    1b74:	14 c0       	rjmp	.+40     	; 0x1b9e <LCD_sendCommand+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b76:	69 a9       	ldd	r22, Y+49	; 0x31
    1b78:	7a a9       	ldd	r23, Y+50	; 0x32
    1b7a:	8b a9       	ldd	r24, Y+51	; 0x33
    1b7c:	9c a9       	ldd	r25, Y+52	; 0x34
    1b7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	98 ab       	std	Y+48, r25	; 0x30
    1b88:	8f a7       	std	Y+47, r24	; 0x2f
    1b8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b8c:	98 a9       	ldd	r25, Y+48	; 0x30
    1b8e:	9c a7       	std	Y+44, r25	; 0x2c
    1b90:	8b a7       	std	Y+43, r24	; 0x2b
    1b92:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b94:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b96:	01 97       	sbiw	r24, 0x01	; 1
    1b98:	f1 f7       	brne	.-4      	; 0x1b96 <LCD_sendCommand+0x108>
    1b9a:	9c a7       	std	Y+44, r25	; 0x2c
    1b9c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
    1ba0:	67 e0       	ldi	r22, 0x07	; 7
    1ba2:	41 e0       	ldi	r20, 0x01	; 1
    1ba4:	0e 94 da 09 	call	0x13b4	; 0x13b4 <GPIO_writePin>
    1ba8:	80 e0       	ldi	r24, 0x00	; 0
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	a0 e8       	ldi	r26, 0x80	; 128
    1bae:	bf e3       	ldi	r27, 0x3F	; 63
    1bb0:	8f a3       	std	Y+39, r24	; 0x27
    1bb2:	98 a7       	std	Y+40, r25	; 0x28
    1bb4:	a9 a7       	std	Y+41, r26	; 0x29
    1bb6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb8:	6f a1       	ldd	r22, Y+39	; 0x27
    1bba:	78 a5       	ldd	r23, Y+40	; 0x28
    1bbc:	89 a5       	ldd	r24, Y+41	; 0x29
    1bbe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	4a e7       	ldi	r20, 0x7A	; 122
    1bc6:	53 e4       	ldi	r21, 0x43	; 67
    1bc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	8b a3       	std	Y+35, r24	; 0x23
    1bd2:	9c a3       	std	Y+36, r25	; 0x24
    1bd4:	ad a3       	std	Y+37, r26	; 0x25
    1bd6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bd8:	6b a1       	ldd	r22, Y+35	; 0x23
    1bda:	7c a1       	ldd	r23, Y+36	; 0x24
    1bdc:	8d a1       	ldd	r24, Y+37	; 0x25
    1bde:	9e a1       	ldd	r25, Y+38	; 0x26
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	40 e8       	ldi	r20, 0x80	; 128
    1be6:	5f e3       	ldi	r21, 0x3F	; 63
    1be8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bec:	88 23       	and	r24, r24
    1bee:	2c f4       	brge	.+10     	; 0x1bfa <LCD_sendCommand+0x16c>
		__ticks = 1;
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	9a a3       	std	Y+34, r25	; 0x22
    1bf6:	89 a3       	std	Y+33, r24	; 0x21
    1bf8:	3f c0       	rjmp	.+126    	; 0x1c78 <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    1bfa:	6b a1       	ldd	r22, Y+35	; 0x23
    1bfc:	7c a1       	ldd	r23, Y+36	; 0x24
    1bfe:	8d a1       	ldd	r24, Y+37	; 0x25
    1c00:	9e a1       	ldd	r25, Y+38	; 0x26
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	3f ef       	ldi	r19, 0xFF	; 255
    1c06:	4f e7       	ldi	r20, 0x7F	; 127
    1c08:	57 e4       	ldi	r21, 0x47	; 71
    1c0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c0e:	18 16       	cp	r1, r24
    1c10:	4c f5       	brge	.+82     	; 0x1c64 <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c12:	6f a1       	ldd	r22, Y+39	; 0x27
    1c14:	78 a5       	ldd	r23, Y+40	; 0x28
    1c16:	89 a5       	ldd	r24, Y+41	; 0x29
    1c18:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c1a:	20 e0       	ldi	r18, 0x00	; 0
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	40 e2       	ldi	r20, 0x20	; 32
    1c20:	51 e4       	ldi	r21, 0x41	; 65
    1c22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c26:	dc 01       	movw	r26, r24
    1c28:	cb 01       	movw	r24, r22
    1c2a:	bc 01       	movw	r22, r24
    1c2c:	cd 01       	movw	r24, r26
    1c2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	9a a3       	std	Y+34, r25	; 0x22
    1c38:	89 a3       	std	Y+33, r24	; 0x21
    1c3a:	0f c0       	rjmp	.+30     	; 0x1c5a <LCD_sendCommand+0x1cc>
    1c3c:	89 e1       	ldi	r24, 0x19	; 25
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	98 a3       	std	Y+32, r25	; 0x20
    1c42:	8f 8f       	std	Y+31, r24	; 0x1f
    1c44:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c46:	98 a1       	ldd	r25, Y+32	; 0x20
    1c48:	01 97       	sbiw	r24, 0x01	; 1
    1c4a:	f1 f7       	brne	.-4      	; 0x1c48 <LCD_sendCommand+0x1ba>
    1c4c:	98 a3       	std	Y+32, r25	; 0x20
    1c4e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c50:	89 a1       	ldd	r24, Y+33	; 0x21
    1c52:	9a a1       	ldd	r25, Y+34	; 0x22
    1c54:	01 97       	sbiw	r24, 0x01	; 1
    1c56:	9a a3       	std	Y+34, r25	; 0x22
    1c58:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c5a:	89 a1       	ldd	r24, Y+33	; 0x21
    1c5c:	9a a1       	ldd	r25, Y+34	; 0x22
    1c5e:	00 97       	sbiw	r24, 0x00	; 0
    1c60:	69 f7       	brne	.-38     	; 0x1c3c <LCD_sendCommand+0x1ae>
    1c62:	14 c0       	rjmp	.+40     	; 0x1c8c <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c64:	6b a1       	ldd	r22, Y+35	; 0x23
    1c66:	7c a1       	ldd	r23, Y+36	; 0x24
    1c68:	8d a1       	ldd	r24, Y+37	; 0x25
    1c6a:	9e a1       	ldd	r25, Y+38	; 0x26
    1c6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	9a a3       	std	Y+34, r25	; 0x22
    1c76:	89 a3       	std	Y+33, r24	; 0x21
    1c78:	89 a1       	ldd	r24, Y+33	; 0x21
    1c7a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c7c:	9e 8f       	std	Y+30, r25	; 0x1e
    1c7e:	8d 8f       	std	Y+29, r24	; 0x1d
    1c80:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c82:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c84:	01 97       	sbiw	r24, 0x01	; 1
    1c86:	f1 f7       	brne	.-4      	; 0x1c84 <LCD_sendCommand+0x1f6>
    1c88:	9e 8f       	std	Y+30, r25	; 0x1e
    1c8a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	6a ad       	ldd	r22, Y+58	; 0x3a
    1c90:	0e 94 a4 0b 	call	0x1748	; 0x1748 <GPIO_writePort>
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	a0 e8       	ldi	r26, 0x80	; 128
    1c9a:	bf e3       	ldi	r27, 0x3F	; 63
    1c9c:	89 8f       	std	Y+25, r24	; 0x19
    1c9e:	9a 8f       	std	Y+26, r25	; 0x1a
    1ca0:	ab 8f       	std	Y+27, r26	; 0x1b
    1ca2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca4:	69 8d       	ldd	r22, Y+25	; 0x19
    1ca6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ca8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1caa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	4a e7       	ldi	r20, 0x7A	; 122
    1cb2:	53 e4       	ldi	r21, 0x43	; 67
    1cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	8d 8b       	std	Y+21, r24	; 0x15
    1cbe:	9e 8b       	std	Y+22, r25	; 0x16
    1cc0:	af 8b       	std	Y+23, r26	; 0x17
    1cc2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cc4:	6d 89       	ldd	r22, Y+21	; 0x15
    1cc6:	7e 89       	ldd	r23, Y+22	; 0x16
    1cc8:	8f 89       	ldd	r24, Y+23	; 0x17
    1cca:	98 8d       	ldd	r25, Y+24	; 0x18
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	40 e8       	ldi	r20, 0x80	; 128
    1cd2:	5f e3       	ldi	r21, 0x3F	; 63
    1cd4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cd8:	88 23       	and	r24, r24
    1cda:	2c f4       	brge	.+10     	; 0x1ce6 <LCD_sendCommand+0x258>
		__ticks = 1;
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	9c 8b       	std	Y+20, r25	; 0x14
    1ce2:	8b 8b       	std	Y+19, r24	; 0x13
    1ce4:	3f c0       	rjmp	.+126    	; 0x1d64 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1ce6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ce8:	7e 89       	ldd	r23, Y+22	; 0x16
    1cea:	8f 89       	ldd	r24, Y+23	; 0x17
    1cec:	98 8d       	ldd	r25, Y+24	; 0x18
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	3f ef       	ldi	r19, 0xFF	; 255
    1cf2:	4f e7       	ldi	r20, 0x7F	; 127
    1cf4:	57 e4       	ldi	r21, 0x47	; 71
    1cf6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cfa:	18 16       	cp	r1, r24
    1cfc:	4c f5       	brge	.+82     	; 0x1d50 <LCD_sendCommand+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cfe:	69 8d       	ldd	r22, Y+25	; 0x19
    1d00:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d04:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	40 e2       	ldi	r20, 0x20	; 32
    1d0c:	51 e4       	ldi	r21, 0x41	; 65
    1d0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d12:	dc 01       	movw	r26, r24
    1d14:	cb 01       	movw	r24, r22
    1d16:	bc 01       	movw	r22, r24
    1d18:	cd 01       	movw	r24, r26
    1d1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	9c 8b       	std	Y+20, r25	; 0x14
    1d24:	8b 8b       	std	Y+19, r24	; 0x13
    1d26:	0f c0       	rjmp	.+30     	; 0x1d46 <LCD_sendCommand+0x2b8>
    1d28:	89 e1       	ldi	r24, 0x19	; 25
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	9a 8b       	std	Y+18, r25	; 0x12
    1d2e:	89 8b       	std	Y+17, r24	; 0x11
    1d30:	89 89       	ldd	r24, Y+17	; 0x11
    1d32:	9a 89       	ldd	r25, Y+18	; 0x12
    1d34:	01 97       	sbiw	r24, 0x01	; 1
    1d36:	f1 f7       	brne	.-4      	; 0x1d34 <LCD_sendCommand+0x2a6>
    1d38:	9a 8b       	std	Y+18, r25	; 0x12
    1d3a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d3c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d3e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d40:	01 97       	sbiw	r24, 0x01	; 1
    1d42:	9c 8b       	std	Y+20, r25	; 0x14
    1d44:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d46:	8b 89       	ldd	r24, Y+19	; 0x13
    1d48:	9c 89       	ldd	r25, Y+20	; 0x14
    1d4a:	00 97       	sbiw	r24, 0x00	; 0
    1d4c:	69 f7       	brne	.-38     	; 0x1d28 <LCD_sendCommand+0x29a>
    1d4e:	14 c0       	rjmp	.+40     	; 0x1d78 <LCD_sendCommand+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d50:	6d 89       	ldd	r22, Y+21	; 0x15
    1d52:	7e 89       	ldd	r23, Y+22	; 0x16
    1d54:	8f 89       	ldd	r24, Y+23	; 0x17
    1d56:	98 8d       	ldd	r25, Y+24	; 0x18
    1d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	9c 8b       	std	Y+20, r25	; 0x14
    1d62:	8b 8b       	std	Y+19, r24	; 0x13
    1d64:	8b 89       	ldd	r24, Y+19	; 0x13
    1d66:	9c 89       	ldd	r25, Y+20	; 0x14
    1d68:	98 8b       	std	Y+16, r25	; 0x10
    1d6a:	8f 87       	std	Y+15, r24	; 0x0f
    1d6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d6e:	98 89       	ldd	r25, Y+16	; 0x10
    1d70:	01 97       	sbiw	r24, 0x01	; 1
    1d72:	f1 f7       	brne	.-4      	; 0x1d70 <LCD_sendCommand+0x2e2>
    1d74:	98 8b       	std	Y+16, r25	; 0x10
    1d76:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1d78:	80 e0       	ldi	r24, 0x00	; 0
    1d7a:	67 e0       	ldi	r22, 0x07	; 7
    1d7c:	40 e0       	ldi	r20, 0x00	; 0
    1d7e:	0e 94 da 09 	call	0x13b4	; 0x13b4 <GPIO_writePin>
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	a0 e8       	ldi	r26, 0x80	; 128
    1d88:	bf e3       	ldi	r27, 0x3F	; 63
    1d8a:	8b 87       	std	Y+11, r24	; 0x0b
    1d8c:	9c 87       	std	Y+12, r25	; 0x0c
    1d8e:	ad 87       	std	Y+13, r26	; 0x0d
    1d90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d92:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d94:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d96:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d98:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	4a e7       	ldi	r20, 0x7A	; 122
    1da0:	53 e4       	ldi	r21, 0x43	; 67
    1da2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	8f 83       	std	Y+7, r24	; 0x07
    1dac:	98 87       	std	Y+8, r25	; 0x08
    1dae:	a9 87       	std	Y+9, r26	; 0x09
    1db0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1db2:	6f 81       	ldd	r22, Y+7	; 0x07
    1db4:	78 85       	ldd	r23, Y+8	; 0x08
    1db6:	89 85       	ldd	r24, Y+9	; 0x09
    1db8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	40 e8       	ldi	r20, 0x80	; 128
    1dc0:	5f e3       	ldi	r21, 0x3F	; 63
    1dc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dc6:	88 23       	and	r24, r24
    1dc8:	2c f4       	brge	.+10     	; 0x1dd4 <LCD_sendCommand+0x346>
		__ticks = 1;
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	9e 83       	std	Y+6, r25	; 0x06
    1dd0:	8d 83       	std	Y+5, r24	; 0x05
    1dd2:	3f c0       	rjmp	.+126    	; 0x1e52 <LCD_sendCommand+0x3c4>
	else if (__tmp > 65535)
    1dd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd6:	78 85       	ldd	r23, Y+8	; 0x08
    1dd8:	89 85       	ldd	r24, Y+9	; 0x09
    1dda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	3f ef       	ldi	r19, 0xFF	; 255
    1de0:	4f e7       	ldi	r20, 0x7F	; 127
    1de2:	57 e4       	ldi	r21, 0x47	; 71
    1de4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1de8:	18 16       	cp	r1, r24
    1dea:	4c f5       	brge	.+82     	; 0x1e3e <LCD_sendCommand+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dec:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dee:	7c 85       	ldd	r23, Y+12	; 0x0c
    1df0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1df2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	40 e2       	ldi	r20, 0x20	; 32
    1dfa:	51 e4       	ldi	r21, 0x41	; 65
    1dfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e00:	dc 01       	movw	r26, r24
    1e02:	cb 01       	movw	r24, r22
    1e04:	bc 01       	movw	r22, r24
    1e06:	cd 01       	movw	r24, r26
    1e08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	cb 01       	movw	r24, r22
    1e10:	9e 83       	std	Y+6, r25	; 0x06
    1e12:	8d 83       	std	Y+5, r24	; 0x05
    1e14:	0f c0       	rjmp	.+30     	; 0x1e34 <LCD_sendCommand+0x3a6>
    1e16:	89 e1       	ldi	r24, 0x19	; 25
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	9c 83       	std	Y+4, r25	; 0x04
    1e1c:	8b 83       	std	Y+3, r24	; 0x03
    1e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e20:	9c 81       	ldd	r25, Y+4	; 0x04
    1e22:	01 97       	sbiw	r24, 0x01	; 1
    1e24:	f1 f7       	brne	.-4      	; 0x1e22 <LCD_sendCommand+0x394>
    1e26:	9c 83       	std	Y+4, r25	; 0x04
    1e28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e2e:	01 97       	sbiw	r24, 0x01	; 1
    1e30:	9e 83       	std	Y+6, r25	; 0x06
    1e32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e34:	8d 81       	ldd	r24, Y+5	; 0x05
    1e36:	9e 81       	ldd	r25, Y+6	; 0x06
    1e38:	00 97       	sbiw	r24, 0x00	; 0
    1e3a:	69 f7       	brne	.-38     	; 0x1e16 <LCD_sendCommand+0x388>
    1e3c:	14 c0       	rjmp	.+40     	; 0x1e66 <LCD_sendCommand+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e40:	78 85       	ldd	r23, Y+8	; 0x08
    1e42:	89 85       	ldd	r24, Y+9	; 0x09
    1e44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	9e 83       	std	Y+6, r25	; 0x06
    1e50:	8d 83       	std	Y+5, r24	; 0x05
    1e52:	8d 81       	ldd	r24, Y+5	; 0x05
    1e54:	9e 81       	ldd	r25, Y+6	; 0x06
    1e56:	9a 83       	std	Y+2, r25	; 0x02
    1e58:	89 83       	std	Y+1, r24	; 0x01
    1e5a:	89 81       	ldd	r24, Y+1	; 0x01
    1e5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e5e:	01 97       	sbiw	r24, 0x01	; 1
    1e60:	f1 f7       	brne	.-4      	; 0x1e5e <LCD_sendCommand+0x3d0>
    1e62:	9a 83       	std	Y+2, r25	; 0x02
    1e64:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1e66:	ea 96       	adiw	r28, 0x3a	; 58
    1e68:	0f b6       	in	r0, 0x3f	; 63
    1e6a:	f8 94       	cli
    1e6c:	de bf       	out	0x3e, r29	; 62
    1e6e:	0f be       	out	0x3f, r0	; 63
    1e70:	cd bf       	out	0x3d, r28	; 61
    1e72:	cf 91       	pop	r28
    1e74:	df 91       	pop	r29
    1e76:	08 95       	ret

00001e78 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1e78:	df 93       	push	r29
    1e7a:	cf 93       	push	r28
    1e7c:	cd b7       	in	r28, 0x3d	; 61
    1e7e:	de b7       	in	r29, 0x3e	; 62
    1e80:	ea 97       	sbiw	r28, 0x3a	; 58
    1e82:	0f b6       	in	r0, 0x3f	; 63
    1e84:	f8 94       	cli
    1e86:	de bf       	out	0x3e, r29	; 62
    1e88:	0f be       	out	0x3f, r0	; 63
    1e8a:	cd bf       	out	0x3d, r28	; 61
    1e8c:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    1e8e:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1e90:	80 e0       	ldi	r24, 0x00	; 0
    1e92:	65 e0       	ldi	r22, 0x05	; 5
    1e94:	41 e0       	ldi	r20, 0x01	; 1
    1e96:	0e 94 da 09 	call	0x13b4	; 0x13b4 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1e9a:	80 e0       	ldi	r24, 0x00	; 0
    1e9c:	66 e0       	ldi	r22, 0x06	; 6
    1e9e:	40 e0       	ldi	r20, 0x00	; 0
    1ea0:	0e 94 da 09 	call	0x13b4	; 0x13b4 <GPIO_writePin>
    1ea4:	80 e0       	ldi	r24, 0x00	; 0
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	a0 e8       	ldi	r26, 0x80	; 128
    1eaa:	bf e3       	ldi	r27, 0x3F	; 63
    1eac:	8d ab       	std	Y+53, r24	; 0x35
    1eae:	9e ab       	std	Y+54, r25	; 0x36
    1eb0:	af ab       	std	Y+55, r26	; 0x37
    1eb2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb4:	6d a9       	ldd	r22, Y+53	; 0x35
    1eb6:	7e a9       	ldd	r23, Y+54	; 0x36
    1eb8:	8f a9       	ldd	r24, Y+55	; 0x37
    1eba:	98 ad       	ldd	r25, Y+56	; 0x38
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	4a e7       	ldi	r20, 0x7A	; 122
    1ec2:	53 e4       	ldi	r21, 0x43	; 67
    1ec4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec8:	dc 01       	movw	r26, r24
    1eca:	cb 01       	movw	r24, r22
    1ecc:	89 ab       	std	Y+49, r24	; 0x31
    1ece:	9a ab       	std	Y+50, r25	; 0x32
    1ed0:	ab ab       	std	Y+51, r26	; 0x33
    1ed2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ed4:	69 a9       	ldd	r22, Y+49	; 0x31
    1ed6:	7a a9       	ldd	r23, Y+50	; 0x32
    1ed8:	8b a9       	ldd	r24, Y+51	; 0x33
    1eda:	9c a9       	ldd	r25, Y+52	; 0x34
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	40 e8       	ldi	r20, 0x80	; 128
    1ee2:	5f e3       	ldi	r21, 0x3F	; 63
    1ee4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ee8:	88 23       	and	r24, r24
    1eea:	2c f4       	brge	.+10     	; 0x1ef6 <LCD_displayCharacter+0x7e>
		__ticks = 1;
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	98 ab       	std	Y+48, r25	; 0x30
    1ef2:	8f a7       	std	Y+47, r24	; 0x2f
    1ef4:	3f c0       	rjmp	.+126    	; 0x1f74 <LCD_displayCharacter+0xfc>
	else if (__tmp > 65535)
    1ef6:	69 a9       	ldd	r22, Y+49	; 0x31
    1ef8:	7a a9       	ldd	r23, Y+50	; 0x32
    1efa:	8b a9       	ldd	r24, Y+51	; 0x33
    1efc:	9c a9       	ldd	r25, Y+52	; 0x34
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	3f ef       	ldi	r19, 0xFF	; 255
    1f02:	4f e7       	ldi	r20, 0x7F	; 127
    1f04:	57 e4       	ldi	r21, 0x47	; 71
    1f06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f0a:	18 16       	cp	r1, r24
    1f0c:	4c f5       	brge	.+82     	; 0x1f60 <LCD_displayCharacter+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f0e:	6d a9       	ldd	r22, Y+53	; 0x35
    1f10:	7e a9       	ldd	r23, Y+54	; 0x36
    1f12:	8f a9       	ldd	r24, Y+55	; 0x37
    1f14:	98 ad       	ldd	r25, Y+56	; 0x38
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	40 e2       	ldi	r20, 0x20	; 32
    1f1c:	51 e4       	ldi	r21, 0x41	; 65
    1f1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	bc 01       	movw	r22, r24
    1f28:	cd 01       	movw	r24, r26
    1f2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2e:	dc 01       	movw	r26, r24
    1f30:	cb 01       	movw	r24, r22
    1f32:	98 ab       	std	Y+48, r25	; 0x30
    1f34:	8f a7       	std	Y+47, r24	; 0x2f
    1f36:	0f c0       	rjmp	.+30     	; 0x1f56 <LCD_displayCharacter+0xde>
    1f38:	89 e1       	ldi	r24, 0x19	; 25
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	9e a7       	std	Y+46, r25	; 0x2e
    1f3e:	8d a7       	std	Y+45, r24	; 0x2d
    1f40:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f42:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f44:	01 97       	sbiw	r24, 0x01	; 1
    1f46:	f1 f7       	brne	.-4      	; 0x1f44 <LCD_displayCharacter+0xcc>
    1f48:	9e a7       	std	Y+46, r25	; 0x2e
    1f4a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f4e:	98 a9       	ldd	r25, Y+48	; 0x30
    1f50:	01 97       	sbiw	r24, 0x01	; 1
    1f52:	98 ab       	std	Y+48, r25	; 0x30
    1f54:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f56:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f58:	98 a9       	ldd	r25, Y+48	; 0x30
    1f5a:	00 97       	sbiw	r24, 0x00	; 0
    1f5c:	69 f7       	brne	.-38     	; 0x1f38 <LCD_displayCharacter+0xc0>
    1f5e:	14 c0       	rjmp	.+40     	; 0x1f88 <LCD_displayCharacter+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f60:	69 a9       	ldd	r22, Y+49	; 0x31
    1f62:	7a a9       	ldd	r23, Y+50	; 0x32
    1f64:	8b a9       	ldd	r24, Y+51	; 0x33
    1f66:	9c a9       	ldd	r25, Y+52	; 0x34
    1f68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f6c:	dc 01       	movw	r26, r24
    1f6e:	cb 01       	movw	r24, r22
    1f70:	98 ab       	std	Y+48, r25	; 0x30
    1f72:	8f a7       	std	Y+47, r24	; 0x2f
    1f74:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f76:	98 a9       	ldd	r25, Y+48	; 0x30
    1f78:	9c a7       	std	Y+44, r25	; 0x2c
    1f7a:	8b a7       	std	Y+43, r24	; 0x2b
    1f7c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f7e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f80:	01 97       	sbiw	r24, 0x01	; 1
    1f82:	f1 f7       	brne	.-4      	; 0x1f80 <LCD_displayCharacter+0x108>
    1f84:	9c a7       	std	Y+44, r25	; 0x2c
    1f86:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1f88:	80 e0       	ldi	r24, 0x00	; 0
    1f8a:	67 e0       	ldi	r22, 0x07	; 7
    1f8c:	41 e0       	ldi	r20, 0x01	; 1
    1f8e:	0e 94 da 09 	call	0x13b4	; 0x13b4 <GPIO_writePin>
    1f92:	80 e0       	ldi	r24, 0x00	; 0
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	a0 e8       	ldi	r26, 0x80	; 128
    1f98:	bf e3       	ldi	r27, 0x3F	; 63
    1f9a:	8f a3       	std	Y+39, r24	; 0x27
    1f9c:	98 a7       	std	Y+40, r25	; 0x28
    1f9e:	a9 a7       	std	Y+41, r26	; 0x29
    1fa0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fa2:	6f a1       	ldd	r22, Y+39	; 0x27
    1fa4:	78 a5       	ldd	r23, Y+40	; 0x28
    1fa6:	89 a5       	ldd	r24, Y+41	; 0x29
    1fa8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	4a e7       	ldi	r20, 0x7A	; 122
    1fb0:	53 e4       	ldi	r21, 0x43	; 67
    1fb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb6:	dc 01       	movw	r26, r24
    1fb8:	cb 01       	movw	r24, r22
    1fba:	8b a3       	std	Y+35, r24	; 0x23
    1fbc:	9c a3       	std	Y+36, r25	; 0x24
    1fbe:	ad a3       	std	Y+37, r26	; 0x25
    1fc0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fc2:	6b a1       	ldd	r22, Y+35	; 0x23
    1fc4:	7c a1       	ldd	r23, Y+36	; 0x24
    1fc6:	8d a1       	ldd	r24, Y+37	; 0x25
    1fc8:	9e a1       	ldd	r25, Y+38	; 0x26
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	40 e8       	ldi	r20, 0x80	; 128
    1fd0:	5f e3       	ldi	r21, 0x3F	; 63
    1fd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fd6:	88 23       	and	r24, r24
    1fd8:	2c f4       	brge	.+10     	; 0x1fe4 <LCD_displayCharacter+0x16c>
		__ticks = 1;
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	9a a3       	std	Y+34, r25	; 0x22
    1fe0:	89 a3       	std	Y+33, r24	; 0x21
    1fe2:	3f c0       	rjmp	.+126    	; 0x2062 <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    1fe4:	6b a1       	ldd	r22, Y+35	; 0x23
    1fe6:	7c a1       	ldd	r23, Y+36	; 0x24
    1fe8:	8d a1       	ldd	r24, Y+37	; 0x25
    1fea:	9e a1       	ldd	r25, Y+38	; 0x26
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	3f ef       	ldi	r19, 0xFF	; 255
    1ff0:	4f e7       	ldi	r20, 0x7F	; 127
    1ff2:	57 e4       	ldi	r21, 0x47	; 71
    1ff4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ff8:	18 16       	cp	r1, r24
    1ffa:	4c f5       	brge	.+82     	; 0x204e <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ffc:	6f a1       	ldd	r22, Y+39	; 0x27
    1ffe:	78 a5       	ldd	r23, Y+40	; 0x28
    2000:	89 a5       	ldd	r24, Y+41	; 0x29
    2002:	9a a5       	ldd	r25, Y+42	; 0x2a
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	40 e2       	ldi	r20, 0x20	; 32
    200a:	51 e4       	ldi	r21, 0x41	; 65
    200c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2010:	dc 01       	movw	r26, r24
    2012:	cb 01       	movw	r24, r22
    2014:	bc 01       	movw	r22, r24
    2016:	cd 01       	movw	r24, r26
    2018:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	9a a3       	std	Y+34, r25	; 0x22
    2022:	89 a3       	std	Y+33, r24	; 0x21
    2024:	0f c0       	rjmp	.+30     	; 0x2044 <LCD_displayCharacter+0x1cc>
    2026:	89 e1       	ldi	r24, 0x19	; 25
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	98 a3       	std	Y+32, r25	; 0x20
    202c:	8f 8f       	std	Y+31, r24	; 0x1f
    202e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2030:	98 a1       	ldd	r25, Y+32	; 0x20
    2032:	01 97       	sbiw	r24, 0x01	; 1
    2034:	f1 f7       	brne	.-4      	; 0x2032 <LCD_displayCharacter+0x1ba>
    2036:	98 a3       	std	Y+32, r25	; 0x20
    2038:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    203a:	89 a1       	ldd	r24, Y+33	; 0x21
    203c:	9a a1       	ldd	r25, Y+34	; 0x22
    203e:	01 97       	sbiw	r24, 0x01	; 1
    2040:	9a a3       	std	Y+34, r25	; 0x22
    2042:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2044:	89 a1       	ldd	r24, Y+33	; 0x21
    2046:	9a a1       	ldd	r25, Y+34	; 0x22
    2048:	00 97       	sbiw	r24, 0x00	; 0
    204a:	69 f7       	brne	.-38     	; 0x2026 <LCD_displayCharacter+0x1ae>
    204c:	14 c0       	rjmp	.+40     	; 0x2076 <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    204e:	6b a1       	ldd	r22, Y+35	; 0x23
    2050:	7c a1       	ldd	r23, Y+36	; 0x24
    2052:	8d a1       	ldd	r24, Y+37	; 0x25
    2054:	9e a1       	ldd	r25, Y+38	; 0x26
    2056:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    205a:	dc 01       	movw	r26, r24
    205c:	cb 01       	movw	r24, r22
    205e:	9a a3       	std	Y+34, r25	; 0x22
    2060:	89 a3       	std	Y+33, r24	; 0x21
    2062:	89 a1       	ldd	r24, Y+33	; 0x21
    2064:	9a a1       	ldd	r25, Y+34	; 0x22
    2066:	9e 8f       	std	Y+30, r25	; 0x1e
    2068:	8d 8f       	std	Y+29, r24	; 0x1d
    206a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    206c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	f1 f7       	brne	.-4      	; 0x206e <LCD_displayCharacter+0x1f6>
    2072:	9e 8f       	std	Y+30, r25	; 0x1e
    2074:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	6a ad       	ldd	r22, Y+58	; 0x3a
    207a:	0e 94 a4 0b 	call	0x1748	; 0x1748 <GPIO_writePort>
    207e:	80 e0       	ldi	r24, 0x00	; 0
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	a0 e8       	ldi	r26, 0x80	; 128
    2084:	bf e3       	ldi	r27, 0x3F	; 63
    2086:	89 8f       	std	Y+25, r24	; 0x19
    2088:	9a 8f       	std	Y+26, r25	; 0x1a
    208a:	ab 8f       	std	Y+27, r26	; 0x1b
    208c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    208e:	69 8d       	ldd	r22, Y+25	; 0x19
    2090:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2092:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2094:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	4a e7       	ldi	r20, 0x7A	; 122
    209c:	53 e4       	ldi	r21, 0x43	; 67
    209e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	8d 8b       	std	Y+21, r24	; 0x15
    20a8:	9e 8b       	std	Y+22, r25	; 0x16
    20aa:	af 8b       	std	Y+23, r26	; 0x17
    20ac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20ae:	6d 89       	ldd	r22, Y+21	; 0x15
    20b0:	7e 89       	ldd	r23, Y+22	; 0x16
    20b2:	8f 89       	ldd	r24, Y+23	; 0x17
    20b4:	98 8d       	ldd	r25, Y+24	; 0x18
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	40 e8       	ldi	r20, 0x80	; 128
    20bc:	5f e3       	ldi	r21, 0x3F	; 63
    20be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20c2:	88 23       	and	r24, r24
    20c4:	2c f4       	brge	.+10     	; 0x20d0 <LCD_displayCharacter+0x258>
		__ticks = 1;
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	9c 8b       	std	Y+20, r25	; 0x14
    20cc:	8b 8b       	std	Y+19, r24	; 0x13
    20ce:	3f c0       	rjmp	.+126    	; 0x214e <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    20d0:	6d 89       	ldd	r22, Y+21	; 0x15
    20d2:	7e 89       	ldd	r23, Y+22	; 0x16
    20d4:	8f 89       	ldd	r24, Y+23	; 0x17
    20d6:	98 8d       	ldd	r25, Y+24	; 0x18
    20d8:	20 e0       	ldi	r18, 0x00	; 0
    20da:	3f ef       	ldi	r19, 0xFF	; 255
    20dc:	4f e7       	ldi	r20, 0x7F	; 127
    20de:	57 e4       	ldi	r21, 0x47	; 71
    20e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20e4:	18 16       	cp	r1, r24
    20e6:	4c f5       	brge	.+82     	; 0x213a <LCD_displayCharacter+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20e8:	69 8d       	ldd	r22, Y+25	; 0x19
    20ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20f0:	20 e0       	ldi	r18, 0x00	; 0
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	40 e2       	ldi	r20, 0x20	; 32
    20f6:	51 e4       	ldi	r21, 0x41	; 65
    20f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20fc:	dc 01       	movw	r26, r24
    20fe:	cb 01       	movw	r24, r22
    2100:	bc 01       	movw	r22, r24
    2102:	cd 01       	movw	r24, r26
    2104:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2108:	dc 01       	movw	r26, r24
    210a:	cb 01       	movw	r24, r22
    210c:	9c 8b       	std	Y+20, r25	; 0x14
    210e:	8b 8b       	std	Y+19, r24	; 0x13
    2110:	0f c0       	rjmp	.+30     	; 0x2130 <LCD_displayCharacter+0x2b8>
    2112:	89 e1       	ldi	r24, 0x19	; 25
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	9a 8b       	std	Y+18, r25	; 0x12
    2118:	89 8b       	std	Y+17, r24	; 0x11
    211a:	89 89       	ldd	r24, Y+17	; 0x11
    211c:	9a 89       	ldd	r25, Y+18	; 0x12
    211e:	01 97       	sbiw	r24, 0x01	; 1
    2120:	f1 f7       	brne	.-4      	; 0x211e <LCD_displayCharacter+0x2a6>
    2122:	9a 8b       	std	Y+18, r25	; 0x12
    2124:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2126:	8b 89       	ldd	r24, Y+19	; 0x13
    2128:	9c 89       	ldd	r25, Y+20	; 0x14
    212a:	01 97       	sbiw	r24, 0x01	; 1
    212c:	9c 8b       	std	Y+20, r25	; 0x14
    212e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2130:	8b 89       	ldd	r24, Y+19	; 0x13
    2132:	9c 89       	ldd	r25, Y+20	; 0x14
    2134:	00 97       	sbiw	r24, 0x00	; 0
    2136:	69 f7       	brne	.-38     	; 0x2112 <LCD_displayCharacter+0x29a>
    2138:	14 c0       	rjmp	.+40     	; 0x2162 <LCD_displayCharacter+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    213a:	6d 89       	ldd	r22, Y+21	; 0x15
    213c:	7e 89       	ldd	r23, Y+22	; 0x16
    213e:	8f 89       	ldd	r24, Y+23	; 0x17
    2140:	98 8d       	ldd	r25, Y+24	; 0x18
    2142:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2146:	dc 01       	movw	r26, r24
    2148:	cb 01       	movw	r24, r22
    214a:	9c 8b       	std	Y+20, r25	; 0x14
    214c:	8b 8b       	std	Y+19, r24	; 0x13
    214e:	8b 89       	ldd	r24, Y+19	; 0x13
    2150:	9c 89       	ldd	r25, Y+20	; 0x14
    2152:	98 8b       	std	Y+16, r25	; 0x10
    2154:	8f 87       	std	Y+15, r24	; 0x0f
    2156:	8f 85       	ldd	r24, Y+15	; 0x0f
    2158:	98 89       	ldd	r25, Y+16	; 0x10
    215a:	01 97       	sbiw	r24, 0x01	; 1
    215c:	f1 f7       	brne	.-4      	; 0x215a <LCD_displayCharacter+0x2e2>
    215e:	98 8b       	std	Y+16, r25	; 0x10
    2160:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2162:	80 e0       	ldi	r24, 0x00	; 0
    2164:	67 e0       	ldi	r22, 0x07	; 7
    2166:	40 e0       	ldi	r20, 0x00	; 0
    2168:	0e 94 da 09 	call	0x13b4	; 0x13b4 <GPIO_writePin>
    216c:	80 e0       	ldi	r24, 0x00	; 0
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	a0 e8       	ldi	r26, 0x80	; 128
    2172:	bf e3       	ldi	r27, 0x3F	; 63
    2174:	8b 87       	std	Y+11, r24	; 0x0b
    2176:	9c 87       	std	Y+12, r25	; 0x0c
    2178:	ad 87       	std	Y+13, r26	; 0x0d
    217a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    217c:	6b 85       	ldd	r22, Y+11	; 0x0b
    217e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2180:	8d 85       	ldd	r24, Y+13	; 0x0d
    2182:	9e 85       	ldd	r25, Y+14	; 0x0e
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	4a e7       	ldi	r20, 0x7A	; 122
    218a:	53 e4       	ldi	r21, 0x43	; 67
    218c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	8f 83       	std	Y+7, r24	; 0x07
    2196:	98 87       	std	Y+8, r25	; 0x08
    2198:	a9 87       	std	Y+9, r26	; 0x09
    219a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    219c:	6f 81       	ldd	r22, Y+7	; 0x07
    219e:	78 85       	ldd	r23, Y+8	; 0x08
    21a0:	89 85       	ldd	r24, Y+9	; 0x09
    21a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	40 e8       	ldi	r20, 0x80	; 128
    21aa:	5f e3       	ldi	r21, 0x3F	; 63
    21ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21b0:	88 23       	and	r24, r24
    21b2:	2c f4       	brge	.+10     	; 0x21be <LCD_displayCharacter+0x346>
		__ticks = 1;
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	9e 83       	std	Y+6, r25	; 0x06
    21ba:	8d 83       	std	Y+5, r24	; 0x05
    21bc:	3f c0       	rjmp	.+126    	; 0x223c <LCD_displayCharacter+0x3c4>
	else if (__tmp > 65535)
    21be:	6f 81       	ldd	r22, Y+7	; 0x07
    21c0:	78 85       	ldd	r23, Y+8	; 0x08
    21c2:	89 85       	ldd	r24, Y+9	; 0x09
    21c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	3f ef       	ldi	r19, 0xFF	; 255
    21ca:	4f e7       	ldi	r20, 0x7F	; 127
    21cc:	57 e4       	ldi	r21, 0x47	; 71
    21ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21d2:	18 16       	cp	r1, r24
    21d4:	4c f5       	brge	.+82     	; 0x2228 <LCD_displayCharacter+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    21d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    21da:	8d 85       	ldd	r24, Y+13	; 0x0d
    21dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    21de:	20 e0       	ldi	r18, 0x00	; 0
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	40 e2       	ldi	r20, 0x20	; 32
    21e4:	51 e4       	ldi	r21, 0x41	; 65
    21e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ea:	dc 01       	movw	r26, r24
    21ec:	cb 01       	movw	r24, r22
    21ee:	bc 01       	movw	r22, r24
    21f0:	cd 01       	movw	r24, r26
    21f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	9e 83       	std	Y+6, r25	; 0x06
    21fc:	8d 83       	std	Y+5, r24	; 0x05
    21fe:	0f c0       	rjmp	.+30     	; 0x221e <LCD_displayCharacter+0x3a6>
    2200:	89 e1       	ldi	r24, 0x19	; 25
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	9c 83       	std	Y+4, r25	; 0x04
    2206:	8b 83       	std	Y+3, r24	; 0x03
    2208:	8b 81       	ldd	r24, Y+3	; 0x03
    220a:	9c 81       	ldd	r25, Y+4	; 0x04
    220c:	01 97       	sbiw	r24, 0x01	; 1
    220e:	f1 f7       	brne	.-4      	; 0x220c <LCD_displayCharacter+0x394>
    2210:	9c 83       	std	Y+4, r25	; 0x04
    2212:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2214:	8d 81       	ldd	r24, Y+5	; 0x05
    2216:	9e 81       	ldd	r25, Y+6	; 0x06
    2218:	01 97       	sbiw	r24, 0x01	; 1
    221a:	9e 83       	std	Y+6, r25	; 0x06
    221c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    221e:	8d 81       	ldd	r24, Y+5	; 0x05
    2220:	9e 81       	ldd	r25, Y+6	; 0x06
    2222:	00 97       	sbiw	r24, 0x00	; 0
    2224:	69 f7       	brne	.-38     	; 0x2200 <LCD_displayCharacter+0x388>
    2226:	14 c0       	rjmp	.+40     	; 0x2250 <LCD_displayCharacter+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2228:	6f 81       	ldd	r22, Y+7	; 0x07
    222a:	78 85       	ldd	r23, Y+8	; 0x08
    222c:	89 85       	ldd	r24, Y+9	; 0x09
    222e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2230:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2234:	dc 01       	movw	r26, r24
    2236:	cb 01       	movw	r24, r22
    2238:	9e 83       	std	Y+6, r25	; 0x06
    223a:	8d 83       	std	Y+5, r24	; 0x05
    223c:	8d 81       	ldd	r24, Y+5	; 0x05
    223e:	9e 81       	ldd	r25, Y+6	; 0x06
    2240:	9a 83       	std	Y+2, r25	; 0x02
    2242:	89 83       	std	Y+1, r24	; 0x01
    2244:	89 81       	ldd	r24, Y+1	; 0x01
    2246:	9a 81       	ldd	r25, Y+2	; 0x02
    2248:	01 97       	sbiw	r24, 0x01	; 1
    224a:	f1 f7       	brne	.-4      	; 0x2248 <LCD_displayCharacter+0x3d0>
    224c:	9a 83       	std	Y+2, r25	; 0x02
    224e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2250:	ea 96       	adiw	r28, 0x3a	; 58
    2252:	0f b6       	in	r0, 0x3f	; 63
    2254:	f8 94       	cli
    2256:	de bf       	out	0x3e, r29	; 62
    2258:	0f be       	out	0x3f, r0	; 63
    225a:	cd bf       	out	0x3d, r28	; 61
    225c:	cf 91       	pop	r28
    225e:	df 91       	pop	r29
    2260:	08 95       	ret

00002262 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2262:	df 93       	push	r29
    2264:	cf 93       	push	r28
    2266:	00 d0       	rcall	.+0      	; 0x2268 <LCD_displayString+0x6>
    2268:	0f 92       	push	r0
    226a:	cd b7       	in	r28, 0x3d	; 61
    226c:	de b7       	in	r29, 0x3e	; 62
    226e:	9b 83       	std	Y+3, r25	; 0x03
    2270:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2272:	19 82       	std	Y+1, r1	; 0x01
    2274:	0e c0       	rjmp	.+28     	; 0x2292 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2276:	89 81       	ldd	r24, Y+1	; 0x01
    2278:	28 2f       	mov	r18, r24
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	8a 81       	ldd	r24, Y+2	; 0x02
    227e:	9b 81       	ldd	r25, Y+3	; 0x03
    2280:	fc 01       	movw	r30, r24
    2282:	e2 0f       	add	r30, r18
    2284:	f3 1f       	adc	r31, r19
    2286:	80 81       	ld	r24, Z
    2288:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <LCD_displayCharacter>
		i++;
    228c:	89 81       	ldd	r24, Y+1	; 0x01
    228e:	8f 5f       	subi	r24, 0xFF	; 255
    2290:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2292:	89 81       	ldd	r24, Y+1	; 0x01
    2294:	28 2f       	mov	r18, r24
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	8a 81       	ldd	r24, Y+2	; 0x02
    229a:	9b 81       	ldd	r25, Y+3	; 0x03
    229c:	fc 01       	movw	r30, r24
    229e:	e2 0f       	add	r30, r18
    22a0:	f3 1f       	adc	r31, r19
    22a2:	80 81       	ld	r24, Z
    22a4:	88 23       	and	r24, r24
    22a6:	39 f7       	brne	.-50     	; 0x2276 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    22a8:	0f 90       	pop	r0
    22aa:	0f 90       	pop	r0
    22ac:	0f 90       	pop	r0
    22ae:	cf 91       	pop	r28
    22b0:	df 91       	pop	r29
    22b2:	08 95       	ret

000022b4 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    22b4:	df 93       	push	r29
    22b6:	cf 93       	push	r28
    22b8:	00 d0       	rcall	.+0      	; 0x22ba <LCD_moveCursor+0x6>
    22ba:	00 d0       	rcall	.+0      	; 0x22bc <LCD_moveCursor+0x8>
    22bc:	0f 92       	push	r0
    22be:	cd b7       	in	r28, 0x3d	; 61
    22c0:	de b7       	in	r29, 0x3e	; 62
    22c2:	8a 83       	std	Y+2, r24	; 0x02
    22c4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    22c6:	8a 81       	ldd	r24, Y+2	; 0x02
    22c8:	28 2f       	mov	r18, r24
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	3d 83       	std	Y+5, r19	; 0x05
    22ce:	2c 83       	std	Y+4, r18	; 0x04
    22d0:	8c 81       	ldd	r24, Y+4	; 0x04
    22d2:	9d 81       	ldd	r25, Y+5	; 0x05
    22d4:	81 30       	cpi	r24, 0x01	; 1
    22d6:	91 05       	cpc	r25, r1
    22d8:	c1 f0       	breq	.+48     	; 0x230a <LCD_moveCursor+0x56>
    22da:	2c 81       	ldd	r18, Y+4	; 0x04
    22dc:	3d 81       	ldd	r19, Y+5	; 0x05
    22de:	22 30       	cpi	r18, 0x02	; 2
    22e0:	31 05       	cpc	r19, r1
    22e2:	2c f4       	brge	.+10     	; 0x22ee <LCD_moveCursor+0x3a>
    22e4:	8c 81       	ldd	r24, Y+4	; 0x04
    22e6:	9d 81       	ldd	r25, Y+5	; 0x05
    22e8:	00 97       	sbiw	r24, 0x00	; 0
    22ea:	61 f0       	breq	.+24     	; 0x2304 <LCD_moveCursor+0x50>
    22ec:	19 c0       	rjmp	.+50     	; 0x2320 <LCD_moveCursor+0x6c>
    22ee:	2c 81       	ldd	r18, Y+4	; 0x04
    22f0:	3d 81       	ldd	r19, Y+5	; 0x05
    22f2:	22 30       	cpi	r18, 0x02	; 2
    22f4:	31 05       	cpc	r19, r1
    22f6:	69 f0       	breq	.+26     	; 0x2312 <LCD_moveCursor+0x5e>
    22f8:	8c 81       	ldd	r24, Y+4	; 0x04
    22fa:	9d 81       	ldd	r25, Y+5	; 0x05
    22fc:	83 30       	cpi	r24, 0x03	; 3
    22fe:	91 05       	cpc	r25, r1
    2300:	61 f0       	breq	.+24     	; 0x231a <LCD_moveCursor+0x66>
    2302:	0e c0       	rjmp	.+28     	; 0x2320 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2304:	8b 81       	ldd	r24, Y+3	; 0x03
    2306:	89 83       	std	Y+1, r24	; 0x01
    2308:	0b c0       	rjmp	.+22     	; 0x2320 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    230a:	8b 81       	ldd	r24, Y+3	; 0x03
    230c:	80 5c       	subi	r24, 0xC0	; 192
    230e:	89 83       	std	Y+1, r24	; 0x01
    2310:	07 c0       	rjmp	.+14     	; 0x2320 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2312:	8b 81       	ldd	r24, Y+3	; 0x03
    2314:	80 5f       	subi	r24, 0xF0	; 240
    2316:	89 83       	std	Y+1, r24	; 0x01
    2318:	03 c0       	rjmp	.+6      	; 0x2320 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    231a:	8b 81       	ldd	r24, Y+3	; 0x03
    231c:	80 5b       	subi	r24, 0xB0	; 176
    231e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2320:	89 81       	ldd	r24, Y+1	; 0x01
    2322:	80 68       	ori	r24, 0x80	; 128
    2324:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <LCD_sendCommand>
}
    2328:	0f 90       	pop	r0
    232a:	0f 90       	pop	r0
    232c:	0f 90       	pop	r0
    232e:	0f 90       	pop	r0
    2330:	0f 90       	pop	r0
    2332:	cf 91       	pop	r28
    2334:	df 91       	pop	r29
    2336:	08 95       	ret

00002338 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2338:	df 93       	push	r29
    233a:	cf 93       	push	r28
    233c:	00 d0       	rcall	.+0      	; 0x233e <LCD_displayStringRowColumn+0x6>
    233e:	00 d0       	rcall	.+0      	; 0x2340 <LCD_displayStringRowColumn+0x8>
    2340:	cd b7       	in	r28, 0x3d	; 61
    2342:	de b7       	in	r29, 0x3e	; 62
    2344:	89 83       	std	Y+1, r24	; 0x01
    2346:	6a 83       	std	Y+2, r22	; 0x02
    2348:	5c 83       	std	Y+4, r21	; 0x04
    234a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    234c:	89 81       	ldd	r24, Y+1	; 0x01
    234e:	6a 81       	ldd	r22, Y+2	; 0x02
    2350:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2354:	8b 81       	ldd	r24, Y+3	; 0x03
    2356:	9c 81       	ldd	r25, Y+4	; 0x04
    2358:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>
}
    235c:	0f 90       	pop	r0
    235e:	0f 90       	pop	r0
    2360:	0f 90       	pop	r0
    2362:	0f 90       	pop	r0
    2364:	cf 91       	pop	r28
    2366:	df 91       	pop	r29
    2368:	08 95       	ret

0000236a <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    236a:	df 93       	push	r29
    236c:	cf 93       	push	r28
    236e:	cd b7       	in	r28, 0x3d	; 61
    2370:	de b7       	in	r29, 0x3e	; 62
    2372:	62 97       	sbiw	r28, 0x12	; 18
    2374:	0f b6       	in	r0, 0x3f	; 63
    2376:	f8 94       	cli
    2378:	de bf       	out	0x3e, r29	; 62
    237a:	0f be       	out	0x3f, r0	; 63
    237c:	cd bf       	out	0x3d, r28	; 61
    237e:	9a 8b       	std	Y+18, r25	; 0x12
    2380:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2382:	89 89       	ldd	r24, Y+17	; 0x11
    2384:	9a 89       	ldd	r25, Y+18	; 0x12
    2386:	9e 01       	movw	r18, r28
    2388:	2f 5f       	subi	r18, 0xFF	; 255
    238a:	3f 4f       	sbci	r19, 0xFF	; 255
    238c:	b9 01       	movw	r22, r18
    238e:	4a e0       	ldi	r20, 0x0A	; 10
    2390:	50 e0       	ldi	r21, 0x00	; 0
    2392:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <itoa>
   LCD_displayString(buff); /* Display the string */
    2396:	ce 01       	movw	r24, r28
    2398:	01 96       	adiw	r24, 0x01	; 1
    239a:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_displayString>
}
    239e:	62 96       	adiw	r28, 0x12	; 18
    23a0:	0f b6       	in	r0, 0x3f	; 63
    23a2:	f8 94       	cli
    23a4:	de bf       	out	0x3e, r29	; 62
    23a6:	0f be       	out	0x3f, r0	; 63
    23a8:	cd bf       	out	0x3d, r28	; 61
    23aa:	cf 91       	pop	r28
    23ac:	df 91       	pop	r29
    23ae:	08 95       	ret

000023b0 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    23b0:	df 93       	push	r29
    23b2:	cf 93       	push	r28
    23b4:	cd b7       	in	r28, 0x3d	; 61
    23b6:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    23b8:	81 e0       	ldi	r24, 0x01	; 1
    23ba:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <LCD_sendCommand>
}
    23be:	cf 91       	pop	r28
    23c0:	df 91       	pop	r29
    23c2:	08 95       	ret

000023c4 <DcMotor_Init>:
#include <avr/io.h>

#include "pwm.h"


void DcMotor_Init(){
    23c4:	df 93       	push	r29
    23c6:	cf 93       	push	r28
    23c8:	cd b7       	in	r28, 0x3d	; 61
    23ca:	de b7       	in	r29, 0x3e	; 62

	/* Set OC0 as output (PD7)
	 * Set direction pins as output */
	GPIO_setupPinDirection(MOTOR_EN_PORT_ID,MOTOR_EN_PIN_ID,PIN_OUTPUT);
    23cc:	82 e0       	ldi	r24, 0x02	; 2
    23ce:	65 e0       	ldi	r22, 0x05	; 5
    23d0:	41 e0       	ldi	r20, 0x01	; 1
    23d2:	0e 94 ef 08 	call	0x11de	; 0x11de <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_PIN1_PORT_ID,MOTOR_PIN1_PIN_ID,PIN_OUTPUT);
    23d6:	82 e0       	ldi	r24, 0x02	; 2
    23d8:	66 e0       	ldi	r22, 0x06	; 6
    23da:	41 e0       	ldi	r20, 0x01	; 1
    23dc:	0e 94 ef 08 	call	0x11de	; 0x11de <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_PIN2_PORT_ID,MOTOR_PIN2_PIN_ID,PIN_OUTPUT);
    23e0:	82 e0       	ldi	r24, 0x02	; 2
    23e2:	67 e0       	ldi	r22, 0x07	; 7
    23e4:	41 e0       	ldi	r20, 0x01	; 1
    23e6:	0e 94 ef 08 	call	0x11de	; 0x11de <GPIO_setupPinDirection>

	/* DC Motor initially OFF */
	GPIO_writePin(MOTOR_EN_PORT_ID,MOTOR_EN_PIN_ID,LOGIC_HIGH);
    23ea:	82 e0       	ldi	r24, 0x02	; 2
    23ec:	65 e0       	ldi	r22, 0x05	; 5
    23ee:	41 e0       	ldi	r20, 0x01	; 1
    23f0:	0e 94 da 09 	call	0x13b4	; 0x13b4 <GPIO_writePin>
	GPIO_writePin(MOTOR_PIN1_PORT_ID,MOTOR_PIN1_PIN_ID,LOGIC_LOW);
    23f4:	82 e0       	ldi	r24, 0x02	; 2
    23f6:	66 e0       	ldi	r22, 0x06	; 6
    23f8:	40 e0       	ldi	r20, 0x00	; 0
    23fa:	0e 94 da 09 	call	0x13b4	; 0x13b4 <GPIO_writePin>
	GPIO_writePin(MOTOR_PIN2_PORT_ID,MOTOR_PIN2_PIN_ID,LOGIC_LOW);
    23fe:	82 e0       	ldi	r24, 0x02	; 2
    2400:	67 e0       	ldi	r22, 0x07	; 7
    2402:	40 e0       	ldi	r20, 0x00	; 0
    2404:	0e 94 da 09 	call	0x13b4	; 0x13b4 <GPIO_writePin>
}
    2408:	cf 91       	pop	r28
    240a:	df 91       	pop	r29
    240c:	08 95       	ret

0000240e <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state, uint8 speed){
    240e:	df 93       	push	r29
    2410:	cf 93       	push	r28
    2412:	00 d0       	rcall	.+0      	; 0x2414 <DcMotor_Rotate+0x6>
    2414:	cd b7       	in	r28, 0x3d	; 61
    2416:	de b7       	in	r29, 0x3e	; 62
    2418:	89 83       	std	Y+1, r24	; 0x01
    241a:	6a 83       	std	Y+2, r22	; 0x02
	/* Write state (OFF, CW, Anti-CW) into motor pins
	 * by writing (0, 1, 2) into two seperate pins
	 * First pin gets first bit value
	 * Second pin gets second bit value shifted to the right
	 */
	GPIO_writePin(MOTOR_PIN1_PORT_ID,MOTOR_PIN1_PIN_ID,((state & 2)>>1));
    241c:	89 81       	ldd	r24, Y+1	; 0x01
    241e:	88 2f       	mov	r24, r24
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	82 70       	andi	r24, 0x02	; 2
    2424:	90 70       	andi	r25, 0x00	; 0
    2426:	95 95       	asr	r25
    2428:	87 95       	ror	r24
    242a:	98 2f       	mov	r25, r24
    242c:	82 e0       	ldi	r24, 0x02	; 2
    242e:	66 e0       	ldi	r22, 0x06	; 6
    2430:	49 2f       	mov	r20, r25
    2432:	0e 94 da 09 	call	0x13b4	; 0x13b4 <GPIO_writePin>
	GPIO_writePin(MOTOR_PIN2_PORT_ID,MOTOR_PIN2_PIN_ID,(state & 1));
    2436:	89 81       	ldd	r24, Y+1	; 0x01
    2438:	98 2f       	mov	r25, r24
    243a:	91 70       	andi	r25, 0x01	; 1
    243c:	82 e0       	ldi	r24, 0x02	; 2
    243e:	67 e0       	ldi	r22, 0x07	; 7
    2440:	49 2f       	mov	r20, r25
    2442:	0e 94 da 09 	call	0x13b4	; 0x13b4 <GPIO_writePin>
	GPIO_writePin(MOTOR_EN_PORT_ID,MOTOR_EN_PIN_ID, 1);
    2446:	82 e0       	ldi	r24, 0x02	; 2
    2448:	65 e0       	ldi	r22, 0x05	; 5
    244a:	41 e0       	ldi	r20, 0x01	; 1
    244c:	0e 94 da 09 	call	0x13b4	; 0x13b4 <GPIO_writePin>
	/* Start Timer0 in PWM Mode */
	//PWM_Timer0_Start(speed);
}
    2450:	0f 90       	pop	r0
    2452:	0f 90       	pop	r0
    2454:	cf 91       	pop	r28
    2456:	df 91       	pop	r29
    2458:	08 95       	ret

0000245a <PWM_Timer0_Start>:
#include "pwm.h"

#include <avr/io.h>
#include "common_macros.h"

void PWM_Timer0_Start(uint8 duty_cycle){
    245a:	df 93       	push	r29
    245c:	cf 93       	push	r28
    245e:	0f 92       	push	r0
    2460:	cd b7       	in	r28, 0x3d	; 61
    2462:	de b7       	in	r29, 0x3e	; 62
    2464:	89 83       	std	Y+1, r24	; 0x01

	/* Setup OC0 as output pin */
	SET_BIT(DDRB,PB3);
    2466:	a7 e3       	ldi	r26, 0x37	; 55
    2468:	b0 e0       	ldi	r27, 0x00	; 0
    246a:	e7 e3       	ldi	r30, 0x37	; 55
    246c:	f0 e0       	ldi	r31, 0x00	; 0
    246e:	80 81       	ld	r24, Z
    2470:	88 60       	ori	r24, 0x08	; 8
    2472:	8c 93       	st	X, r24

	/* Set initial timer value to 0 */
	TCNT0 = 0;
    2474:	e2 e5       	ldi	r30, 0x52	; 82
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	10 82       	st	Z, r1

	/* Fast PWM
	* Non-Inverting mode
	* Prescaler = FCPU/8 (CS01 = 1)           */
	TCCR0 |= (1<<COM01) | (1<<WGM01) | (1<<WGM00) | (1<<CS01);
    247a:	a3 e5       	ldi	r26, 0x53	; 83
    247c:	b0 e0       	ldi	r27, 0x00	; 0
    247e:	e3 e5       	ldi	r30, 0x53	; 83
    2480:	f0 e0       	ldi	r31, 0x00	; 0
    2482:	80 81       	ld	r24, Z
    2484:	8a 66       	ori	r24, 0x6A	; 106
    2486:	8c 93       	st	X, r24

	/* Set OCR0 to required compare value */
	OCR0 = duty_cycle * 255/100;
    2488:	ec e5       	ldi	r30, 0x5C	; 92
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	89 81       	ldd	r24, Y+1	; 0x01
    248e:	48 2f       	mov	r20, r24
    2490:	50 e0       	ldi	r21, 0x00	; 0
    2492:	ca 01       	movw	r24, r20
    2494:	9c 01       	movw	r18, r24
    2496:	22 0f       	add	r18, r18
    2498:	33 1f       	adc	r19, r19
    249a:	c9 01       	movw	r24, r18
    249c:	96 95       	lsr	r25
    249e:	98 2f       	mov	r25, r24
    24a0:	88 27       	eor	r24, r24
    24a2:	97 95       	ror	r25
    24a4:	87 95       	ror	r24
    24a6:	82 1b       	sub	r24, r18
    24a8:	93 0b       	sbc	r25, r19
    24aa:	84 0f       	add	r24, r20
    24ac:	95 1f       	adc	r25, r21
    24ae:	24 e6       	ldi	r18, 0x64	; 100
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	b9 01       	movw	r22, r18
    24b4:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <__divmodhi4>
    24b8:	cb 01       	movw	r24, r22
    24ba:	80 83       	st	Z, r24
}
    24bc:	0f 90       	pop	r0
    24be:	cf 91       	pop	r28
    24c0:	df 91       	pop	r29
    24c2:	08 95       	ret

000024c4 <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    24c4:	1f 92       	push	r1
    24c6:	0f 92       	push	r0
    24c8:	0f b6       	in	r0, 0x3f	; 63
    24ca:	0f 92       	push	r0
    24cc:	11 24       	eor	r1, r1
    24ce:	2f 93       	push	r18
    24d0:	3f 93       	push	r19
    24d2:	4f 93       	push	r20
    24d4:	5f 93       	push	r21
    24d6:	6f 93       	push	r22
    24d8:	7f 93       	push	r23
    24da:	8f 93       	push	r24
    24dc:	9f 93       	push	r25
    24de:	af 93       	push	r26
    24e0:	bf 93       	push	r27
    24e2:	ef 93       	push	r30
    24e4:	ff 93       	push	r31
    24e6:	df 93       	push	r29
    24e8:	cf 93       	push	r28
    24ea:	cd b7       	in	r28, 0x3d	; 61
    24ec:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    24ee:	80 91 80 00 	lds	r24, 0x0080
    24f2:	90 91 81 00 	lds	r25, 0x0081
    24f6:	00 97       	sbiw	r24, 0x00	; 0
    24f8:	29 f0       	breq	.+10     	; 0x2504 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    24fa:	e0 91 80 00 	lds	r30, 0x0080
    24fe:	f0 91 81 00 	lds	r31, 0x0081
    2502:	09 95       	icall
	}
}
    2504:	cf 91       	pop	r28
    2506:	df 91       	pop	r29
    2508:	ff 91       	pop	r31
    250a:	ef 91       	pop	r30
    250c:	bf 91       	pop	r27
    250e:	af 91       	pop	r26
    2510:	9f 91       	pop	r25
    2512:	8f 91       	pop	r24
    2514:	7f 91       	pop	r23
    2516:	6f 91       	pop	r22
    2518:	5f 91       	pop	r21
    251a:	4f 91       	pop	r20
    251c:	3f 91       	pop	r19
    251e:	2f 91       	pop	r18
    2520:	0f 90       	pop	r0
    2522:	0f be       	out	0x3f, r0	; 63
    2524:	0f 90       	pop	r0
    2526:	1f 90       	pop	r1
    2528:	18 95       	reti

0000252a <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    252a:	1f 92       	push	r1
    252c:	0f 92       	push	r0
    252e:	0f b6       	in	r0, 0x3f	; 63
    2530:	0f 92       	push	r0
    2532:	11 24       	eor	r1, r1
    2534:	2f 93       	push	r18
    2536:	3f 93       	push	r19
    2538:	4f 93       	push	r20
    253a:	5f 93       	push	r21
    253c:	6f 93       	push	r22
    253e:	7f 93       	push	r23
    2540:	8f 93       	push	r24
    2542:	9f 93       	push	r25
    2544:	af 93       	push	r26
    2546:	bf 93       	push	r27
    2548:	ef 93       	push	r30
    254a:	ff 93       	push	r31
    254c:	df 93       	push	r29
    254e:	cf 93       	push	r28
    2550:	cd b7       	in	r28, 0x3d	; 61
    2552:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2554:	80 91 80 00 	lds	r24, 0x0080
    2558:	90 91 81 00 	lds	r25, 0x0081
    255c:	00 97       	sbiw	r24, 0x00	; 0
    255e:	29 f0       	breq	.+10     	; 0x256a <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2560:	e0 91 80 00 	lds	r30, 0x0080
    2564:	f0 91 81 00 	lds	r31, 0x0081
    2568:	09 95       	icall
	}
}
    256a:	cf 91       	pop	r28
    256c:	df 91       	pop	r29
    256e:	ff 91       	pop	r31
    2570:	ef 91       	pop	r30
    2572:	bf 91       	pop	r27
    2574:	af 91       	pop	r26
    2576:	9f 91       	pop	r25
    2578:	8f 91       	pop	r24
    257a:	7f 91       	pop	r23
    257c:	6f 91       	pop	r22
    257e:	5f 91       	pop	r21
    2580:	4f 91       	pop	r20
    2582:	3f 91       	pop	r19
    2584:	2f 91       	pop	r18
    2586:	0f 90       	pop	r0
    2588:	0f be       	out	0x3f, r0	; 63
    258a:	0f 90       	pop	r0
    258c:	1f 90       	pop	r1
    258e:	18 95       	reti

00002590 <Timer0_Init>:

void Timer0_Init(Timer_ConfigType *Config_Ptr){
    2590:	df 93       	push	r29
    2592:	cf 93       	push	r28
    2594:	00 d0       	rcall	.+0      	; 0x2596 <Timer0_Init+0x6>
    2596:	cd b7       	in	r28, 0x3d	; 61
    2598:	de b7       	in	r29, 0x3e	; 62
    259a:	9a 83       	std	Y+2, r25	; 0x02
    259c:	89 83       	std	Y+1, r24	; 0x01

	/* Set Initial Timer value */
	TCNT0 = Config_Ptr->Initial_Value;
    259e:	a2 e5       	ldi	r26, 0x52	; 82
    25a0:	b0 e0       	ldi	r27, 0x00	; 0
    25a2:	e9 81       	ldd	r30, Y+1	; 0x01
    25a4:	fa 81       	ldd	r31, Y+2	; 0x02
    25a6:	81 81       	ldd	r24, Z+1	; 0x01
    25a8:	92 81       	ldd	r25, Z+2	; 0x02
    25aa:	8c 93       	st	X, r24

	/* Set Compare Value for CTC mode */
	OCR0 = Config_Ptr->Compare_Value;
    25ac:	ac e5       	ldi	r26, 0x5C	; 92
    25ae:	b0 e0       	ldi	r27, 0x00	; 0
    25b0:	e9 81       	ldd	r30, Y+1	; 0x01
    25b2:	fa 81       	ldd	r31, Y+2	; 0x02
    25b4:	83 81       	ldd	r24, Z+3	; 0x03
    25b6:	94 81       	ldd	r25, Z+4	; 0x04
    25b8:	8c 93       	st	X, r24

	/* FOC0 is only active when using PWM mode */
	TCCR0 |= (1<<FOC0);
    25ba:	a3 e5       	ldi	r26, 0x53	; 83
    25bc:	b0 e0       	ldi	r27, 0x00	; 0
    25be:	e3 e5       	ldi	r30, 0x53	; 83
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	80 81       	ld	r24, Z
    25c4:	80 68       	ori	r24, 0x80	; 128
    25c6:	8c 93       	st	X, r24

	/* Clearing WGM01 before writing */
	TCCR0 &= ~(1<<WGM01);
    25c8:	a3 e5       	ldi	r26, 0x53	; 83
    25ca:	b0 e0       	ldi	r27, 0x00	; 0
    25cc:	e3 e5       	ldi	r30, 0x53	; 83
    25ce:	f0 e0       	ldi	r31, 0x00	; 0
    25d0:	80 81       	ld	r24, Z
    25d2:	87 7f       	andi	r24, 0xF7	; 247
    25d4:	8c 93       	st	X, r24

	/* writing in WGM01 depending on the mode
	 * Normal = 0
	 * CTC = 1                                */
	TCCR0 |= ((Config_Ptr->mode)<<WGM01);
    25d6:	a3 e5       	ldi	r26, 0x53	; 83
    25d8:	b0 e0       	ldi	r27, 0x00	; 0
    25da:	e3 e5       	ldi	r30, 0x53	; 83
    25dc:	f0 e0       	ldi	r31, 0x00	; 0
    25de:	80 81       	ld	r24, Z
    25e0:	28 2f       	mov	r18, r24
    25e2:	e9 81       	ldd	r30, Y+1	; 0x01
    25e4:	fa 81       	ldd	r31, Y+2	; 0x02
    25e6:	80 81       	ld	r24, Z
    25e8:	88 2f       	mov	r24, r24
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	88 0f       	add	r24, r24
    25ee:	99 1f       	adc	r25, r25
    25f0:	88 0f       	add	r24, r24
    25f2:	99 1f       	adc	r25, r25
    25f4:	88 0f       	add	r24, r24
    25f6:	99 1f       	adc	r25, r25
    25f8:	82 2b       	or	r24, r18
    25fa:	8c 93       	st	X, r24

	/* Set the Clock Prescaler */
	TCCR0 |= (Config_Ptr->prescaler);
    25fc:	a3 e5       	ldi	r26, 0x53	; 83
    25fe:	b0 e0       	ldi	r27, 0x00	; 0
    2600:	e3 e5       	ldi	r30, 0x53	; 83
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	90 81       	ld	r25, Z
    2606:	e9 81       	ldd	r30, Y+1	; 0x01
    2608:	fa 81       	ldd	r31, Y+2	; 0x02
    260a:	85 81       	ldd	r24, Z+5	; 0x05
    260c:	89 2b       	or	r24, r25
    260e:	8c 93       	st	X, r24

	/* Enable Interrupts */
	if(Config_Ptr->mode == NORMAL){
    2610:	e9 81       	ldd	r30, Y+1	; 0x01
    2612:	fa 81       	ldd	r31, Y+2	; 0x02
    2614:	80 81       	ld	r24, Z
    2616:	88 23       	and	r24, r24
    2618:	41 f4       	brne	.+16     	; 0x262a <Timer0_Init+0x9a>
		TIMSK |= (1<<TOIE0);
    261a:	a9 e5       	ldi	r26, 0x59	; 89
    261c:	b0 e0       	ldi	r27, 0x00	; 0
    261e:	e9 e5       	ldi	r30, 0x59	; 89
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	80 81       	ld	r24, Z
    2624:	81 60       	ori	r24, 0x01	; 1
    2626:	8c 93       	st	X, r24
    2628:	0c c0       	rjmp	.+24     	; 0x2642 <Timer0_Init+0xb2>
	}
	else if(Config_Ptr->mode == COMPARE){
    262a:	e9 81       	ldd	r30, Y+1	; 0x01
    262c:	fa 81       	ldd	r31, Y+2	; 0x02
    262e:	80 81       	ld	r24, Z
    2630:	81 30       	cpi	r24, 0x01	; 1
    2632:	39 f4       	brne	.+14     	; 0x2642 <Timer0_Init+0xb2>
		TIMSK |= (1<<OCIE0);
    2634:	a9 e5       	ldi	r26, 0x59	; 89
    2636:	b0 e0       	ldi	r27, 0x00	; 0
    2638:	e9 e5       	ldi	r30, 0x59	; 89
    263a:	f0 e0       	ldi	r31, 0x00	; 0
    263c:	80 81       	ld	r24, Z
    263e:	82 60       	ori	r24, 0x02	; 2
    2640:	8c 93       	st	X, r24
	}
}
    2642:	0f 90       	pop	r0
    2644:	0f 90       	pop	r0
    2646:	cf 91       	pop	r28
    2648:	df 91       	pop	r29
    264a:	08 95       	ret

0000264c <Timer0_SetCallback>:

void Timer0_SetCallback(void (*a_Ptr)(void)){
    264c:	df 93       	push	r29
    264e:	cf 93       	push	r28
    2650:	00 d0       	rcall	.+0      	; 0x2652 <Timer0_SetCallback+0x6>
    2652:	cd b7       	in	r28, 0x3d	; 61
    2654:	de b7       	in	r29, 0x3e	; 62
    2656:	9a 83       	std	Y+2, r25	; 0x02
    2658:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_Ptr;
    265a:	89 81       	ldd	r24, Y+1	; 0x01
    265c:	9a 81       	ldd	r25, Y+2	; 0x02
    265e:	90 93 81 00 	sts	0x0081, r25
    2662:	80 93 80 00 	sts	0x0080, r24
}
    2666:	0f 90       	pop	r0
    2668:	0f 90       	pop	r0
    266a:	cf 91       	pop	r28
    266c:	df 91       	pop	r29
    266e:	08 95       	ret

00002670 <Timer0_DeInit>:

void Timer0_DeInit(void){
    2670:	df 93       	push	r29
    2672:	cf 93       	push	r28
    2674:	cd b7       	in	r28, 0x3d	; 61
    2676:	de b7       	in	r29, 0x3e	; 62
	/* Clear all Timer0 Registers */
	TCCR0 = 0x00;
    2678:	e3 e5       	ldi	r30, 0x53	; 83
    267a:	f0 e0       	ldi	r31, 0x00	; 0
    267c:	10 82       	st	Z, r1
	TCNT0 = 0;
    267e:	e2 e5       	ldi	r30, 0x52	; 82
    2680:	f0 e0       	ldi	r31, 0x00	; 0
    2682:	10 82       	st	Z, r1
	OCR0 = 0;
    2684:	ec e5       	ldi	r30, 0x5C	; 92
    2686:	f0 e0       	ldi	r31, 0x00	; 0
    2688:	10 82       	st	Z, r1

	/* Disable Interrupts */
	TIMSK &= ~(1<<OCIE0) & ~(1<<TOIE0);
    268a:	a9 e5       	ldi	r26, 0x59	; 89
    268c:	b0 e0       	ldi	r27, 0x00	; 0
    268e:	e9 e5       	ldi	r30, 0x59	; 89
    2690:	f0 e0       	ldi	r31, 0x00	; 0
    2692:	80 81       	ld	r24, Z
    2694:	8c 7f       	andi	r24, 0xFC	; 252
    2696:	8c 93       	st	X, r24
}
    2698:	cf 91       	pop	r28
    269a:	df 91       	pop	r29
    269c:	08 95       	ret

0000269e <TWI_init>:
#include <avr/io.h>

#define F_CPU 8000000UL

void TWI_init(TWI_ConfigType *Config_Ptr)
{
    269e:	df 93       	push	r29
    26a0:	cf 93       	push	r28
    26a2:	00 d0       	rcall	.+0      	; 0x26a4 <TWI_init+0x6>
    26a4:	0f 92       	push	r0
    26a6:	cd b7       	in	r28, 0x3d	; 61
    26a8:	de b7       	in	r29, 0x3e	; 62
    26aa:	9b 83       	std	Y+3, r25	; 0x03
    26ac:	8a 83       	std	Y+2, r24	; 0x02
	GPIO_setupPinDirection(TWI_PORT, TWI_CLK_PIN, PIN_OUTPUT);
    26ae:	e2 e3       	ldi	r30, 0x32	; 50
    26b0:	f0 e0       	ldi	r31, 0x00	; 0
    26b2:	80 81       	ld	r24, Z
    26b4:	60 e0       	ldi	r22, 0x00	; 0
    26b6:	41 e0       	ldi	r20, 0x01	; 1
    26b8:	0e 94 ef 08 	call	0x11de	; 0x11de <GPIO_setupPinDirection>
	GPIO_setupPinDirection(TWI_PORT, TWI_DATA_PIN, PIN_OUTPUT);
    26bc:	e2 e3       	ldi	r30, 0x32	; 50
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	80 81       	ld	r24, Z
    26c2:	61 e0       	ldi	r22, 0x01	; 1
    26c4:	41 e0       	ldi	r20, 0x01	; 1
    26c6:	0e 94 ef 08 	call	0x11de	; 0x11de <GPIO_setupPinDirection>
    /* Bit Rate: Predefined macro, using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    uint8 TWBR_Value = (uint8)(((F_CPU/(Config_Ptr->MY_BIT_RATE))-16)/2);
    26ca:	ea 81       	ldd	r30, Y+2	; 0x02
    26cc:	fb 81       	ldd	r31, Y+3	; 0x03
    26ce:	20 81       	ld	r18, Z
    26d0:	31 81       	ldd	r19, Z+1	; 0x01
    26d2:	42 81       	ldd	r20, Z+2	; 0x02
    26d4:	53 81       	ldd	r21, Z+3	; 0x03
    26d6:	80 e0       	ldi	r24, 0x00	; 0
    26d8:	92 e1       	ldi	r25, 0x12	; 18
    26da:	aa e7       	ldi	r26, 0x7A	; 122
    26dc:	b0 e0       	ldi	r27, 0x00	; 0
    26de:	bc 01       	movw	r22, r24
    26e0:	cd 01       	movw	r24, r26
    26e2:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__udivmodsi4>
    26e6:	da 01       	movw	r26, r20
    26e8:	c9 01       	movw	r24, r18
    26ea:	40 97       	sbiw	r24, 0x10	; 16
    26ec:	a1 09       	sbc	r26, r1
    26ee:	b1 09       	sbc	r27, r1
    26f0:	b6 95       	lsr	r27
    26f2:	a7 95       	ror	r26
    26f4:	97 95       	ror	r25
    26f6:	87 95       	ror	r24
    26f8:	89 83       	std	Y+1, r24	; 0x01
	TWBR = TWBR_Value;
    26fa:	e0 e2       	ldi	r30, 0x20	; 32
    26fc:	f0 e0       	ldi	r31, 0x00	; 0
    26fe:	89 81       	ldd	r24, Y+1	; 0x01
    2700:	80 83       	st	Z, r24
	TWSR = 0x00;
    2702:	e1 e2       	ldi	r30, 0x21	; 33
    2704:	f0 e0       	ldi	r31, 0x00	; 0
    2706:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = Config_Ptr->MY_ADDRESS; // my address = Predefined macro :)
    2708:	a2 e2       	ldi	r26, 0x22	; 34
    270a:	b0 e0       	ldi	r27, 0x00	; 0
    270c:	ea 81       	ldd	r30, Y+2	; 0x02
    270e:	fb 81       	ldd	r31, Y+3	; 0x03
    2710:	84 81       	ldd	r24, Z+4	; 0x04
    2712:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    2714:	e6 e5       	ldi	r30, 0x56	; 86
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	84 e0       	ldi	r24, 0x04	; 4
    271a:	80 83       	st	Z, r24
}
    271c:	0f 90       	pop	r0
    271e:	0f 90       	pop	r0
    2720:	0f 90       	pop	r0
    2722:	cf 91       	pop	r28
    2724:	df 91       	pop	r29
    2726:	08 95       	ret

00002728 <TWI_start>:

void TWI_start(void)
{
    2728:	df 93       	push	r29
    272a:	cf 93       	push	r28
    272c:	cd b7       	in	r28, 0x3d	; 61
    272e:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2730:	e6 e5       	ldi	r30, 0x56	; 86
    2732:	f0 e0       	ldi	r31, 0x00	; 0
    2734:	84 ea       	ldi	r24, 0xA4	; 164
    2736:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2738:	e6 e5       	ldi	r30, 0x56	; 86
    273a:	f0 e0       	ldi	r31, 0x00	; 0
    273c:	80 81       	ld	r24, Z
    273e:	88 23       	and	r24, r24
    2740:	dc f7       	brge	.-10     	; 0x2738 <TWI_start+0x10>
}
    2742:	cf 91       	pop	r28
    2744:	df 91       	pop	r29
    2746:	08 95       	ret

00002748 <TWI_stop>:

void TWI_stop(void)
{
    2748:	df 93       	push	r29
    274a:	cf 93       	push	r28
    274c:	cd b7       	in	r28, 0x3d	; 61
    274e:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2750:	e6 e5       	ldi	r30, 0x56	; 86
    2752:	f0 e0       	ldi	r31, 0x00	; 0
    2754:	84 e9       	ldi	r24, 0x94	; 148
    2756:	80 83       	st	Z, r24
}
    2758:	cf 91       	pop	r28
    275a:	df 91       	pop	r29
    275c:	08 95       	ret

0000275e <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    275e:	df 93       	push	r29
    2760:	cf 93       	push	r28
    2762:	0f 92       	push	r0
    2764:	cd b7       	in	r28, 0x3d	; 61
    2766:	de b7       	in	r29, 0x3e	; 62
    2768:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    276a:	e3 e2       	ldi	r30, 0x23	; 35
    276c:	f0 e0       	ldi	r31, 0x00	; 0
    276e:	89 81       	ldd	r24, Y+1	; 0x01
    2770:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    2772:	e6 e5       	ldi	r30, 0x56	; 86
    2774:	f0 e0       	ldi	r31, 0x00	; 0
    2776:	84 e8       	ldi	r24, 0x84	; 132
    2778:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    277a:	e6 e5       	ldi	r30, 0x56	; 86
    277c:	f0 e0       	ldi	r31, 0x00	; 0
    277e:	80 81       	ld	r24, Z
    2780:	88 23       	and	r24, r24
    2782:	dc f7       	brge	.-10     	; 0x277a <TWI_writeByte+0x1c>
}
    2784:	0f 90       	pop	r0
    2786:	cf 91       	pop	r28
    2788:	df 91       	pop	r29
    278a:	08 95       	ret

0000278c <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    278c:	df 93       	push	r29
    278e:	cf 93       	push	r28
    2790:	cd b7       	in	r28, 0x3d	; 61
    2792:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2794:	e6 e5       	ldi	r30, 0x56	; 86
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	84 ec       	ldi	r24, 0xC4	; 196
    279a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    279c:	e6 e5       	ldi	r30, 0x56	; 86
    279e:	f0 e0       	ldi	r31, 0x00	; 0
    27a0:	80 81       	ld	r24, Z
    27a2:	88 23       	and	r24, r24
    27a4:	dc f7       	brge	.-10     	; 0x279c <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    27a6:	e3 e2       	ldi	r30, 0x23	; 35
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	80 81       	ld	r24, Z
}
    27ac:	cf 91       	pop	r28
    27ae:	df 91       	pop	r29
    27b0:	08 95       	ret

000027b2 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    27b2:	df 93       	push	r29
    27b4:	cf 93       	push	r28
    27b6:	cd b7       	in	r28, 0x3d	; 61
    27b8:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    27ba:	e6 e5       	ldi	r30, 0x56	; 86
    27bc:	f0 e0       	ldi	r31, 0x00	; 0
    27be:	84 e8       	ldi	r24, 0x84	; 132
    27c0:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    27c2:	e6 e5       	ldi	r30, 0x56	; 86
    27c4:	f0 e0       	ldi	r31, 0x00	; 0
    27c6:	80 81       	ld	r24, Z
    27c8:	88 23       	and	r24, r24
    27ca:	dc f7       	brge	.-10     	; 0x27c2 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    27cc:	e3 e2       	ldi	r30, 0x23	; 35
    27ce:	f0 e0       	ldi	r31, 0x00	; 0
    27d0:	80 81       	ld	r24, Z
}
    27d2:	cf 91       	pop	r28
    27d4:	df 91       	pop	r29
    27d6:	08 95       	ret

000027d8 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    27d8:	df 93       	push	r29
    27da:	cf 93       	push	r28
    27dc:	0f 92       	push	r0
    27de:	cd b7       	in	r28, 0x3d	; 61
    27e0:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    27e2:	e1 e2       	ldi	r30, 0x21	; 33
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	80 81       	ld	r24, Z
    27e8:	88 7f       	andi	r24, 0xF8	; 248
    27ea:	89 83       	std	Y+1, r24	; 0x01
    return status;
    27ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    27ee:	0f 90       	pop	r0
    27f0:	cf 91       	pop	r28
    27f2:	df 91       	pop	r29
    27f4:	08 95       	ret

000027f6 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(UART_ConfigType *Config_Ptr)
{
    27f6:	df 93       	push	r29
    27f8:	cf 93       	push	r28
    27fa:	00 d0       	rcall	.+0      	; 0x27fc <UART_init+0x6>
    27fc:	00 d0       	rcall	.+0      	; 0x27fe <UART_init+0x8>
    27fe:	cd b7       	in	r28, 0x3d	; 61
    2800:	de b7       	in	r29, 0x3e	; 62
    2802:	9c 83       	std	Y+4, r25	; 0x04
    2804:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2806:	1a 82       	std	Y+2, r1	; 0x02
    2808:	19 82       	std	Y+1, r1	; 0x01

	/* Adjust the value inside the variable
	 * to match the value in the table used
	 * in UBRR Register
	 */
	if(Config_Ptr->num_of_data_bits < 9){
    280a:	eb 81       	ldd	r30, Y+3	; 0x03
    280c:	fc 81       	ldd	r31, Y+4	; 0x04
    280e:	82 81       	ldd	r24, Z+2	; 0x02
    2810:	89 30       	cpi	r24, 0x09	; 9
    2812:	40 f4       	brcc	.+16     	; 0x2824 <UART_init+0x2e>
		Config_Ptr->num_of_data_bits -= 5;
    2814:	eb 81       	ldd	r30, Y+3	; 0x03
    2816:	fc 81       	ldd	r31, Y+4	; 0x04
    2818:	82 81       	ldd	r24, Z+2	; 0x02
    281a:	85 50       	subi	r24, 0x05	; 5
    281c:	eb 81       	ldd	r30, Y+3	; 0x03
    281e:	fc 81       	ldd	r31, Y+4	; 0x04
    2820:	82 83       	std	Z+2, r24	; 0x02
    2822:	04 c0       	rjmp	.+8      	; 0x282c <UART_init+0x36>
	}
	else{
		Config_Ptr->num_of_data_bits = 7;
    2824:	eb 81       	ldd	r30, Y+3	; 0x03
    2826:	fc 81       	ldd	r31, Y+4	; 0x04
    2828:	87 e0       	ldi	r24, 0x07	; 7
    282a:	82 83       	std	Z+2, r24	; 0x02
	}

	Config_Ptr->num_of_stop_bits -= 1;
    282c:	eb 81       	ldd	r30, Y+3	; 0x03
    282e:	fc 81       	ldd	r31, Y+4	; 0x04
    2830:	83 81       	ldd	r24, Z+3	; 0x03
    2832:	81 50       	subi	r24, 0x01	; 1
    2834:	eb 81       	ldd	r30, Y+3	; 0x03
    2836:	fc 81       	ldd	r31, Y+4	; 0x04
    2838:	83 83       	std	Z+3, r24	; 0x03

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    283a:	eb e2       	ldi	r30, 0x2B	; 43
    283c:	f0 e0       	ldi	r31, 0x00	; 0
    283e:	82 e0       	ldi	r24, 0x02	; 2
    2840:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2842:	ea e2       	ldi	r30, 0x2A	; 42
    2844:	f0 e0       	ldi	r31, 0x00	; 0
    2846:	88 e1       	ldi	r24, 0x18	; 24
    2848:	80 83       	st	Z, r24
	UCSRB |= ((Config_Ptr->num_of_data_bits & 0x04));
    284a:	aa e2       	ldi	r26, 0x2A	; 42
    284c:	b0 e0       	ldi	r27, 0x00	; 0
    284e:	ea e2       	ldi	r30, 0x2A	; 42
    2850:	f0 e0       	ldi	r31, 0x00	; 0
    2852:	80 81       	ld	r24, Z
    2854:	98 2f       	mov	r25, r24
    2856:	eb 81       	ldd	r30, Y+3	; 0x03
    2858:	fc 81       	ldd	r31, Y+4	; 0x04
    285a:	82 81       	ldd	r24, Z+2	; 0x02
    285c:	84 70       	andi	r24, 0x04	; 4
    285e:	89 2b       	or	r24, r25
    2860:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    2862:	e0 e4       	ldi	r30, 0x40	; 64
    2864:	f0 e0       	ldi	r31, 0x00	; 0
    2866:	80 e8       	ldi	r24, 0x80	; 128
    2868:	80 83       	st	Z, r24
	UCSRC |= ((Config_Ptr->num_of_data_bits & 0x03)<<UCSZ0);
    286a:	a0 e4       	ldi	r26, 0x40	; 64
    286c:	b0 e0       	ldi	r27, 0x00	; 0
    286e:	e0 e4       	ldi	r30, 0x40	; 64
    2870:	f0 e0       	ldi	r31, 0x00	; 0
    2872:	80 81       	ld	r24, Z
    2874:	28 2f       	mov	r18, r24
    2876:	eb 81       	ldd	r30, Y+3	; 0x03
    2878:	fc 81       	ldd	r31, Y+4	; 0x04
    287a:	82 81       	ldd	r24, Z+2	; 0x02
    287c:	88 2f       	mov	r24, r24
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	83 70       	andi	r24, 0x03	; 3
    2882:	90 70       	andi	r25, 0x00	; 0
    2884:	88 0f       	add	r24, r24
    2886:	99 1f       	adc	r25, r25
    2888:	82 2b       	or	r24, r18
    288a:	8c 93       	st	X, r24
	UCSRC |= (Config_Ptr->num_of_stop_bits << USBS);
    288c:	a0 e4       	ldi	r26, 0x40	; 64
    288e:	b0 e0       	ldi	r27, 0x00	; 0
    2890:	e0 e4       	ldi	r30, 0x40	; 64
    2892:	f0 e0       	ldi	r31, 0x00	; 0
    2894:	80 81       	ld	r24, Z
    2896:	28 2f       	mov	r18, r24
    2898:	eb 81       	ldd	r30, Y+3	; 0x03
    289a:	fc 81       	ldd	r31, Y+4	; 0x04
    289c:	83 81       	ldd	r24, Z+3	; 0x03
    289e:	88 2f       	mov	r24, r24
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	88 0f       	add	r24, r24
    28a4:	99 1f       	adc	r25, r25
    28a6:	88 0f       	add	r24, r24
    28a8:	99 1f       	adc	r25, r25
    28aa:	88 0f       	add	r24, r24
    28ac:	99 1f       	adc	r25, r25
    28ae:	82 2b       	or	r24, r18
    28b0:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    28b2:	eb 81       	ldd	r30, Y+3	; 0x03
    28b4:	fc 81       	ldd	r31, Y+4	; 0x04
    28b6:	80 81       	ld	r24, Z
    28b8:	91 81       	ldd	r25, Z+1	; 0x01
    28ba:	cc 01       	movw	r24, r24
    28bc:	a0 e0       	ldi	r26, 0x00	; 0
    28be:	b0 e0       	ldi	r27, 0x00	; 0
    28c0:	88 0f       	add	r24, r24
    28c2:	99 1f       	adc	r25, r25
    28c4:	aa 1f       	adc	r26, r26
    28c6:	bb 1f       	adc	r27, r27
    28c8:	88 0f       	add	r24, r24
    28ca:	99 1f       	adc	r25, r25
    28cc:	aa 1f       	adc	r26, r26
    28ce:	bb 1f       	adc	r27, r27
    28d0:	88 0f       	add	r24, r24
    28d2:	99 1f       	adc	r25, r25
    28d4:	aa 1f       	adc	r26, r26
    28d6:	bb 1f       	adc	r27, r27
    28d8:	9c 01       	movw	r18, r24
    28da:	ad 01       	movw	r20, r26
    28dc:	80 e0       	ldi	r24, 0x00	; 0
    28de:	92 e1       	ldi	r25, 0x12	; 18
    28e0:	aa e7       	ldi	r26, 0x7A	; 122
    28e2:	b0 e0       	ldi	r27, 0x00	; 0
    28e4:	bc 01       	movw	r22, r24
    28e6:	cd 01       	movw	r24, r26
    28e8:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__udivmodsi4>
    28ec:	da 01       	movw	r26, r20
    28ee:	c9 01       	movw	r24, r18
    28f0:	01 97       	sbiw	r24, 0x01	; 1
    28f2:	9a 83       	std	Y+2, r25	; 0x02
    28f4:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    28f6:	e0 e4       	ldi	r30, 0x40	; 64
    28f8:	f0 e0       	ldi	r31, 0x00	; 0
    28fa:	89 81       	ldd	r24, Y+1	; 0x01
    28fc:	9a 81       	ldd	r25, Y+2	; 0x02
    28fe:	89 2f       	mov	r24, r25
    2900:	99 27       	eor	r25, r25
    2902:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2904:	e9 e2       	ldi	r30, 0x29	; 41
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	89 81       	ldd	r24, Y+1	; 0x01
    290a:	80 83       	st	Z, r24
}
    290c:	0f 90       	pop	r0
    290e:	0f 90       	pop	r0
    2910:	0f 90       	pop	r0
    2912:	0f 90       	pop	r0
    2914:	cf 91       	pop	r28
    2916:	df 91       	pop	r29
    2918:	08 95       	ret

0000291a <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    291a:	df 93       	push	r29
    291c:	cf 93       	push	r28
    291e:	0f 92       	push	r0
    2920:	cd b7       	in	r28, 0x3d	; 61
    2922:	de b7       	in	r29, 0x3e	; 62
    2924:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2926:	eb e2       	ldi	r30, 0x2B	; 43
    2928:	f0 e0       	ldi	r31, 0x00	; 0
    292a:	80 81       	ld	r24, Z
    292c:	88 2f       	mov	r24, r24
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	80 72       	andi	r24, 0x20	; 32
    2932:	90 70       	andi	r25, 0x00	; 0
    2934:	00 97       	sbiw	r24, 0x00	; 0
    2936:	b9 f3       	breq	.-18     	; 0x2926 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2938:	ec e2       	ldi	r30, 0x2C	; 44
    293a:	f0 e0       	ldi	r31, 0x00	; 0
    293c:	89 81       	ldd	r24, Y+1	; 0x01
    293e:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2940:	0f 90       	pop	r0
    2942:	cf 91       	pop	r28
    2944:	df 91       	pop	r29
    2946:	08 95       	ret

00002948 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2948:	df 93       	push	r29
    294a:	cf 93       	push	r28
    294c:	cd b7       	in	r28, 0x3d	; 61
    294e:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2950:	eb e2       	ldi	r30, 0x2B	; 43
    2952:	f0 e0       	ldi	r31, 0x00	; 0
    2954:	80 81       	ld	r24, Z
    2956:	88 23       	and	r24, r24
    2958:	dc f7       	brge	.-10     	; 0x2950 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    295a:	ec e2       	ldi	r30, 0x2C	; 44
    295c:	f0 e0       	ldi	r31, 0x00	; 0
    295e:	80 81       	ld	r24, Z
}
    2960:	cf 91       	pop	r28
    2962:	df 91       	pop	r29
    2964:	08 95       	ret

00002966 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2966:	df 93       	push	r29
    2968:	cf 93       	push	r28
    296a:	00 d0       	rcall	.+0      	; 0x296c <UART_sendString+0x6>
    296c:	0f 92       	push	r0
    296e:	cd b7       	in	r28, 0x3d	; 61
    2970:	de b7       	in	r29, 0x3e	; 62
    2972:	9b 83       	std	Y+3, r25	; 0x03
    2974:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2976:	19 82       	std	Y+1, r1	; 0x01
    2978:	0e c0       	rjmp	.+28     	; 0x2996 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    297a:	89 81       	ldd	r24, Y+1	; 0x01
    297c:	28 2f       	mov	r18, r24
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	8a 81       	ldd	r24, Y+2	; 0x02
    2982:	9b 81       	ldd	r25, Y+3	; 0x03
    2984:	fc 01       	movw	r30, r24
    2986:	e2 0f       	add	r30, r18
    2988:	f3 1f       	adc	r31, r19
    298a:	80 81       	ld	r24, Z
    298c:	0e 94 8d 14 	call	0x291a	; 0x291a <UART_sendByte>
		i++;
    2990:	89 81       	ldd	r24, Y+1	; 0x01
    2992:	8f 5f       	subi	r24, 0xFF	; 255
    2994:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2996:	89 81       	ldd	r24, Y+1	; 0x01
    2998:	28 2f       	mov	r18, r24
    299a:	30 e0       	ldi	r19, 0x00	; 0
    299c:	8a 81       	ldd	r24, Y+2	; 0x02
    299e:	9b 81       	ldd	r25, Y+3	; 0x03
    29a0:	fc 01       	movw	r30, r24
    29a2:	e2 0f       	add	r30, r18
    29a4:	f3 1f       	adc	r31, r19
    29a6:	80 81       	ld	r24, Z
    29a8:	88 23       	and	r24, r24
    29aa:	39 f7       	brne	.-50     	; 0x297a <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    29ac:	0f 90       	pop	r0
    29ae:	0f 90       	pop	r0
    29b0:	0f 90       	pop	r0
    29b2:	cf 91       	pop	r28
    29b4:	df 91       	pop	r29
    29b6:	08 95       	ret

000029b8 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    29b8:	0f 93       	push	r16
    29ba:	1f 93       	push	r17
    29bc:	df 93       	push	r29
    29be:	cf 93       	push	r28
    29c0:	00 d0       	rcall	.+0      	; 0x29c2 <UART_receiveString+0xa>
    29c2:	0f 92       	push	r0
    29c4:	cd b7       	in	r28, 0x3d	; 61
    29c6:	de b7       	in	r29, 0x3e	; 62
    29c8:	9b 83       	std	Y+3, r25	; 0x03
    29ca:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    29cc:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    29ce:	89 81       	ldd	r24, Y+1	; 0x01
    29d0:	28 2f       	mov	r18, r24
    29d2:	30 e0       	ldi	r19, 0x00	; 0
    29d4:	8a 81       	ldd	r24, Y+2	; 0x02
    29d6:	9b 81       	ldd	r25, Y+3	; 0x03
    29d8:	8c 01       	movw	r16, r24
    29da:	02 0f       	add	r16, r18
    29dc:	13 1f       	adc	r17, r19
    29de:	0e 94 a4 14 	call	0x2948	; 0x2948 <UART_recieveByte>
    29e2:	f8 01       	movw	r30, r16
    29e4:	80 83       	st	Z, r24
    29e6:	0f c0       	rjmp	.+30     	; 0x2a06 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    29e8:	89 81       	ldd	r24, Y+1	; 0x01
    29ea:	8f 5f       	subi	r24, 0xFF	; 255
    29ec:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    29ee:	89 81       	ldd	r24, Y+1	; 0x01
    29f0:	28 2f       	mov	r18, r24
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	8a 81       	ldd	r24, Y+2	; 0x02
    29f6:	9b 81       	ldd	r25, Y+3	; 0x03
    29f8:	8c 01       	movw	r16, r24
    29fa:	02 0f       	add	r16, r18
    29fc:	13 1f       	adc	r17, r19
    29fe:	0e 94 a4 14 	call	0x2948	; 0x2948 <UART_recieveByte>
    2a02:	f8 01       	movw	r30, r16
    2a04:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2a06:	89 81       	ldd	r24, Y+1	; 0x01
    2a08:	28 2f       	mov	r18, r24
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a0e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a10:	fc 01       	movw	r30, r24
    2a12:	e2 0f       	add	r30, r18
    2a14:	f3 1f       	adc	r31, r19
    2a16:	80 81       	ld	r24, Z
    2a18:	83 32       	cpi	r24, 0x23	; 35
    2a1a:	31 f7       	brne	.-52     	; 0x29e8 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2a1c:	89 81       	ldd	r24, Y+1	; 0x01
    2a1e:	28 2f       	mov	r18, r24
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	8a 81       	ldd	r24, Y+2	; 0x02
    2a24:	9b 81       	ldd	r25, Y+3	; 0x03
    2a26:	fc 01       	movw	r30, r24
    2a28:	e2 0f       	add	r30, r18
    2a2a:	f3 1f       	adc	r31, r19
    2a2c:	10 82       	st	Z, r1
}
    2a2e:	0f 90       	pop	r0
    2a30:	0f 90       	pop	r0
    2a32:	0f 90       	pop	r0
    2a34:	cf 91       	pop	r28
    2a36:	df 91       	pop	r29
    2a38:	1f 91       	pop	r17
    2a3a:	0f 91       	pop	r16
    2a3c:	08 95       	ret

00002a3e <__divmodhi4>:
    2a3e:	97 fb       	bst	r25, 7
    2a40:	09 2e       	mov	r0, r25
    2a42:	07 26       	eor	r0, r23
    2a44:	0a d0       	rcall	.+20     	; 0x2a5a <__divmodhi4_neg1>
    2a46:	77 fd       	sbrc	r23, 7
    2a48:	04 d0       	rcall	.+8      	; 0x2a52 <__divmodhi4_neg2>
    2a4a:	2e d0       	rcall	.+92     	; 0x2aa8 <__udivmodhi4>
    2a4c:	06 d0       	rcall	.+12     	; 0x2a5a <__divmodhi4_neg1>
    2a4e:	00 20       	and	r0, r0
    2a50:	1a f4       	brpl	.+6      	; 0x2a58 <__divmodhi4_exit>

00002a52 <__divmodhi4_neg2>:
    2a52:	70 95       	com	r23
    2a54:	61 95       	neg	r22
    2a56:	7f 4f       	sbci	r23, 0xFF	; 255

00002a58 <__divmodhi4_exit>:
    2a58:	08 95       	ret

00002a5a <__divmodhi4_neg1>:
    2a5a:	f6 f7       	brtc	.-4      	; 0x2a58 <__divmodhi4_exit>
    2a5c:	90 95       	com	r25
    2a5e:	81 95       	neg	r24
    2a60:	9f 4f       	sbci	r25, 0xFF	; 255
    2a62:	08 95       	ret

00002a64 <__udivmodsi4>:
    2a64:	a1 e2       	ldi	r26, 0x21	; 33
    2a66:	1a 2e       	mov	r1, r26
    2a68:	aa 1b       	sub	r26, r26
    2a6a:	bb 1b       	sub	r27, r27
    2a6c:	fd 01       	movw	r30, r26
    2a6e:	0d c0       	rjmp	.+26     	; 0x2a8a <__udivmodsi4_ep>

00002a70 <__udivmodsi4_loop>:
    2a70:	aa 1f       	adc	r26, r26
    2a72:	bb 1f       	adc	r27, r27
    2a74:	ee 1f       	adc	r30, r30
    2a76:	ff 1f       	adc	r31, r31
    2a78:	a2 17       	cp	r26, r18
    2a7a:	b3 07       	cpc	r27, r19
    2a7c:	e4 07       	cpc	r30, r20
    2a7e:	f5 07       	cpc	r31, r21
    2a80:	20 f0       	brcs	.+8      	; 0x2a8a <__udivmodsi4_ep>
    2a82:	a2 1b       	sub	r26, r18
    2a84:	b3 0b       	sbc	r27, r19
    2a86:	e4 0b       	sbc	r30, r20
    2a88:	f5 0b       	sbc	r31, r21

00002a8a <__udivmodsi4_ep>:
    2a8a:	66 1f       	adc	r22, r22
    2a8c:	77 1f       	adc	r23, r23
    2a8e:	88 1f       	adc	r24, r24
    2a90:	99 1f       	adc	r25, r25
    2a92:	1a 94       	dec	r1
    2a94:	69 f7       	brne	.-38     	; 0x2a70 <__udivmodsi4_loop>
    2a96:	60 95       	com	r22
    2a98:	70 95       	com	r23
    2a9a:	80 95       	com	r24
    2a9c:	90 95       	com	r25
    2a9e:	9b 01       	movw	r18, r22
    2aa0:	ac 01       	movw	r20, r24
    2aa2:	bd 01       	movw	r22, r26
    2aa4:	cf 01       	movw	r24, r30
    2aa6:	08 95       	ret

00002aa8 <__udivmodhi4>:
    2aa8:	aa 1b       	sub	r26, r26
    2aaa:	bb 1b       	sub	r27, r27
    2aac:	51 e1       	ldi	r21, 0x11	; 17
    2aae:	07 c0       	rjmp	.+14     	; 0x2abe <__udivmodhi4_ep>

00002ab0 <__udivmodhi4_loop>:
    2ab0:	aa 1f       	adc	r26, r26
    2ab2:	bb 1f       	adc	r27, r27
    2ab4:	a6 17       	cp	r26, r22
    2ab6:	b7 07       	cpc	r27, r23
    2ab8:	10 f0       	brcs	.+4      	; 0x2abe <__udivmodhi4_ep>
    2aba:	a6 1b       	sub	r26, r22
    2abc:	b7 0b       	sbc	r27, r23

00002abe <__udivmodhi4_ep>:
    2abe:	88 1f       	adc	r24, r24
    2ac0:	99 1f       	adc	r25, r25
    2ac2:	5a 95       	dec	r21
    2ac4:	a9 f7       	brne	.-22     	; 0x2ab0 <__udivmodhi4_loop>
    2ac6:	80 95       	com	r24
    2ac8:	90 95       	com	r25
    2aca:	bc 01       	movw	r22, r24
    2acc:	cd 01       	movw	r24, r26
    2ace:	08 95       	ret

00002ad0 <__prologue_saves__>:
    2ad0:	2f 92       	push	r2
    2ad2:	3f 92       	push	r3
    2ad4:	4f 92       	push	r4
    2ad6:	5f 92       	push	r5
    2ad8:	6f 92       	push	r6
    2ada:	7f 92       	push	r7
    2adc:	8f 92       	push	r8
    2ade:	9f 92       	push	r9
    2ae0:	af 92       	push	r10
    2ae2:	bf 92       	push	r11
    2ae4:	cf 92       	push	r12
    2ae6:	df 92       	push	r13
    2ae8:	ef 92       	push	r14
    2aea:	ff 92       	push	r15
    2aec:	0f 93       	push	r16
    2aee:	1f 93       	push	r17
    2af0:	cf 93       	push	r28
    2af2:	df 93       	push	r29
    2af4:	cd b7       	in	r28, 0x3d	; 61
    2af6:	de b7       	in	r29, 0x3e	; 62
    2af8:	ca 1b       	sub	r28, r26
    2afa:	db 0b       	sbc	r29, r27
    2afc:	0f b6       	in	r0, 0x3f	; 63
    2afe:	f8 94       	cli
    2b00:	de bf       	out	0x3e, r29	; 62
    2b02:	0f be       	out	0x3f, r0	; 63
    2b04:	cd bf       	out	0x3d, r28	; 61
    2b06:	09 94       	ijmp

00002b08 <__epilogue_restores__>:
    2b08:	2a 88       	ldd	r2, Y+18	; 0x12
    2b0a:	39 88       	ldd	r3, Y+17	; 0x11
    2b0c:	48 88       	ldd	r4, Y+16	; 0x10
    2b0e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b10:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b12:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b14:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b16:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b18:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b1a:	b9 84       	ldd	r11, Y+9	; 0x09
    2b1c:	c8 84       	ldd	r12, Y+8	; 0x08
    2b1e:	df 80       	ldd	r13, Y+7	; 0x07
    2b20:	ee 80       	ldd	r14, Y+6	; 0x06
    2b22:	fd 80       	ldd	r15, Y+5	; 0x05
    2b24:	0c 81       	ldd	r16, Y+4	; 0x04
    2b26:	1b 81       	ldd	r17, Y+3	; 0x03
    2b28:	aa 81       	ldd	r26, Y+2	; 0x02
    2b2a:	b9 81       	ldd	r27, Y+1	; 0x01
    2b2c:	ce 0f       	add	r28, r30
    2b2e:	d1 1d       	adc	r29, r1
    2b30:	0f b6       	in	r0, 0x3f	; 63
    2b32:	f8 94       	cli
    2b34:	de bf       	out	0x3e, r29	; 62
    2b36:	0f be       	out	0x3f, r0	; 63
    2b38:	cd bf       	out	0x3d, r28	; 61
    2b3a:	ed 01       	movw	r28, r26
    2b3c:	08 95       	ret

00002b3e <itoa>:
    2b3e:	fb 01       	movw	r30, r22
    2b40:	9f 01       	movw	r18, r30
    2b42:	e8 94       	clt
    2b44:	42 30       	cpi	r20, 0x02	; 2
    2b46:	c4 f0       	brlt	.+48     	; 0x2b78 <itoa+0x3a>
    2b48:	45 32       	cpi	r20, 0x25	; 37
    2b4a:	b4 f4       	brge	.+44     	; 0x2b78 <itoa+0x3a>
    2b4c:	4a 30       	cpi	r20, 0x0A	; 10
    2b4e:	29 f4       	brne	.+10     	; 0x2b5a <itoa+0x1c>
    2b50:	97 fb       	bst	r25, 7
    2b52:	1e f4       	brtc	.+6      	; 0x2b5a <itoa+0x1c>
    2b54:	90 95       	com	r25
    2b56:	81 95       	neg	r24
    2b58:	9f 4f       	sbci	r25, 0xFF	; 255
    2b5a:	64 2f       	mov	r22, r20
    2b5c:	77 27       	eor	r23, r23
    2b5e:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <__udivmodhi4>
    2b62:	80 5d       	subi	r24, 0xD0	; 208
    2b64:	8a 33       	cpi	r24, 0x3A	; 58
    2b66:	0c f0       	brlt	.+2      	; 0x2b6a <itoa+0x2c>
    2b68:	89 5d       	subi	r24, 0xD9	; 217
    2b6a:	81 93       	st	Z+, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	00 97       	sbiw	r24, 0x00	; 0
    2b70:	a1 f7       	brne	.-24     	; 0x2b5a <itoa+0x1c>
    2b72:	16 f4       	brtc	.+4      	; 0x2b78 <itoa+0x3a>
    2b74:	5d e2       	ldi	r21, 0x2D	; 45
    2b76:	51 93       	st	Z+, r21
    2b78:	10 82       	st	Z, r1
    2b7a:	c9 01       	movw	r24, r18
    2b7c:	0c 94 c0 15 	jmp	0x2b80	; 0x2b80 <strrev>

00002b80 <strrev>:
    2b80:	dc 01       	movw	r26, r24
    2b82:	fc 01       	movw	r30, r24
    2b84:	67 2f       	mov	r22, r23
    2b86:	71 91       	ld	r23, Z+
    2b88:	77 23       	and	r23, r23
    2b8a:	e1 f7       	brne	.-8      	; 0x2b84 <strrev+0x4>
    2b8c:	32 97       	sbiw	r30, 0x02	; 2
    2b8e:	04 c0       	rjmp	.+8      	; 0x2b98 <strrev+0x18>
    2b90:	7c 91       	ld	r23, X
    2b92:	6d 93       	st	X+, r22
    2b94:	70 83       	st	Z, r23
    2b96:	62 91       	ld	r22, -Z
    2b98:	ae 17       	cp	r26, r30
    2b9a:	bf 07       	cpc	r27, r31
    2b9c:	c8 f3       	brcs	.-14     	; 0x2b90 <strrev+0x10>
    2b9e:	08 95       	ret

00002ba0 <_exit>:
    2ba0:	f8 94       	cli

00002ba2 <__stop_program>:
    2ba2:	ff cf       	rjmp	.-2      	; 0x2ba2 <__stop_program>
