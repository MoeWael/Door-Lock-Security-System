
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000035a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000019e  00800060  000035a6  0000363a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  008001fe  008001fe  000037d8  2**0
                  ALLOC
  3 .stab         000038c4  00000000  00000000  000037d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001340  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000083dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  0000855c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  0000872f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  0000a73e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000b8ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000c8b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000ca50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000cd11  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d5bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 6a 17 	jmp	0x2ed4	; 0x2ed4 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 9d 17 	jmp	0x2f3a	; 0x2f3a <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ea       	ldi	r30, 0xA6	; 166
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3f       	cpi	r26, 0xFE	; 254
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ae ef       	ldi	r26, 0xFE	; 254
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 30       	cpi	r26, 0x0D	; 13
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6f 08 	call	0x10de	; 0x10de <main>
      8a:	0c 94 d1 1a 	jmp	0x35a2	; 0x35a2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 69 1a 	jmp	0x34d2	; 0x34d2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab ee       	ldi	r26, 0xEB	; 235
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 85 1a 	jmp	0x350a	; 0x350a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 75 1a 	jmp	0x34ea	; 0x34ea <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 91 1a 	jmp	0x3522	; 0x3522 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 75 1a 	jmp	0x34ea	; 0x34ea <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 91 1a 	jmp	0x3522	; 0x3522 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 69 1a 	jmp	0x34d2	; 0x34d2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8b ee       	ldi	r24, 0xEB	; 235
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 85 1a 	jmp	0x350a	; 0x350a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 75 1a 	jmp	0x34ea	; 0x34ea <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 91 1a 	jmp	0x3522	; 0x3522 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 75 1a 	jmp	0x34ea	; 0x34ea <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 91 1a 	jmp	0x3522	; 0x3522 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 75 1a 	jmp	0x34ea	; 0x34ea <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 91 1a 	jmp	0x3522	; 0x3522 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 79 1a 	jmp	0x34f2	; 0x34f2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 95 1a 	jmp	0x352a	; 0x352a <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 71 1a 	jmp	0x34e2	; 0x34e2 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__floatunsisf+0xe0>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__floatunsisf+0xbc>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__floatunsisf+0x7c>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__floatunsisf+0x74>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__floatunsisf+0x9e>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__floatunsisf+0xe0>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__floatunsisf+0xe0>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__floatunsisf+0xcc>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__floatunsisf+0xc4>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 8d 1a 	jmp	0x351a	; 0x351a <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	ed 50       	subi	r30, 0x0D	; 13
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <delayfun>:
uint16 g_ticks = 0;

/* Counter for password mismatch number */
uint8 mismatchCounter = 0;

void delayfun(uint16 delay){
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	60 97       	sbiw	r28, 0x10	; 16
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	cd bf       	out	0x3d, r28	; 61
     cea:	98 8b       	std	Y+16, r25	; 0x10
     cec:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(delay);
     cee:	8f 85       	ldd	r24, Y+15	; 0x0f
     cf0:	98 89       	ldd	r25, Y+16	; 0x10
     cf2:	cc 01       	movw	r24, r24
     cf4:	a0 e0       	ldi	r26, 0x00	; 0
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	bc 01       	movw	r22, r24
     cfa:	cd 01       	movw	r24, r26
     cfc:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
     d00:	dc 01       	movw	r26, r24
     d02:	cb 01       	movw	r24, r22
     d04:	8b 87       	std	Y+11, r24	; 0x0b
     d06:	9c 87       	std	Y+12, r25	; 0x0c
     d08:	ad 87       	std	Y+13, r26	; 0x0d
     d0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d0c:	6b 85       	ldd	r22, Y+11	; 0x0b
     d0e:	7c 85       	ldd	r23, Y+12	; 0x0c
     d10:	8d 85       	ldd	r24, Y+13	; 0x0d
     d12:	9e 85       	ldd	r25, Y+14	; 0x0e
     d14:	20 e0       	ldi	r18, 0x00	; 0
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	4a ef       	ldi	r20, 0xFA	; 250
     d1a:	54 e4       	ldi	r21, 0x44	; 68
     d1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d20:	dc 01       	movw	r26, r24
     d22:	cb 01       	movw	r24, r22
     d24:	8f 83       	std	Y+7, r24	; 0x07
     d26:	98 87       	std	Y+8, r25	; 0x08
     d28:	a9 87       	std	Y+9, r26	; 0x09
     d2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d2c:	6f 81       	ldd	r22, Y+7	; 0x07
     d2e:	78 85       	ldd	r23, Y+8	; 0x08
     d30:	89 85       	ldd	r24, Y+9	; 0x09
     d32:	9a 85       	ldd	r25, Y+10	; 0x0a
     d34:	20 e0       	ldi	r18, 0x00	; 0
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	40 e8       	ldi	r20, 0x80	; 128
     d3a:	5f e3       	ldi	r21, 0x3F	; 63
     d3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d40:	88 23       	and	r24, r24
     d42:	2c f4       	brge	.+10     	; 0xd4e <delayfun+0x78>
		__ticks = 1;
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	9e 83       	std	Y+6, r25	; 0x06
     d4a:	8d 83       	std	Y+5, r24	; 0x05
     d4c:	3f c0       	rjmp	.+126    	; 0xdcc <delayfun+0xf6>
	else if (__tmp > 65535)
     d4e:	6f 81       	ldd	r22, Y+7	; 0x07
     d50:	78 85       	ldd	r23, Y+8	; 0x08
     d52:	89 85       	ldd	r24, Y+9	; 0x09
     d54:	9a 85       	ldd	r25, Y+10	; 0x0a
     d56:	20 e0       	ldi	r18, 0x00	; 0
     d58:	3f ef       	ldi	r19, 0xFF	; 255
     d5a:	4f e7       	ldi	r20, 0x7F	; 127
     d5c:	57 e4       	ldi	r21, 0x47	; 71
     d5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d62:	18 16       	cp	r1, r24
     d64:	4c f5       	brge	.+82     	; 0xdb8 <delayfun+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d66:	6b 85       	ldd	r22, Y+11	; 0x0b
     d68:	7c 85       	ldd	r23, Y+12	; 0x0c
     d6a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d6c:	9e 85       	ldd	r25, Y+14	; 0x0e
     d6e:	20 e0       	ldi	r18, 0x00	; 0
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	40 e2       	ldi	r20, 0x20	; 32
     d74:	51 e4       	ldi	r21, 0x41	; 65
     d76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d7a:	dc 01       	movw	r26, r24
     d7c:	cb 01       	movw	r24, r22
     d7e:	bc 01       	movw	r22, r24
     d80:	cd 01       	movw	r24, r26
     d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d86:	dc 01       	movw	r26, r24
     d88:	cb 01       	movw	r24, r22
     d8a:	9e 83       	std	Y+6, r25	; 0x06
     d8c:	8d 83       	std	Y+5, r24	; 0x05
     d8e:	0f c0       	rjmp	.+30     	; 0xdae <delayfun+0xd8>
     d90:	88 ec       	ldi	r24, 0xC8	; 200
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	9c 83       	std	Y+4, r25	; 0x04
     d96:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d98:	8b 81       	ldd	r24, Y+3	; 0x03
     d9a:	9c 81       	ldd	r25, Y+4	; 0x04
     d9c:	01 97       	sbiw	r24, 0x01	; 1
     d9e:	f1 f7       	brne	.-4      	; 0xd9c <delayfun+0xc6>
     da0:	9c 83       	std	Y+4, r25	; 0x04
     da2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     da4:	8d 81       	ldd	r24, Y+5	; 0x05
     da6:	9e 81       	ldd	r25, Y+6	; 0x06
     da8:	01 97       	sbiw	r24, 0x01	; 1
     daa:	9e 83       	std	Y+6, r25	; 0x06
     dac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dae:	8d 81       	ldd	r24, Y+5	; 0x05
     db0:	9e 81       	ldd	r25, Y+6	; 0x06
     db2:	00 97       	sbiw	r24, 0x00	; 0
     db4:	69 f7       	brne	.-38     	; 0xd90 <delayfun+0xba>
     db6:	14 c0       	rjmp	.+40     	; 0xde0 <delayfun+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     db8:	6f 81       	ldd	r22, Y+7	; 0x07
     dba:	78 85       	ldd	r23, Y+8	; 0x08
     dbc:	89 85       	ldd	r24, Y+9	; 0x09
     dbe:	9a 85       	ldd	r25, Y+10	; 0x0a
     dc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dc4:	dc 01       	movw	r26, r24
     dc6:	cb 01       	movw	r24, r22
     dc8:	9e 83       	std	Y+6, r25	; 0x06
     dca:	8d 83       	std	Y+5, r24	; 0x05
     dcc:	8d 81       	ldd	r24, Y+5	; 0x05
     dce:	9e 81       	ldd	r25, Y+6	; 0x06
     dd0:	9a 83       	std	Y+2, r25	; 0x02
     dd2:	89 83       	std	Y+1, r24	; 0x01
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
     dd6:	9a 81       	ldd	r25, Y+2	; 0x02
     dd8:	01 97       	sbiw	r24, 0x01	; 1
     dda:	f1 f7       	brne	.-4      	; 0xdd8 <delayfun+0x102>
     ddc:	9a 83       	std	Y+2, r25	; 0x02
     dde:	89 83       	std	Y+1, r24	; 0x01
}
     de0:	60 96       	adiw	r28, 0x10	; 16
     de2:	0f b6       	in	r0, 0x3f	; 63
     de4:	f8 94       	cli
     de6:	de bf       	out	0x3e, r29	; 62
     de8:	0f be       	out	0x3f, r0	; 63
     dea:	cd bf       	out	0x3d, r28	; 61
     dec:	cf 91       	pop	r28
     dee:	df 91       	pop	r29
     df0:	08 95       	ret

00000df2 <Timer0_CallBack_15>:

void Timer0_CallBack_15(){
     df2:	df 93       	push	r29
     df4:	cf 93       	push	r28
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
     dfa:	2e 97       	sbiw	r28, 0x0e	; 14
     dfc:	0f b6       	in	r0, 0x3f	; 63
     dfe:	f8 94       	cli
     e00:	de bf       	out	0x3e, r29	; 62
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	cd bf       	out	0x3d, r28	; 61
	g_ticks++;
     e06:	80 91 08 02 	lds	r24, 0x0208
     e0a:	90 91 09 02 	lds	r25, 0x0209
     e0e:	01 96       	adiw	r24, 0x01	; 1
     e10:	90 93 09 02 	sts	0x0209, r25
     e14:	80 93 08 02 	sts	0x0208, r24
	if(g_ticks == 458){
     e18:	80 91 08 02 	lds	r24, 0x0208
     e1c:	90 91 09 02 	lds	r25, 0x0209
     e20:	21 e0       	ldi	r18, 0x01	; 1
     e22:	8a 3c       	cpi	r24, 0xCA	; 202
     e24:	92 07       	cpc	r25, r18
     e26:	09 f0       	breq	.+2      	; 0xe2a <Timer0_CallBack_15+0x38>
     e28:	78 c0       	rjmp	.+240    	; 0xf1a <Timer0_CallBack_15+0x128>
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	90 e8       	ldi	r25, 0x80	; 128
     e2e:	ab e3       	ldi	r26, 0x3B	; 59
     e30:	b5 e4       	ldi	r27, 0x45	; 69
     e32:	8b 87       	std	Y+11, r24	; 0x0b
     e34:	9c 87       	std	Y+12, r25	; 0x0c
     e36:	ad 87       	std	Y+13, r26	; 0x0d
     e38:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e3a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e3c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e3e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e40:	9e 85       	ldd	r25, Y+14	; 0x0e
     e42:	20 e0       	ldi	r18, 0x00	; 0
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	4a ef       	ldi	r20, 0xFA	; 250
     e48:	54 e4       	ldi	r21, 0x44	; 68
     e4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e4e:	dc 01       	movw	r26, r24
     e50:	cb 01       	movw	r24, r22
     e52:	8f 83       	std	Y+7, r24	; 0x07
     e54:	98 87       	std	Y+8, r25	; 0x08
     e56:	a9 87       	std	Y+9, r26	; 0x09
     e58:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e5a:	6f 81       	ldd	r22, Y+7	; 0x07
     e5c:	78 85       	ldd	r23, Y+8	; 0x08
     e5e:	89 85       	ldd	r24, Y+9	; 0x09
     e60:	9a 85       	ldd	r25, Y+10	; 0x0a
     e62:	20 e0       	ldi	r18, 0x00	; 0
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	40 e8       	ldi	r20, 0x80	; 128
     e68:	5f e3       	ldi	r21, 0x3F	; 63
     e6a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e6e:	88 23       	and	r24, r24
     e70:	2c f4       	brge	.+10     	; 0xe7c <Timer0_CallBack_15+0x8a>
		__ticks = 1;
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	9e 83       	std	Y+6, r25	; 0x06
     e78:	8d 83       	std	Y+5, r24	; 0x05
     e7a:	3f c0       	rjmp	.+126    	; 0xefa <Timer0_CallBack_15+0x108>
	else if (__tmp > 65535)
     e7c:	6f 81       	ldd	r22, Y+7	; 0x07
     e7e:	78 85       	ldd	r23, Y+8	; 0x08
     e80:	89 85       	ldd	r24, Y+9	; 0x09
     e82:	9a 85       	ldd	r25, Y+10	; 0x0a
     e84:	20 e0       	ldi	r18, 0x00	; 0
     e86:	3f ef       	ldi	r19, 0xFF	; 255
     e88:	4f e7       	ldi	r20, 0x7F	; 127
     e8a:	57 e4       	ldi	r21, 0x47	; 71
     e8c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e90:	18 16       	cp	r1, r24
     e92:	4c f5       	brge	.+82     	; 0xee6 <Timer0_CallBack_15+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e94:	6b 85       	ldd	r22, Y+11	; 0x0b
     e96:	7c 85       	ldd	r23, Y+12	; 0x0c
     e98:	8d 85       	ldd	r24, Y+13	; 0x0d
     e9a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	40 e2       	ldi	r20, 0x20	; 32
     ea2:	51 e4       	ldi	r21, 0x41	; 65
     ea4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ea8:	dc 01       	movw	r26, r24
     eaa:	cb 01       	movw	r24, r22
     eac:	bc 01       	movw	r22, r24
     eae:	cd 01       	movw	r24, r26
     eb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eb4:	dc 01       	movw	r26, r24
     eb6:	cb 01       	movw	r24, r22
     eb8:	9e 83       	std	Y+6, r25	; 0x06
     eba:	8d 83       	std	Y+5, r24	; 0x05
     ebc:	0f c0       	rjmp	.+30     	; 0xedc <Timer0_CallBack_15+0xea>
     ebe:	88 ec       	ldi	r24, 0xC8	; 200
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	9c 83       	std	Y+4, r25	; 0x04
     ec4:	8b 83       	std	Y+3, r24	; 0x03
     ec6:	8b 81       	ldd	r24, Y+3	; 0x03
     ec8:	9c 81       	ldd	r25, Y+4	; 0x04
     eca:	01 97       	sbiw	r24, 0x01	; 1
     ecc:	f1 f7       	brne	.-4      	; 0xeca <Timer0_CallBack_15+0xd8>
     ece:	9c 83       	std	Y+4, r25	; 0x04
     ed0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ed2:	8d 81       	ldd	r24, Y+5	; 0x05
     ed4:	9e 81       	ldd	r25, Y+6	; 0x06
     ed6:	01 97       	sbiw	r24, 0x01	; 1
     ed8:	9e 83       	std	Y+6, r25	; 0x06
     eda:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     edc:	8d 81       	ldd	r24, Y+5	; 0x05
     ede:	9e 81       	ldd	r25, Y+6	; 0x06
     ee0:	00 97       	sbiw	r24, 0x00	; 0
     ee2:	69 f7       	brne	.-38     	; 0xebe <Timer0_CallBack_15+0xcc>
     ee4:	14 c0       	rjmp	.+40     	; 0xf0e <Timer0_CallBack_15+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ee6:	6f 81       	ldd	r22, Y+7	; 0x07
     ee8:	78 85       	ldd	r23, Y+8	; 0x08
     eea:	89 85       	ldd	r24, Y+9	; 0x09
     eec:	9a 85       	ldd	r25, Y+10	; 0x0a
     eee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ef2:	dc 01       	movw	r26, r24
     ef4:	cb 01       	movw	r24, r22
     ef6:	9e 83       	std	Y+6, r25	; 0x06
     ef8:	8d 83       	std	Y+5, r24	; 0x05
     efa:	8d 81       	ldd	r24, Y+5	; 0x05
     efc:	9e 81       	ldd	r25, Y+6	; 0x06
     efe:	9a 83       	std	Y+2, r25	; 0x02
     f00:	89 83       	std	Y+1, r24	; 0x01
     f02:	89 81       	ldd	r24, Y+1	; 0x01
     f04:	9a 81       	ldd	r25, Y+2	; 0x02
     f06:	01 97       	sbiw	r24, 0x01	; 1
     f08:	f1 f7       	brne	.-4      	; 0xf06 <Timer0_CallBack_15+0x114>
     f0a:	9a 83       	std	Y+2, r25	; 0x02
     f0c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(3000);
		LCD_clearScreen();
     f0e:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_clearScreen>
		LCD_displayString("Locking");
     f12:	80 e6       	ldi	r24, 0x60	; 96
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_displayString>
	}
	if(g_ticks == 916){
     f1a:	80 91 08 02 	lds	r24, 0x0208
     f1e:	90 91 09 02 	lds	r25, 0x0209
     f22:	23 e0       	ldi	r18, 0x03	; 3
     f24:	84 39       	cpi	r24, 0x94	; 148
     f26:	92 07       	cpc	r25, r18
     f28:	21 f4       	brne	.+8      	; 0xf32 <Timer0_CallBack_15+0x140>
		LCD_clearScreen();
     f2a:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_clearScreen>
		Timer0_DeInit();
     f2e:	0e 94 40 18 	call	0x3080	; 0x3080 <Timer0_DeInit>
	}
}
     f32:	2e 96       	adiw	r28, 0x0e	; 14
     f34:	0f b6       	in	r0, 0x3f	; 63
     f36:	f8 94       	cli
     f38:	de bf       	out	0x3e, r29	; 62
     f3a:	0f be       	out	0x3f, r0	; 63
     f3c:	cd bf       	out	0x3d, r28	; 61
     f3e:	cf 91       	pop	r28
     f40:	df 91       	pop	r29
     f42:	08 95       	ret

00000f44 <CheckPassword>:

void CheckPassword(){
     f44:	0f 93       	push	r16
     f46:	1f 93       	push	r17
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	00 d0       	rcall	.+0      	; 0xf4e <CheckPassword+0xa>
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
	/* Initialize the flag to 1 */
	rightPass = 1;
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	80 93 fd 01 	sts	0x01FD, r24
	/* Ask the user for the password */
	LCD_clearScreen();
     f58:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_clearScreen>
	LCD_displayString("Enter Password :");
     f5c:	88 e6       	ldi	r24, 0x68	; 104
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_displayString>
	/* Receive keypad presses
	 * Store in an array
	 * Display password on LCD */
	for(uint8 i = 0; i<5; i++){
     f64:	1a 82       	std	Y+2, r1	; 0x02
     f66:	26 c0       	rjmp	.+76     	; 0xfb4 <CheckPassword+0x70>
		receiveString1[i] = KEYPAD_getPressedKey();
     f68:	8a 81       	ldd	r24, Y+2	; 0x02
     f6a:	08 2f       	mov	r16, r24
     f6c:	10 e0       	ldi	r17, 0x00	; 0
     f6e:	0e 94 36 11 	call	0x226c	; 0x226c <KEYPAD_getPressedKey>
     f72:	f8 01       	movw	r30, r16
     f74:	e2 50       	subi	r30, 0x02	; 2
     f76:	fe 4f       	sbci	r31, 0xFE	; 254
     f78:	80 83       	st	Z, r24
		LCD_moveCursor(1,i);
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	6a 81       	ldd	r22, Y+2	; 0x02
     f7e:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <LCD_moveCursor>
		LCD_intgerToString(receiveString1[i]);
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	88 2f       	mov	r24, r24
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	fc 01       	movw	r30, r24
     f8a:	e2 50       	subi	r30, 0x02	; 2
     f8c:	fe 4f       	sbci	r31, 0xFE	; 254
     f8e:	80 81       	ld	r24, Z
     f90:	88 2f       	mov	r24, r24
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <LCD_intgerToString>
		delayfun(300);
     f98:	8c e2       	ldi	r24, 0x2C	; 44
     f9a:	91 e0       	ldi	r25, 0x01	; 1
     f9c:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <delayfun>
		LCD_moveCursor(1,i);
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	6a 81       	ldd	r22, Y+2	; 0x02
     fa4:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <LCD_moveCursor>
		LCD_displayCharacter('*');
     fa8:	8a e2       	ldi	r24, 0x2A	; 42
     faa:	0e 94 46 14 	call	0x288c	; 0x288c <LCD_displayCharacter>
	LCD_clearScreen();
	LCD_displayString("Enter Password :");
	/* Receive keypad presses
	 * Store in an array
	 * Display password on LCD */
	for(uint8 i = 0; i<5; i++){
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	8f 5f       	subi	r24, 0xFF	; 255
     fb2:	8a 83       	std	Y+2, r24	; 0x02
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	85 30       	cpi	r24, 0x05	; 5
     fb8:	b8 f2       	brcs	.-82     	; 0xf68 <CheckPassword+0x24>
		delayfun(300);
		LCD_moveCursor(1,i);
		LCD_displayCharacter('*');
	}
	/* Wait for Enter to be pressed */
	while(KEYPAD_getPressedKey() != 13);
     fba:	0e 94 36 11 	call	0x226c	; 0x226c <KEYPAD_getPressedKey>
     fbe:	8d 30       	cpi	r24, 0x0D	; 13
     fc0:	e1 f7       	brne	.-8      	; 0xfba <CheckPassword+0x76>
	delayfun(300);
     fc2:	8c e2       	ldi	r24, 0x2C	; 44
     fc4:	91 e0       	ldi	r25, 0x01	; 1
     fc6:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <delayfun>
	/* Clear screen */
	LCD_clearScreen();
     fca:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_clearScreen>
	/* Ask for password again */
	LCD_displayString("Enter Password :");
     fce:	88 e6       	ldi	r24, 0x68	; 104
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_displayString>
	/* Receive keypad presses
	 * Store in an array
	 * Display password on LCD
	 * Check if passwords match and update flag */
	for(uint8 i = 0; i<5; i++){
     fd6:	19 82       	std	Y+1, r1	; 0x01
     fd8:	38 c0       	rjmp	.+112    	; 0x104a <CheckPassword+0x106>
		receiveString2[i] = KEYPAD_getPressedKey();
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	08 2f       	mov	r16, r24
     fde:	10 e0       	ldi	r17, 0x00	; 0
     fe0:	0e 94 36 11 	call	0x226c	; 0x226c <KEYPAD_getPressedKey>
     fe4:	f8 01       	movw	r30, r16
     fe6:	ed 5f       	subi	r30, 0xFD	; 253
     fe8:	fd 4f       	sbci	r31, 0xFD	; 253
     fea:	80 83       	st	Z, r24
		LCD_moveCursor(1,i);
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	69 81       	ldd	r22, Y+1	; 0x01
     ff0:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <LCD_moveCursor>
		LCD_intgerToString(receiveString1[i]);
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
     ff6:	88 2f       	mov	r24, r24
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	fc 01       	movw	r30, r24
     ffc:	e2 50       	subi	r30, 0x02	; 2
     ffe:	fe 4f       	sbci	r31, 0xFE	; 254
    1000:	80 81       	ld	r24, Z
    1002:	88 2f       	mov	r24, r24
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <LCD_intgerToString>
		delayfun(300);
    100a:	8c e2       	ldi	r24, 0x2C	; 44
    100c:	91 e0       	ldi	r25, 0x01	; 1
    100e:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <delayfun>
		LCD_moveCursor(1,i);
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	69 81       	ldd	r22, Y+1	; 0x01
    1016:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <LCD_moveCursor>
		LCD_displayCharacter('*');
    101a:	8a e2       	ldi	r24, 0x2A	; 42
    101c:	0e 94 46 14 	call	0x288c	; 0x288c <LCD_displayCharacter>
		if(receiveString1[i] != receiveString2[i]){
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	88 2f       	mov	r24, r24
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	fc 01       	movw	r30, r24
    1028:	e2 50       	subi	r30, 0x02	; 2
    102a:	fe 4f       	sbci	r31, 0xFE	; 254
    102c:	20 81       	ld	r18, Z
    102e:	89 81       	ldd	r24, Y+1	; 0x01
    1030:	88 2f       	mov	r24, r24
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	fc 01       	movw	r30, r24
    1036:	ed 5f       	subi	r30, 0xFD	; 253
    1038:	fd 4f       	sbci	r31, 0xFD	; 253
    103a:	80 81       	ld	r24, Z
    103c:	28 17       	cp	r18, r24
    103e:	11 f0       	breq	.+4      	; 0x1044 <CheckPassword+0x100>
			rightPass = 0;
    1040:	10 92 fd 01 	sts	0x01FD, r1
	LCD_displayString("Enter Password :");
	/* Receive keypad presses
	 * Store in an array
	 * Display password on LCD
	 * Check if passwords match and update flag */
	for(uint8 i = 0; i<5; i++){
    1044:	89 81       	ldd	r24, Y+1	; 0x01
    1046:	8f 5f       	subi	r24, 0xFF	; 255
    1048:	89 83       	std	Y+1, r24	; 0x01
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	85 30       	cpi	r24, 0x05	; 5
    104e:	28 f2       	brcs	.-118    	; 0xfda <CheckPassword+0x96>
		if(receiveString1[i] != receiveString2[i]){
			rightPass = 0;
		}
	}
	/* Wait for Enter button */
	while(KEYPAD_getPressedKey() != 13);
    1050:	0e 94 36 11 	call	0x226c	; 0x226c <KEYPAD_getPressedKey>
    1054:	8d 30       	cpi	r24, 0x0D	; 13
    1056:	e1 f7       	brne	.-8      	; 0x1050 <CheckPassword+0x10c>
}
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	cf 91       	pop	r28
    105e:	df 91       	pop	r29
    1060:	1f 91       	pop	r17
    1062:	0f 91       	pop	r16
    1064:	08 95       	ret

00001066 <GetPassword>:

void GetPassword(){
    1066:	0f 93       	push	r16
    1068:	1f 93       	push	r17
    106a:	df 93       	push	r29
    106c:	cf 93       	push	r28
    106e:	0f 92       	push	r0
    1070:	cd b7       	in	r28, 0x3d	; 61
    1072:	de b7       	in	r29, 0x3e	; 62
	/* Take the password from the user */
	for(uint8 i = 0; i<5; i++){
    1074:	19 82       	std	Y+1, r1	; 0x01
    1076:	26 c0       	rjmp	.+76     	; 0x10c4 <GetPassword+0x5e>
		receiveString1[i] = KEYPAD_getPressedKey();
    1078:	89 81       	ldd	r24, Y+1	; 0x01
    107a:	08 2f       	mov	r16, r24
    107c:	10 e0       	ldi	r17, 0x00	; 0
    107e:	0e 94 36 11 	call	0x226c	; 0x226c <KEYPAD_getPressedKey>
    1082:	f8 01       	movw	r30, r16
    1084:	e2 50       	subi	r30, 0x02	; 2
    1086:	fe 4f       	sbci	r31, 0xFE	; 254
    1088:	80 83       	st	Z, r24
		LCD_moveCursor(1,i);
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	69 81       	ldd	r22, Y+1	; 0x01
    108e:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <LCD_moveCursor>
		LCD_intgerToString(receiveString1[i]);
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	88 2f       	mov	r24, r24
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	fc 01       	movw	r30, r24
    109a:	e2 50       	subi	r30, 0x02	; 2
    109c:	fe 4f       	sbci	r31, 0xFE	; 254
    109e:	80 81       	ld	r24, Z
    10a0:	88 2f       	mov	r24, r24
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <LCD_intgerToString>
		delayfun(300);
    10a8:	8c e2       	ldi	r24, 0x2C	; 44
    10aa:	91 e0       	ldi	r25, 0x01	; 1
    10ac:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <delayfun>
		LCD_moveCursor(1,i);
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	69 81       	ldd	r22, Y+1	; 0x01
    10b4:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <LCD_moveCursor>
		LCD_displayCharacter('*');
    10b8:	8a e2       	ldi	r24, 0x2A	; 42
    10ba:	0e 94 46 14 	call	0x288c	; 0x288c <LCD_displayCharacter>
	while(KEYPAD_getPressedKey() != 13);
}

void GetPassword(){
	/* Take the password from the user */
	for(uint8 i = 0; i<5; i++){
    10be:	89 81       	ldd	r24, Y+1	; 0x01
    10c0:	8f 5f       	subi	r24, 0xFF	; 255
    10c2:	89 83       	std	Y+1, r24	; 0x01
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
    10c6:	85 30       	cpi	r24, 0x05	; 5
    10c8:	b8 f2       	brcs	.-82     	; 0x1078 <GetPassword+0x12>
		delayfun(300);
		LCD_moveCursor(1,i);
		LCD_displayCharacter('*');
	}
	/* Wait for Enter to be pressed */
	while(KEYPAD_getPressedKey() != 13);
    10ca:	0e 94 36 11 	call	0x226c	; 0x226c <KEYPAD_getPressedKey>
    10ce:	8d 30       	cpi	r24, 0x0D	; 13
    10d0:	e1 f7       	brne	.-8      	; 0x10ca <GetPassword+0x64>
}
    10d2:	0f 90       	pop	r0
    10d4:	cf 91       	pop	r28
    10d6:	df 91       	pop	r29
    10d8:	1f 91       	pop	r17
    10da:	0f 91       	pop	r16
    10dc:	08 95       	ret

000010de <main>:

int main(void){
    10de:	0f 93       	push	r16
    10e0:	1f 93       	push	r17
    10e2:	df 93       	push	r29
    10e4:	cf 93       	push	r28
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
    10ea:	cd 55       	subi	r28, 0x5D	; 93
    10ec:	d0 40       	sbci	r29, 0x00	; 0
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	f8 94       	cli
    10f2:	de bf       	out	0x3e, r29	; 62
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	cd bf       	out	0x3d, r28	; 61

	uint8 key;
	UART_init(&UARTConfig);
    10f8:	89 ef       	ldi	r24, 0xF9	; 249
    10fa:	91 e0       	ldi	r25, 0x01	; 1
    10fc:	0e 94 f5 18 	call	0x31ea	; 0x31ea <UART_init>
	LCD_init();
    1100:	0e 94 2e 12 	call	0x245c	; 0x245c <LCD_init>

	while(1){
		/* Ask the user for the password and check
		 * if it matches 2 times                   */
		CheckPassword();
    1104:	0e 94 a2 07 	call	0xf44	; 0xf44 <CheckPassword>
		/* If passwords don't match display "Wrong Password"
		 * Return to the first stage                         */
		if(!rightPass){
    1108:	80 91 fd 01 	lds	r24, 0x01FD
    110c:	88 23       	and	r24, r24
    110e:	09 f0       	breq	.+2      	; 0x1112 <main+0x34>
    1110:	bb c0       	rjmp	.+374    	; 0x1288 <main+0x1aa>
			LCD_clearScreen();
    1112:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_clearScreen>
			LCD_displayString("Wrong Password");
    1116:	89 e7       	ldi	r24, 0x79	; 121
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_displayString>
    111e:	fe 01       	movw	r30, r28
    1120:	ef 5a       	subi	r30, 0xAF	; 175
    1122:	ff 4f       	sbci	r31, 0xFF	; 255
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	90 e8       	ldi	r25, 0x80	; 128
    1128:	ab e3       	ldi	r26, 0x3B	; 59
    112a:	b5 e4       	ldi	r27, 0x45	; 69
    112c:	80 83       	st	Z, r24
    112e:	91 83       	std	Z+1, r25	; 0x01
    1130:	a2 83       	std	Z+2, r26	; 0x02
    1132:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1134:	8e 01       	movw	r16, r28
    1136:	03 5b       	subi	r16, 0xB3	; 179
    1138:	1f 4f       	sbci	r17, 0xFF	; 255
    113a:	fe 01       	movw	r30, r28
    113c:	ef 5a       	subi	r30, 0xAF	; 175
    113e:	ff 4f       	sbci	r31, 0xFF	; 255
    1140:	60 81       	ld	r22, Z
    1142:	71 81       	ldd	r23, Z+1	; 0x01
    1144:	82 81       	ldd	r24, Z+2	; 0x02
    1146:	93 81       	ldd	r25, Z+3	; 0x03
    1148:	20 e0       	ldi	r18, 0x00	; 0
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	4a ef       	ldi	r20, 0xFA	; 250
    114e:	54 e4       	ldi	r21, 0x44	; 68
    1150:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1154:	dc 01       	movw	r26, r24
    1156:	cb 01       	movw	r24, r22
    1158:	f8 01       	movw	r30, r16
    115a:	80 83       	st	Z, r24
    115c:	91 83       	std	Z+1, r25	; 0x01
    115e:	a2 83       	std	Z+2, r26	; 0x02
    1160:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1162:	fe 01       	movw	r30, r28
    1164:	e3 5b       	subi	r30, 0xB3	; 179
    1166:	ff 4f       	sbci	r31, 0xFF	; 255
    1168:	60 81       	ld	r22, Z
    116a:	71 81       	ldd	r23, Z+1	; 0x01
    116c:	82 81       	ldd	r24, Z+2	; 0x02
    116e:	93 81       	ldd	r25, Z+3	; 0x03
    1170:	20 e0       	ldi	r18, 0x00	; 0
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	40 e8       	ldi	r20, 0x80	; 128
    1176:	5f e3       	ldi	r21, 0x3F	; 63
    1178:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    117c:	88 23       	and	r24, r24
    117e:	44 f4       	brge	.+16     	; 0x1190 <main+0xb2>
		__ticks = 1;
    1180:	fe 01       	movw	r30, r28
    1182:	e5 5b       	subi	r30, 0xB5	; 181
    1184:	ff 4f       	sbci	r31, 0xFF	; 255
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	91 83       	std	Z+1, r25	; 0x01
    118c:	80 83       	st	Z, r24
    118e:	64 c0       	rjmp	.+200    	; 0x1258 <main+0x17a>
	else if (__tmp > 65535)
    1190:	fe 01       	movw	r30, r28
    1192:	e3 5b       	subi	r30, 0xB3	; 179
    1194:	ff 4f       	sbci	r31, 0xFF	; 255
    1196:	60 81       	ld	r22, Z
    1198:	71 81       	ldd	r23, Z+1	; 0x01
    119a:	82 81       	ldd	r24, Z+2	; 0x02
    119c:	93 81       	ldd	r25, Z+3	; 0x03
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	3f ef       	ldi	r19, 0xFF	; 255
    11a2:	4f e7       	ldi	r20, 0x7F	; 127
    11a4:	57 e4       	ldi	r21, 0x47	; 71
    11a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11aa:	18 16       	cp	r1, r24
    11ac:	0c f0       	brlt	.+2      	; 0x11b0 <main+0xd2>
    11ae:	43 c0       	rjmp	.+134    	; 0x1236 <main+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11b0:	fe 01       	movw	r30, r28
    11b2:	ef 5a       	subi	r30, 0xAF	; 175
    11b4:	ff 4f       	sbci	r31, 0xFF	; 255
    11b6:	60 81       	ld	r22, Z
    11b8:	71 81       	ldd	r23, Z+1	; 0x01
    11ba:	82 81       	ldd	r24, Z+2	; 0x02
    11bc:	93 81       	ldd	r25, Z+3	; 0x03
    11be:	20 e0       	ldi	r18, 0x00	; 0
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	40 e2       	ldi	r20, 0x20	; 32
    11c4:	51 e4       	ldi	r21, 0x41	; 65
    11c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ca:	dc 01       	movw	r26, r24
    11cc:	cb 01       	movw	r24, r22
    11ce:	8e 01       	movw	r16, r28
    11d0:	05 5b       	subi	r16, 0xB5	; 181
    11d2:	1f 4f       	sbci	r17, 0xFF	; 255
    11d4:	bc 01       	movw	r22, r24
    11d6:	cd 01       	movw	r24, r26
    11d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11dc:	dc 01       	movw	r26, r24
    11de:	cb 01       	movw	r24, r22
    11e0:	f8 01       	movw	r30, r16
    11e2:	91 83       	std	Z+1, r25	; 0x01
    11e4:	80 83       	st	Z, r24
    11e6:	1f c0       	rjmp	.+62     	; 0x1226 <main+0x148>
    11e8:	fe 01       	movw	r30, r28
    11ea:	e7 5b       	subi	r30, 0xB7	; 183
    11ec:	ff 4f       	sbci	r31, 0xFF	; 255
    11ee:	88 ec       	ldi	r24, 0xC8	; 200
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	91 83       	std	Z+1, r25	; 0x01
    11f4:	80 83       	st	Z, r24
    11f6:	fe 01       	movw	r30, r28
    11f8:	e7 5b       	subi	r30, 0xB7	; 183
    11fa:	ff 4f       	sbci	r31, 0xFF	; 255
    11fc:	80 81       	ld	r24, Z
    11fe:	91 81       	ldd	r25, Z+1	; 0x01
    1200:	01 97       	sbiw	r24, 0x01	; 1
    1202:	f1 f7       	brne	.-4      	; 0x1200 <main+0x122>
    1204:	fe 01       	movw	r30, r28
    1206:	e7 5b       	subi	r30, 0xB7	; 183
    1208:	ff 4f       	sbci	r31, 0xFF	; 255
    120a:	91 83       	std	Z+1, r25	; 0x01
    120c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    120e:	de 01       	movw	r26, r28
    1210:	a5 5b       	subi	r26, 0xB5	; 181
    1212:	bf 4f       	sbci	r27, 0xFF	; 255
    1214:	fe 01       	movw	r30, r28
    1216:	e5 5b       	subi	r30, 0xB5	; 181
    1218:	ff 4f       	sbci	r31, 0xFF	; 255
    121a:	80 81       	ld	r24, Z
    121c:	91 81       	ldd	r25, Z+1	; 0x01
    121e:	01 97       	sbiw	r24, 0x01	; 1
    1220:	11 96       	adiw	r26, 0x01	; 1
    1222:	9c 93       	st	X, r25
    1224:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1226:	fe 01       	movw	r30, r28
    1228:	e5 5b       	subi	r30, 0xB5	; 181
    122a:	ff 4f       	sbci	r31, 0xFF	; 255
    122c:	80 81       	ld	r24, Z
    122e:	91 81       	ldd	r25, Z+1	; 0x01
    1230:	00 97       	sbiw	r24, 0x00	; 0
    1232:	d1 f6       	brne	.-76     	; 0x11e8 <main+0x10a>
    1234:	67 cf       	rjmp	.-306    	; 0x1104 <main+0x26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1236:	8e 01       	movw	r16, r28
    1238:	05 5b       	subi	r16, 0xB5	; 181
    123a:	1f 4f       	sbci	r17, 0xFF	; 255
    123c:	fe 01       	movw	r30, r28
    123e:	e3 5b       	subi	r30, 0xB3	; 179
    1240:	ff 4f       	sbci	r31, 0xFF	; 255
    1242:	60 81       	ld	r22, Z
    1244:	71 81       	ldd	r23, Z+1	; 0x01
    1246:	82 81       	ldd	r24, Z+2	; 0x02
    1248:	93 81       	ldd	r25, Z+3	; 0x03
    124a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    124e:	dc 01       	movw	r26, r24
    1250:	cb 01       	movw	r24, r22
    1252:	f8 01       	movw	r30, r16
    1254:	91 83       	std	Z+1, r25	; 0x01
    1256:	80 83       	st	Z, r24
    1258:	de 01       	movw	r26, r28
    125a:	a9 5b       	subi	r26, 0xB9	; 185
    125c:	bf 4f       	sbci	r27, 0xFF	; 255
    125e:	fe 01       	movw	r30, r28
    1260:	e5 5b       	subi	r30, 0xB5	; 181
    1262:	ff 4f       	sbci	r31, 0xFF	; 255
    1264:	80 81       	ld	r24, Z
    1266:	91 81       	ldd	r25, Z+1	; 0x01
    1268:	11 96       	adiw	r26, 0x01	; 1
    126a:	9c 93       	st	X, r25
    126c:	8e 93       	st	-X, r24
    126e:	fe 01       	movw	r30, r28
    1270:	e9 5b       	subi	r30, 0xB9	; 185
    1272:	ff 4f       	sbci	r31, 0xFF	; 255
    1274:	80 81       	ld	r24, Z
    1276:	91 81       	ldd	r25, Z+1	; 0x01
    1278:	01 97       	sbiw	r24, 0x01	; 1
    127a:	f1 f7       	brne	.-4      	; 0x1278 <main+0x19a>
    127c:	fe 01       	movw	r30, r28
    127e:	e9 5b       	subi	r30, 0xB9	; 185
    1280:	ff 4f       	sbci	r31, 0xFF	; 255
    1282:	91 83       	std	Z+1, r25	; 0x01
    1284:	80 83       	st	Z, r24
    1286:	3e cf       	rjmp	.-388    	; 0x1104 <main+0x26>
			_delay_ms(3000);
			continue;
		}
		/* If passwords match, display Matched */
		LCD_clearScreen();
    1288:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_clearScreen>
		LCD_displayString("Matched");
    128c:	88 e8       	ldi	r24, 0x88	; 136
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_displayString>
    1294:	fe 01       	movw	r30, r28
    1296:	ed 5b       	subi	r30, 0xBD	; 189
    1298:	ff 4f       	sbci	r31, 0xFF	; 255
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	aa ef       	ldi	r26, 0xFA	; 250
    12a0:	b4 e4       	ldi	r27, 0x44	; 68
    12a2:	80 83       	st	Z, r24
    12a4:	91 83       	std	Z+1, r25	; 0x01
    12a6:	a2 83       	std	Z+2, r26	; 0x02
    12a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12aa:	8e 01       	movw	r16, r28
    12ac:	01 5c       	subi	r16, 0xC1	; 193
    12ae:	1f 4f       	sbci	r17, 0xFF	; 255
    12b0:	fe 01       	movw	r30, r28
    12b2:	ed 5b       	subi	r30, 0xBD	; 189
    12b4:	ff 4f       	sbci	r31, 0xFF	; 255
    12b6:	60 81       	ld	r22, Z
    12b8:	71 81       	ldd	r23, Z+1	; 0x01
    12ba:	82 81       	ldd	r24, Z+2	; 0x02
    12bc:	93 81       	ldd	r25, Z+3	; 0x03
    12be:	20 e0       	ldi	r18, 0x00	; 0
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	4a ef       	ldi	r20, 0xFA	; 250
    12c4:	54 e4       	ldi	r21, 0x44	; 68
    12c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ca:	dc 01       	movw	r26, r24
    12cc:	cb 01       	movw	r24, r22
    12ce:	f8 01       	movw	r30, r16
    12d0:	80 83       	st	Z, r24
    12d2:	91 83       	std	Z+1, r25	; 0x01
    12d4:	a2 83       	std	Z+2, r26	; 0x02
    12d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12d8:	fe 01       	movw	r30, r28
    12da:	ff 96       	adiw	r30, 0x3f	; 63
    12dc:	60 81       	ld	r22, Z
    12de:	71 81       	ldd	r23, Z+1	; 0x01
    12e0:	82 81       	ldd	r24, Z+2	; 0x02
    12e2:	93 81       	ldd	r25, Z+3	; 0x03
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	40 e8       	ldi	r20, 0x80	; 128
    12ea:	5f e3       	ldi	r21, 0x3F	; 63
    12ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12f0:	88 23       	and	r24, r24
    12f2:	2c f4       	brge	.+10     	; 0x12fe <main+0x220>
		__ticks = 1;
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	9e af       	std	Y+62, r25	; 0x3e
    12fa:	8d af       	std	Y+61, r24	; 0x3d
    12fc:	46 c0       	rjmp	.+140    	; 0x138a <main+0x2ac>
	else if (__tmp > 65535)
    12fe:	fe 01       	movw	r30, r28
    1300:	ff 96       	adiw	r30, 0x3f	; 63
    1302:	60 81       	ld	r22, Z
    1304:	71 81       	ldd	r23, Z+1	; 0x01
    1306:	82 81       	ldd	r24, Z+2	; 0x02
    1308:	93 81       	ldd	r25, Z+3	; 0x03
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	3f ef       	ldi	r19, 0xFF	; 255
    130e:	4f e7       	ldi	r20, 0x7F	; 127
    1310:	57 e4       	ldi	r21, 0x47	; 71
    1312:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1316:	18 16       	cp	r1, r24
    1318:	64 f5       	brge	.+88     	; 0x1372 <main+0x294>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    131a:	fe 01       	movw	r30, r28
    131c:	ed 5b       	subi	r30, 0xBD	; 189
    131e:	ff 4f       	sbci	r31, 0xFF	; 255
    1320:	60 81       	ld	r22, Z
    1322:	71 81       	ldd	r23, Z+1	; 0x01
    1324:	82 81       	ldd	r24, Z+2	; 0x02
    1326:	93 81       	ldd	r25, Z+3	; 0x03
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	40 e2       	ldi	r20, 0x20	; 32
    132e:	51 e4       	ldi	r21, 0x41	; 65
    1330:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1334:	dc 01       	movw	r26, r24
    1336:	cb 01       	movw	r24, r22
    1338:	bc 01       	movw	r22, r24
    133a:	cd 01       	movw	r24, r26
    133c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1340:	dc 01       	movw	r26, r24
    1342:	cb 01       	movw	r24, r22
    1344:	9e af       	std	Y+62, r25	; 0x3e
    1346:	8d af       	std	Y+61, r24	; 0x3d
    1348:	0f c0       	rjmp	.+30     	; 0x1368 <main+0x28a>
    134a:	88 ec       	ldi	r24, 0xC8	; 200
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	9c af       	std	Y+60, r25	; 0x3c
    1350:	8b af       	std	Y+59, r24	; 0x3b
    1352:	8b ad       	ldd	r24, Y+59	; 0x3b
    1354:	9c ad       	ldd	r25, Y+60	; 0x3c
    1356:	01 97       	sbiw	r24, 0x01	; 1
    1358:	f1 f7       	brne	.-4      	; 0x1356 <main+0x278>
    135a:	9c af       	std	Y+60, r25	; 0x3c
    135c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    135e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1360:	9e ad       	ldd	r25, Y+62	; 0x3e
    1362:	01 97       	sbiw	r24, 0x01	; 1
    1364:	9e af       	std	Y+62, r25	; 0x3e
    1366:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1368:	8d ad       	ldd	r24, Y+61	; 0x3d
    136a:	9e ad       	ldd	r25, Y+62	; 0x3e
    136c:	00 97       	sbiw	r24, 0x00	; 0
    136e:	69 f7       	brne	.-38     	; 0x134a <main+0x26c>
    1370:	16 c0       	rjmp	.+44     	; 0x139e <main+0x2c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1372:	fe 01       	movw	r30, r28
    1374:	ff 96       	adiw	r30, 0x3f	; 63
    1376:	60 81       	ld	r22, Z
    1378:	71 81       	ldd	r23, Z+1	; 0x01
    137a:	82 81       	ldd	r24, Z+2	; 0x02
    137c:	93 81       	ldd	r25, Z+3	; 0x03
    137e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1382:	dc 01       	movw	r26, r24
    1384:	cb 01       	movw	r24, r22
    1386:	9e af       	std	Y+62, r25	; 0x3e
    1388:	8d af       	std	Y+61, r24	; 0x3d
    138a:	8d ad       	ldd	r24, Y+61	; 0x3d
    138c:	9e ad       	ldd	r25, Y+62	; 0x3e
    138e:	9a af       	std	Y+58, r25	; 0x3a
    1390:	89 af       	std	Y+57, r24	; 0x39
    1392:	89 ad       	ldd	r24, Y+57	; 0x39
    1394:	9a ad       	ldd	r25, Y+58	; 0x3a
    1396:	01 97       	sbiw	r24, 0x01	; 1
    1398:	f1 f7       	brne	.-4      	; 0x1396 <main+0x2b8>
    139a:	9a af       	std	Y+58, r25	; 0x3a
    139c:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(2000);
		LCD_clearScreen();
    139e:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_clearScreen>
		/* Send a READY symbol to indicate that
		 * the MCU is ready to send the password
		 * and wait for the respond with the same symbol  */
		UART_sendByte(READY);
    13a2:	84 e2       	ldi	r24, 0x24	; 36
    13a4:	0e 94 8e 19 	call	0x331c	; 0x331c <UART_sendByte>
		UART_recieveByte();
    13a8:	0e 94 a5 19 	call	0x334a	; 0x334a <UART_recieveByte>
		/* Send the correct password */
		for(uint8 i = 0; i<5; i++){
    13ac:	fe 01       	movw	r30, r28
    13ae:	e6 5a       	subi	r30, 0xA6	; 166
    13b0:	ff 4f       	sbci	r31, 0xFF	; 255
    13b2:	10 82       	st	Z, r1
    13b4:	19 c0       	rjmp	.+50     	; 0x13e8 <main+0x30a>
			UART_sendByte(receiveString1[i]);
    13b6:	fe 01       	movw	r30, r28
    13b8:	e6 5a       	subi	r30, 0xA6	; 166
    13ba:	ff 4f       	sbci	r31, 0xFF	; 255
    13bc:	80 81       	ld	r24, Z
    13be:	88 2f       	mov	r24, r24
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	fc 01       	movw	r30, r24
    13c4:	e2 50       	subi	r30, 0x02	; 2
    13c6:	fe 4f       	sbci	r31, 0xFE	; 254
    13c8:	80 81       	ld	r24, Z
    13ca:	0e 94 8e 19 	call	0x331c	; 0x331c <UART_sendByte>
			delayfun(300);
    13ce:	8c e2       	ldi	r24, 0x2C	; 44
    13d0:	91 e0       	ldi	r25, 0x01	; 1
    13d2:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <delayfun>
		 * the MCU is ready to send the password
		 * and wait for the respond with the same symbol  */
		UART_sendByte(READY);
		UART_recieveByte();
		/* Send the correct password */
		for(uint8 i = 0; i<5; i++){
    13d6:	de 01       	movw	r26, r28
    13d8:	a6 5a       	subi	r26, 0xA6	; 166
    13da:	bf 4f       	sbci	r27, 0xFF	; 255
    13dc:	fe 01       	movw	r30, r28
    13de:	e6 5a       	subi	r30, 0xA6	; 166
    13e0:	ff 4f       	sbci	r31, 0xFF	; 255
    13e2:	80 81       	ld	r24, Z
    13e4:	8f 5f       	subi	r24, 0xFF	; 255
    13e6:	8c 93       	st	X, r24
    13e8:	fe 01       	movw	r30, r28
    13ea:	e6 5a       	subi	r30, 0xA6	; 166
    13ec:	ff 4f       	sbci	r31, 0xFF	; 255
    13ee:	80 81       	ld	r24, Z
    13f0:	85 30       	cpi	r24, 0x05	; 5
    13f2:	08 f3       	brcs	.-62     	; 0x13b6 <main+0x2d8>
			UART_sendByte(receiveString1[i]);
			delayfun(300);
			}
		while(1){
		/* Display Options menu */
		LCD_clearScreen();
    13f4:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_clearScreen>
		LCD_displayString("+ : Open Door");
    13f8:	80 e9       	ldi	r24, 0x90	; 144
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_displayString>
		LCD_displayStringRowColumn(1,0,"- : Change Pass");
    1400:	2e e9       	ldi	r18, 0x9E	; 158
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	60 e0       	ldi	r22, 0x00	; 0
    1408:	a9 01       	movw	r20, r18
    140a:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <LCD_displayStringRowColumn>
		/* Get the key corresponding to
		 * the desired option           */
		key = KEYPAD_getPressedKey();
    140e:	0e 94 36 11 	call	0x226c	; 0x226c <KEYPAD_getPressedKey>
    1412:	fe 01       	movw	r30, r28
    1414:	e5 5a       	subi	r30, 0xA5	; 165
    1416:	ff 4f       	sbci	r31, 0xFF	; 255
    1418:	80 83       	st	Z, r24
    141a:	06 c0       	rjmp	.+12     	; 0x1428 <main+0x34a>
		/* Wait until the key is pressed */
		while(key != '+' && key != '-'){
			key = KEYPAD_getPressedKey();
    141c:	0e 94 36 11 	call	0x226c	; 0x226c <KEYPAD_getPressedKey>
    1420:	fe 01       	movw	r30, r28
    1422:	e5 5a       	subi	r30, 0xA5	; 165
    1424:	ff 4f       	sbci	r31, 0xFF	; 255
    1426:	80 83       	st	Z, r24
		LCD_displayStringRowColumn(1,0,"- : Change Pass");
		/* Get the key corresponding to
		 * the desired option           */
		key = KEYPAD_getPressedKey();
		/* Wait until the key is pressed */
		while(key != '+' && key != '-'){
    1428:	fe 01       	movw	r30, r28
    142a:	e5 5a       	subi	r30, 0xA5	; 165
    142c:	ff 4f       	sbci	r31, 0xFF	; 255
    142e:	80 81       	ld	r24, Z
    1430:	8b 32       	cpi	r24, 0x2B	; 43
    1432:	31 f0       	breq	.+12     	; 0x1440 <main+0x362>
    1434:	fe 01       	movw	r30, r28
    1436:	e5 5a       	subi	r30, 0xA5	; 165
    1438:	ff 4f       	sbci	r31, 0xFF	; 255
    143a:	80 81       	ld	r24, Z
    143c:	8d 32       	cpi	r24, 0x2D	; 45
    143e:	71 f7       	brne	.-36     	; 0x141c <main+0x33e>
			key = KEYPAD_getPressedKey();
		}
		delayfun(300);
    1440:	8c e2       	ldi	r24, 0x2C	; 44
    1442:	91 e0       	ldi	r25, 0x01	; 1
    1444:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <delayfun>
		/* Send signals to Control ECU indicating
		 * the chosen option                      */
		switch(key){
    1448:	fe 01       	movw	r30, r28
    144a:	e5 5a       	subi	r30, 0xA5	; 165
    144c:	ff 4f       	sbci	r31, 0xFF	; 255
    144e:	80 81       	ld	r24, Z
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	6e 96       	adiw	r28, 0x1e	; 30
    1456:	3f af       	std	Y+63, r19	; 0x3f
    1458:	2e af       	std	Y+62, r18	; 0x3e
    145a:	6e 97       	sbiw	r28, 0x1e	; 30
    145c:	6e 96       	adiw	r28, 0x1e	; 30
    145e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1460:	9f ad       	ldd	r25, Y+63	; 0x3f
    1462:	6e 97       	sbiw	r28, 0x1e	; 30
    1464:	8b 32       	cpi	r24, 0x2B	; 43
    1466:	91 05       	cpc	r25, r1
    1468:	49 f0       	breq	.+18     	; 0x147c <main+0x39e>
    146a:	6e 96       	adiw	r28, 0x1e	; 30
    146c:	ee ad       	ldd	r30, Y+62	; 0x3e
    146e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1470:	6e 97       	sbiw	r28, 0x1e	; 30
    1472:	ed 32       	cpi	r30, 0x2D	; 45
    1474:	f1 05       	cpc	r31, r1
    1476:	09 f4       	brne	.+2      	; 0x147a <main+0x39c>
    1478:	79 c0       	rjmp	.+242    	; 0x156c <main+0x48e>
    147a:	bc cf       	rjmp	.-136    	; 0x13f4 <main+0x316>
		case '+' : {
			uint8 success;
			/* Ask for the password */
			LCD_clearScreen();
    147c:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_clearScreen>
			LCD_displayString("Enter password :");
    1480:	8e ea       	ldi	r24, 0xAE	; 174
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_displayString>
			/* Send signal to control MCU indicating
			 * the chosen option                     */
			UART_sendByte('+');
    1488:	8b e2       	ldi	r24, 0x2B	; 43
    148a:	0e 94 8e 19 	call	0x331c	; 0x331c <UART_sendByte>
			delayfun(100);
    148e:	84 e6       	ldi	r24, 0x64	; 100
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <delayfun>
			GetPassword();
    1496:	0e 94 33 08 	call	0x1066	; 0x1066 <GetPassword>
			/* Send the password to control MCU
			 * for check                        */
			for(uint8 i = 0; i<5; i++){
    149a:	fe 01       	movw	r30, r28
    149c:	e8 5a       	subi	r30, 0xA8	; 168
    149e:	ff 4f       	sbci	r31, 0xFF	; 255
    14a0:	10 82       	st	Z, r1
    14a2:	15 c0       	rjmp	.+42     	; 0x14ce <main+0x3f0>
				UART_sendByte(receiveString1[i]);
    14a4:	fe 01       	movw	r30, r28
    14a6:	e8 5a       	subi	r30, 0xA8	; 168
    14a8:	ff 4f       	sbci	r31, 0xFF	; 255
    14aa:	80 81       	ld	r24, Z
    14ac:	88 2f       	mov	r24, r24
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	fc 01       	movw	r30, r24
    14b2:	e2 50       	subi	r30, 0x02	; 2
    14b4:	fe 4f       	sbci	r31, 0xFE	; 254
    14b6:	80 81       	ld	r24, Z
    14b8:	0e 94 8e 19 	call	0x331c	; 0x331c <UART_sendByte>
			UART_sendByte('+');
			delayfun(100);
			GetPassword();
			/* Send the password to control MCU
			 * for check                        */
			for(uint8 i = 0; i<5; i++){
    14bc:	de 01       	movw	r26, r28
    14be:	a8 5a       	subi	r26, 0xA8	; 168
    14c0:	bf 4f       	sbci	r27, 0xFF	; 255
    14c2:	fe 01       	movw	r30, r28
    14c4:	e8 5a       	subi	r30, 0xA8	; 168
    14c6:	ff 4f       	sbci	r31, 0xFF	; 255
    14c8:	80 81       	ld	r24, Z
    14ca:	8f 5f       	subi	r24, 0xFF	; 255
    14cc:	8c 93       	st	X, r24
    14ce:	fe 01       	movw	r30, r28
    14d0:	e8 5a       	subi	r30, 0xA8	; 168
    14d2:	ff 4f       	sbci	r31, 0xFF	; 255
    14d4:	80 81       	ld	r24, Z
    14d6:	85 30       	cpi	r24, 0x05	; 5
    14d8:	28 f3       	brcs	.-54     	; 0x14a4 <main+0x3c6>
				UART_sendByte(receiveString1[i]);
				}
			/* Get the check result */
			success = UART_recieveByte();
    14da:	0e 94 a5 19 	call	0x334a	; 0x334a <UART_recieveByte>
    14de:	fe 01       	movw	r30, r28
    14e0:	e7 5a       	subi	r30, 0xA7	; 167
    14e2:	ff 4f       	sbci	r31, 0xFF	; 255
    14e4:	80 83       	st	Z, r24
			/* If passwords match, Display : "Unlocking"
			 * for 15 seconds, then locking for 15 seconds */
			if(success == '+'){
    14e6:	fe 01       	movw	r30, r28
    14e8:	e7 5a       	subi	r30, 0xA7	; 167
    14ea:	ff 4f       	sbci	r31, 0xFF	; 255
    14ec:	80 81       	ld	r24, Z
    14ee:	8b 32       	cpi	r24, 0x2B	; 43
    14f0:	91 f4       	brne	.+36     	; 0x1516 <main+0x438>
				UART_sendByte('+');
    14f2:	8b e2       	ldi	r24, 0x2B	; 43
    14f4:	0e 94 8e 19 	call	0x331c	; 0x331c <UART_sendByte>
				Timer0_SetCallback(Timer0_CallBack_15);
    14f8:	89 ef       	ldi	r24, 0xF9	; 249
    14fa:	96 e0       	ldi	r25, 0x06	; 6
    14fc:	0e 94 2e 18 	call	0x305c	; 0x305c <Timer0_SetCallback>
				Timer0_Init(&TimerConfig);
    1500:	83 ef       	ldi	r24, 0xF3	; 243
    1502:	91 e0       	ldi	r25, 0x01	; 1
    1504:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <Timer0_Init>
				LCD_clearScreen();
    1508:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_clearScreen>
				LCD_displayString("Unlocking");
    150c:	8f eb       	ldi	r24, 0xBF	; 191
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_displayString>
    1514:	6f cf       	rjmp	.-290    	; 0x13f4 <main+0x316>

			}
			else if (success == FAIL){
    1516:	fe 01       	movw	r30, r28
    1518:	e7 5a       	subi	r30, 0xA7	; 167
    151a:	ff 4f       	sbci	r31, 0xFF	; 255
    151c:	80 81       	ld	r24, Z
    151e:	80 34       	cpi	r24, 0x40	; 64
    1520:	09 f0       	breq	.+2      	; 0x1524 <main+0x446>
    1522:	68 cf       	rjmp	.-304    	; 0x13f4 <main+0x316>
				mismatchCounter++;
    1524:	80 91 0a 02 	lds	r24, 0x020A
    1528:	8f 5f       	subi	r24, 0xFF	; 255
    152a:	80 93 0a 02 	sts	0x020A, r24
					if(mismatchCounter == 3){
    152e:	80 91 0a 02 	lds	r24, 0x020A
    1532:	83 30       	cpi	r24, 0x03	; 3
    1534:	81 f4       	brne	.+32     	; 0x1556 <main+0x478>
						mismatchCounter = 0;
    1536:	10 92 0a 02 	sts	0x020A, r1
						UART_sendByte(DANGER);
    153a:	86 e2       	ldi	r24, 0x26	; 38
    153c:	0e 94 8e 19 	call	0x331c	; 0x331c <UART_sendByte>
						LCD_clearScreen();
    1540:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_clearScreen>
						LCD_displayString("Error : Mismatch");
    1544:	89 ec       	ldi	r24, 0xC9	; 201
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_displayString>
						delayfun(5000);
    154c:	88 e8       	ldi	r24, 0x88	; 136
    154e:	93 e1       	ldi	r25, 0x13	; 19
    1550:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <delayfun>
    1554:	4f cf       	rjmp	.-354    	; 0x13f4 <main+0x316>
					}
					else{
						LCD_clearScreen();
    1556:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_clearScreen>
						LCD_displayString("Wrong Password");
    155a:	89 e7       	ldi	r24, 0x79	; 121
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_displayString>
						delayfun(2000);
    1562:	80 ed       	ldi	r24, 0xD0	; 208
    1564:	97 e0       	ldi	r25, 0x07	; 7
    1566:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <delayfun>
    156a:	44 cf       	rjmp	.-376    	; 0x13f4 <main+0x316>
		}

		case '-' : {
			uint8 success;
			/* Ask for the password */
			LCD_clearScreen();
    156c:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_clearScreen>
			LCD_displayString("Enter password :");
    1570:	8e ea       	ldi	r24, 0xAE	; 174
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_displayString>
			/* Send signal to control MCU indicating
			 * the chosen option                     */
			UART_sendByte('-');
    1578:	8d e2       	ldi	r24, 0x2D	; 45
    157a:	0e 94 8e 19 	call	0x331c	; 0x331c <UART_sendByte>
			GetPassword();
    157e:	0e 94 33 08 	call	0x1066	; 0x1066 <GetPassword>
			/* Send the password to control MCU
			 * for check                        */
			for(uint8 i = 0; i<5; i++){
    1582:	fe 01       	movw	r30, r28
    1584:	ea 5a       	subi	r30, 0xAA	; 170
    1586:	ff 4f       	sbci	r31, 0xFF	; 255
    1588:	10 82       	st	Z, r1
    158a:	15 c0       	rjmp	.+42     	; 0x15b6 <main+0x4d8>
				UART_sendByte(receiveString1[i]);
    158c:	fe 01       	movw	r30, r28
    158e:	ea 5a       	subi	r30, 0xAA	; 170
    1590:	ff 4f       	sbci	r31, 0xFF	; 255
    1592:	80 81       	ld	r24, Z
    1594:	88 2f       	mov	r24, r24
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	fc 01       	movw	r30, r24
    159a:	e2 50       	subi	r30, 0x02	; 2
    159c:	fe 4f       	sbci	r31, 0xFE	; 254
    159e:	80 81       	ld	r24, Z
    15a0:	0e 94 8e 19 	call	0x331c	; 0x331c <UART_sendByte>
			 * the chosen option                     */
			UART_sendByte('-');
			GetPassword();
			/* Send the password to control MCU
			 * for check                        */
			for(uint8 i = 0; i<5; i++){
    15a4:	de 01       	movw	r26, r28
    15a6:	aa 5a       	subi	r26, 0xAA	; 170
    15a8:	bf 4f       	sbci	r27, 0xFF	; 255
    15aa:	fe 01       	movw	r30, r28
    15ac:	ea 5a       	subi	r30, 0xAA	; 170
    15ae:	ff 4f       	sbci	r31, 0xFF	; 255
    15b0:	80 81       	ld	r24, Z
    15b2:	8f 5f       	subi	r24, 0xFF	; 255
    15b4:	8c 93       	st	X, r24
    15b6:	fe 01       	movw	r30, r28
    15b8:	ea 5a       	subi	r30, 0xAA	; 170
    15ba:	ff 4f       	sbci	r31, 0xFF	; 255
    15bc:	80 81       	ld	r24, Z
    15be:	85 30       	cpi	r24, 0x05	; 5
    15c0:	28 f3       	brcs	.-54     	; 0x158c <main+0x4ae>
				UART_sendByte(receiveString1[i]);
				}
			/* Get the check result */
			success = UART_recieveByte();
    15c2:	0e 94 a5 19 	call	0x334a	; 0x334a <UART_recieveByte>
    15c6:	fe 01       	movw	r30, r28
    15c8:	e9 5a       	subi	r30, 0xA9	; 169
    15ca:	ff 4f       	sbci	r31, 0xFF	; 255
    15cc:	80 83       	st	Z, r24
			/* If correct password, ask for the new password */
			if(success == '-'){
    15ce:	fe 01       	movw	r30, r28
    15d0:	e9 5a       	subi	r30, 0xA9	; 169
    15d2:	ff 4f       	sbci	r31, 0xFF	; 255
    15d4:	80 81       	ld	r24, Z
    15d6:	8d 32       	cpi	r24, 0x2D	; 45
    15d8:	09 f0       	breq	.+2      	; 0x15dc <main+0x4fe>
    15da:	14 c2       	rjmp	.+1064   	; 0x1a04 <main+0x926>
				LCD_clearScreen();
    15dc:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_clearScreen>
				LCD_displayString("Correct Password");
    15e0:	8a ed       	ldi	r24, 0xDA	; 218
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_displayString>
    15e8:	80 e0       	ldi	r24, 0x00	; 0
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	aa e7       	ldi	r26, 0x7A	; 122
    15ee:	b4 e4       	ldi	r27, 0x44	; 68
    15f0:	8d ab       	std	Y+53, r24	; 0x35
    15f2:	9e ab       	std	Y+54, r25	; 0x36
    15f4:	af ab       	std	Y+55, r26	; 0x37
    15f6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15f8:	6d a9       	ldd	r22, Y+53	; 0x35
    15fa:	7e a9       	ldd	r23, Y+54	; 0x36
    15fc:	8f a9       	ldd	r24, Y+55	; 0x37
    15fe:	98 ad       	ldd	r25, Y+56	; 0x38
    1600:	20 e0       	ldi	r18, 0x00	; 0
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	4a ef       	ldi	r20, 0xFA	; 250
    1606:	54 e4       	ldi	r21, 0x44	; 68
    1608:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    160c:	dc 01       	movw	r26, r24
    160e:	cb 01       	movw	r24, r22
    1610:	89 ab       	std	Y+49, r24	; 0x31
    1612:	9a ab       	std	Y+50, r25	; 0x32
    1614:	ab ab       	std	Y+51, r26	; 0x33
    1616:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1618:	69 a9       	ldd	r22, Y+49	; 0x31
    161a:	7a a9       	ldd	r23, Y+50	; 0x32
    161c:	8b a9       	ldd	r24, Y+51	; 0x33
    161e:	9c a9       	ldd	r25, Y+52	; 0x34
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	40 e8       	ldi	r20, 0x80	; 128
    1626:	5f e3       	ldi	r21, 0x3F	; 63
    1628:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    162c:	88 23       	and	r24, r24
    162e:	2c f4       	brge	.+10     	; 0x163a <main+0x55c>
		__ticks = 1;
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	98 ab       	std	Y+48, r25	; 0x30
    1636:	8f a7       	std	Y+47, r24	; 0x2f
    1638:	3f c0       	rjmp	.+126    	; 0x16b8 <main+0x5da>
	else if (__tmp > 65535)
    163a:	69 a9       	ldd	r22, Y+49	; 0x31
    163c:	7a a9       	ldd	r23, Y+50	; 0x32
    163e:	8b a9       	ldd	r24, Y+51	; 0x33
    1640:	9c a9       	ldd	r25, Y+52	; 0x34
    1642:	20 e0       	ldi	r18, 0x00	; 0
    1644:	3f ef       	ldi	r19, 0xFF	; 255
    1646:	4f e7       	ldi	r20, 0x7F	; 127
    1648:	57 e4       	ldi	r21, 0x47	; 71
    164a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    164e:	18 16       	cp	r1, r24
    1650:	4c f5       	brge	.+82     	; 0x16a4 <main+0x5c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1652:	6d a9       	ldd	r22, Y+53	; 0x35
    1654:	7e a9       	ldd	r23, Y+54	; 0x36
    1656:	8f a9       	ldd	r24, Y+55	; 0x37
    1658:	98 ad       	ldd	r25, Y+56	; 0x38
    165a:	20 e0       	ldi	r18, 0x00	; 0
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	40 e2       	ldi	r20, 0x20	; 32
    1660:	51 e4       	ldi	r21, 0x41	; 65
    1662:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1666:	dc 01       	movw	r26, r24
    1668:	cb 01       	movw	r24, r22
    166a:	bc 01       	movw	r22, r24
    166c:	cd 01       	movw	r24, r26
    166e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1672:	dc 01       	movw	r26, r24
    1674:	cb 01       	movw	r24, r22
    1676:	98 ab       	std	Y+48, r25	; 0x30
    1678:	8f a7       	std	Y+47, r24	; 0x2f
    167a:	0f c0       	rjmp	.+30     	; 0x169a <main+0x5bc>
    167c:	88 ec       	ldi	r24, 0xC8	; 200
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	9e a7       	std	Y+46, r25	; 0x2e
    1682:	8d a7       	std	Y+45, r24	; 0x2d
    1684:	8d a5       	ldd	r24, Y+45	; 0x2d
    1686:	9e a5       	ldd	r25, Y+46	; 0x2e
    1688:	01 97       	sbiw	r24, 0x01	; 1
    168a:	f1 f7       	brne	.-4      	; 0x1688 <main+0x5aa>
    168c:	9e a7       	std	Y+46, r25	; 0x2e
    168e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1690:	8f a5       	ldd	r24, Y+47	; 0x2f
    1692:	98 a9       	ldd	r25, Y+48	; 0x30
    1694:	01 97       	sbiw	r24, 0x01	; 1
    1696:	98 ab       	std	Y+48, r25	; 0x30
    1698:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    169a:	8f a5       	ldd	r24, Y+47	; 0x2f
    169c:	98 a9       	ldd	r25, Y+48	; 0x30
    169e:	00 97       	sbiw	r24, 0x00	; 0
    16a0:	69 f7       	brne	.-38     	; 0x167c <main+0x59e>
    16a2:	14 c0       	rjmp	.+40     	; 0x16cc <main+0x5ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16a4:	69 a9       	ldd	r22, Y+49	; 0x31
    16a6:	7a a9       	ldd	r23, Y+50	; 0x32
    16a8:	8b a9       	ldd	r24, Y+51	; 0x33
    16aa:	9c a9       	ldd	r25, Y+52	; 0x34
    16ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b0:	dc 01       	movw	r26, r24
    16b2:	cb 01       	movw	r24, r22
    16b4:	98 ab       	std	Y+48, r25	; 0x30
    16b6:	8f a7       	std	Y+47, r24	; 0x2f
    16b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    16ba:	98 a9       	ldd	r25, Y+48	; 0x30
    16bc:	9c a7       	std	Y+44, r25	; 0x2c
    16be:	8b a7       	std	Y+43, r24	; 0x2b
    16c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    16c2:	9c a5       	ldd	r25, Y+44	; 0x2c
    16c4:	01 97       	sbiw	r24, 0x01	; 1
    16c6:	f1 f7       	brne	.-4      	; 0x16c4 <main+0x5e6>
    16c8:	9c a7       	std	Y+44, r25	; 0x2c
    16ca:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(1000);
				CheckPassword();
    16cc:	0e 94 a2 07 	call	0xf44	; 0xf44 <CheckPassword>
				if(!rightPass){
    16d0:	80 91 fd 01 	lds	r24, 0x01FD
    16d4:	88 23       	and	r24, r24
    16d6:	09 f0       	breq	.+2      	; 0x16da <main+0x5fc>
    16d8:	78 c0       	rjmp	.+240    	; 0x17ca <main+0x6ec>
					LCD_clearScreen();
    16da:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_clearScreen>
					LCD_displayString("Wrong Password");
    16de:	89 e7       	ldi	r24, 0x79	; 121
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_displayString>
    16e6:	80 e0       	ldi	r24, 0x00	; 0
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	aa ef       	ldi	r26, 0xFA	; 250
    16ec:	b4 e4       	ldi	r27, 0x44	; 68
    16ee:	8f a3       	std	Y+39, r24	; 0x27
    16f0:	98 a7       	std	Y+40, r25	; 0x28
    16f2:	a9 a7       	std	Y+41, r26	; 0x29
    16f4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16f6:	6f a1       	ldd	r22, Y+39	; 0x27
    16f8:	78 a5       	ldd	r23, Y+40	; 0x28
    16fa:	89 a5       	ldd	r24, Y+41	; 0x29
    16fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	4a ef       	ldi	r20, 0xFA	; 250
    1704:	54 e4       	ldi	r21, 0x44	; 68
    1706:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    170a:	dc 01       	movw	r26, r24
    170c:	cb 01       	movw	r24, r22
    170e:	8b a3       	std	Y+35, r24	; 0x23
    1710:	9c a3       	std	Y+36, r25	; 0x24
    1712:	ad a3       	std	Y+37, r26	; 0x25
    1714:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1716:	6b a1       	ldd	r22, Y+35	; 0x23
    1718:	7c a1       	ldd	r23, Y+36	; 0x24
    171a:	8d a1       	ldd	r24, Y+37	; 0x25
    171c:	9e a1       	ldd	r25, Y+38	; 0x26
    171e:	20 e0       	ldi	r18, 0x00	; 0
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	40 e8       	ldi	r20, 0x80	; 128
    1724:	5f e3       	ldi	r21, 0x3F	; 63
    1726:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    172a:	88 23       	and	r24, r24
    172c:	2c f4       	brge	.+10     	; 0x1738 <main+0x65a>
		__ticks = 1;
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	9a a3       	std	Y+34, r25	; 0x22
    1734:	89 a3       	std	Y+33, r24	; 0x21
    1736:	3f c0       	rjmp	.+126    	; 0x17b6 <main+0x6d8>
	else if (__tmp > 65535)
    1738:	6b a1       	ldd	r22, Y+35	; 0x23
    173a:	7c a1       	ldd	r23, Y+36	; 0x24
    173c:	8d a1       	ldd	r24, Y+37	; 0x25
    173e:	9e a1       	ldd	r25, Y+38	; 0x26
    1740:	20 e0       	ldi	r18, 0x00	; 0
    1742:	3f ef       	ldi	r19, 0xFF	; 255
    1744:	4f e7       	ldi	r20, 0x7F	; 127
    1746:	57 e4       	ldi	r21, 0x47	; 71
    1748:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    174c:	18 16       	cp	r1, r24
    174e:	4c f5       	brge	.+82     	; 0x17a2 <main+0x6c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1750:	6f a1       	ldd	r22, Y+39	; 0x27
    1752:	78 a5       	ldd	r23, Y+40	; 0x28
    1754:	89 a5       	ldd	r24, Y+41	; 0x29
    1756:	9a a5       	ldd	r25, Y+42	; 0x2a
    1758:	20 e0       	ldi	r18, 0x00	; 0
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	40 e2       	ldi	r20, 0x20	; 32
    175e:	51 e4       	ldi	r21, 0x41	; 65
    1760:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1764:	dc 01       	movw	r26, r24
    1766:	cb 01       	movw	r24, r22
    1768:	bc 01       	movw	r22, r24
    176a:	cd 01       	movw	r24, r26
    176c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1770:	dc 01       	movw	r26, r24
    1772:	cb 01       	movw	r24, r22
    1774:	9a a3       	std	Y+34, r25	; 0x22
    1776:	89 a3       	std	Y+33, r24	; 0x21
    1778:	0f c0       	rjmp	.+30     	; 0x1798 <main+0x6ba>
    177a:	88 ec       	ldi	r24, 0xC8	; 200
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	98 a3       	std	Y+32, r25	; 0x20
    1780:	8f 8f       	std	Y+31, r24	; 0x1f
    1782:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1784:	98 a1       	ldd	r25, Y+32	; 0x20
    1786:	01 97       	sbiw	r24, 0x01	; 1
    1788:	f1 f7       	brne	.-4      	; 0x1786 <main+0x6a8>
    178a:	98 a3       	std	Y+32, r25	; 0x20
    178c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    178e:	89 a1       	ldd	r24, Y+33	; 0x21
    1790:	9a a1       	ldd	r25, Y+34	; 0x22
    1792:	01 97       	sbiw	r24, 0x01	; 1
    1794:	9a a3       	std	Y+34, r25	; 0x22
    1796:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1798:	89 a1       	ldd	r24, Y+33	; 0x21
    179a:	9a a1       	ldd	r25, Y+34	; 0x22
    179c:	00 97       	sbiw	r24, 0x00	; 0
    179e:	69 f7       	brne	.-38     	; 0x177a <main+0x69c>
    17a0:	14 c0       	rjmp	.+40     	; 0x17ca <main+0x6ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17a2:	6b a1       	ldd	r22, Y+35	; 0x23
    17a4:	7c a1       	ldd	r23, Y+36	; 0x24
    17a6:	8d a1       	ldd	r24, Y+37	; 0x25
    17a8:	9e a1       	ldd	r25, Y+38	; 0x26
    17aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ae:	dc 01       	movw	r26, r24
    17b0:	cb 01       	movw	r24, r22
    17b2:	9a a3       	std	Y+34, r25	; 0x22
    17b4:	89 a3       	std	Y+33, r24	; 0x21
    17b6:	89 a1       	ldd	r24, Y+33	; 0x21
    17b8:	9a a1       	ldd	r25, Y+34	; 0x22
    17ba:	9e 8f       	std	Y+30, r25	; 0x1e
    17bc:	8d 8f       	std	Y+29, r24	; 0x1d
    17be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17c2:	01 97       	sbiw	r24, 0x01	; 1
    17c4:	f1 f7       	brne	.-4      	; 0x17c2 <main+0x6e4>
    17c6:	9e 8f       	std	Y+30, r25	; 0x1e
    17c8:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(2000);
				}
				/* If passwords match, display Matched */
				if(rightPass){
    17ca:	80 91 fd 01 	lds	r24, 0x01FD
    17ce:	88 23       	and	r24, r24
    17d0:	09 f4       	brne	.+2      	; 0x17d4 <main+0x6f6>
    17d2:	10 ce       	rjmp	.-992    	; 0x13f4 <main+0x316>
					LCD_clearScreen();
    17d4:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_clearScreen>
					LCD_displayString("Matched");
    17d8:	88 e8       	ldi	r24, 0x88	; 136
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_displayString>
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	aa ef       	ldi	r26, 0xFA	; 250
    17e6:	b4 e4       	ldi	r27, 0x44	; 68
    17e8:	89 8f       	std	Y+25, r24	; 0x19
    17ea:	9a 8f       	std	Y+26, r25	; 0x1a
    17ec:	ab 8f       	std	Y+27, r26	; 0x1b
    17ee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17f0:	69 8d       	ldd	r22, Y+25	; 0x19
    17f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17f8:	20 e0       	ldi	r18, 0x00	; 0
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	4a ef       	ldi	r20, 0xFA	; 250
    17fe:	54 e4       	ldi	r21, 0x44	; 68
    1800:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1804:	dc 01       	movw	r26, r24
    1806:	cb 01       	movw	r24, r22
    1808:	8d 8b       	std	Y+21, r24	; 0x15
    180a:	9e 8b       	std	Y+22, r25	; 0x16
    180c:	af 8b       	std	Y+23, r26	; 0x17
    180e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1810:	6d 89       	ldd	r22, Y+21	; 0x15
    1812:	7e 89       	ldd	r23, Y+22	; 0x16
    1814:	8f 89       	ldd	r24, Y+23	; 0x17
    1816:	98 8d       	ldd	r25, Y+24	; 0x18
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	40 e8       	ldi	r20, 0x80	; 128
    181e:	5f e3       	ldi	r21, 0x3F	; 63
    1820:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1824:	88 23       	and	r24, r24
    1826:	2c f4       	brge	.+10     	; 0x1832 <main+0x754>
		__ticks = 1;
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	9c 8b       	std	Y+20, r25	; 0x14
    182e:	8b 8b       	std	Y+19, r24	; 0x13
    1830:	3f c0       	rjmp	.+126    	; 0x18b0 <main+0x7d2>
	else if (__tmp > 65535)
    1832:	6d 89       	ldd	r22, Y+21	; 0x15
    1834:	7e 89       	ldd	r23, Y+22	; 0x16
    1836:	8f 89       	ldd	r24, Y+23	; 0x17
    1838:	98 8d       	ldd	r25, Y+24	; 0x18
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	3f ef       	ldi	r19, 0xFF	; 255
    183e:	4f e7       	ldi	r20, 0x7F	; 127
    1840:	57 e4       	ldi	r21, 0x47	; 71
    1842:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1846:	18 16       	cp	r1, r24
    1848:	4c f5       	brge	.+82     	; 0x189c <main+0x7be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    184a:	69 8d       	ldd	r22, Y+25	; 0x19
    184c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    184e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1850:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	40 e2       	ldi	r20, 0x20	; 32
    1858:	51 e4       	ldi	r21, 0x41	; 65
    185a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    185e:	dc 01       	movw	r26, r24
    1860:	cb 01       	movw	r24, r22
    1862:	bc 01       	movw	r22, r24
    1864:	cd 01       	movw	r24, r26
    1866:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    186a:	dc 01       	movw	r26, r24
    186c:	cb 01       	movw	r24, r22
    186e:	9c 8b       	std	Y+20, r25	; 0x14
    1870:	8b 8b       	std	Y+19, r24	; 0x13
    1872:	0f c0       	rjmp	.+30     	; 0x1892 <main+0x7b4>
    1874:	88 ec       	ldi	r24, 0xC8	; 200
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	9a 8b       	std	Y+18, r25	; 0x12
    187a:	89 8b       	std	Y+17, r24	; 0x11
    187c:	89 89       	ldd	r24, Y+17	; 0x11
    187e:	9a 89       	ldd	r25, Y+18	; 0x12
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	f1 f7       	brne	.-4      	; 0x1880 <main+0x7a2>
    1884:	9a 8b       	std	Y+18, r25	; 0x12
    1886:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1888:	8b 89       	ldd	r24, Y+19	; 0x13
    188a:	9c 89       	ldd	r25, Y+20	; 0x14
    188c:	01 97       	sbiw	r24, 0x01	; 1
    188e:	9c 8b       	std	Y+20, r25	; 0x14
    1890:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1892:	8b 89       	ldd	r24, Y+19	; 0x13
    1894:	9c 89       	ldd	r25, Y+20	; 0x14
    1896:	00 97       	sbiw	r24, 0x00	; 0
    1898:	69 f7       	brne	.-38     	; 0x1874 <main+0x796>
    189a:	14 c0       	rjmp	.+40     	; 0x18c4 <main+0x7e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    189c:	6d 89       	ldd	r22, Y+21	; 0x15
    189e:	7e 89       	ldd	r23, Y+22	; 0x16
    18a0:	8f 89       	ldd	r24, Y+23	; 0x17
    18a2:	98 8d       	ldd	r25, Y+24	; 0x18
    18a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a8:	dc 01       	movw	r26, r24
    18aa:	cb 01       	movw	r24, r22
    18ac:	9c 8b       	std	Y+20, r25	; 0x14
    18ae:	8b 8b       	std	Y+19, r24	; 0x13
    18b0:	8b 89       	ldd	r24, Y+19	; 0x13
    18b2:	9c 89       	ldd	r25, Y+20	; 0x14
    18b4:	98 8b       	std	Y+16, r25	; 0x10
    18b6:	8f 87       	std	Y+15, r24	; 0x0f
    18b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    18ba:	98 89       	ldd	r25, Y+16	; 0x10
    18bc:	01 97       	sbiw	r24, 0x01	; 1
    18be:	f1 f7       	brne	.-4      	; 0x18bc <main+0x7de>
    18c0:	98 8b       	std	Y+16, r25	; 0x10
    18c2:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(2000);
					LCD_clearScreen();
    18c4:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_clearScreen>
					/* Send a READY symbol to indicate that
					 * the MCU is ready to send the password
					 * and wait for the respond with the same symbol  */
					UART_sendByte(READY);
    18c8:	84 e2       	ldi	r24, 0x24	; 36
    18ca:	0e 94 8e 19 	call	0x331c	; 0x331c <UART_sendByte>
					LCD_displayCharacter(UART_recieveByte());
    18ce:	0e 94 a5 19 	call	0x334a	; 0x334a <UART_recieveByte>
    18d2:	0e 94 46 14 	call	0x288c	; 0x288c <LCD_displayCharacter>
    18d6:	80 e0       	ldi	r24, 0x00	; 0
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	aa e7       	ldi	r26, 0x7A	; 122
    18dc:	b4 e4       	ldi	r27, 0x44	; 68
    18de:	8b 87       	std	Y+11, r24	; 0x0b
    18e0:	9c 87       	std	Y+12, r25	; 0x0c
    18e2:	ad 87       	std	Y+13, r26	; 0x0d
    18e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    18e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    18ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    18ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    18ee:	20 e0       	ldi	r18, 0x00	; 0
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	4a ef       	ldi	r20, 0xFA	; 250
    18f4:	54 e4       	ldi	r21, 0x44	; 68
    18f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	8f 83       	std	Y+7, r24	; 0x07
    1900:	98 87       	std	Y+8, r25	; 0x08
    1902:	a9 87       	std	Y+9, r26	; 0x09
    1904:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1906:	6f 81       	ldd	r22, Y+7	; 0x07
    1908:	78 85       	ldd	r23, Y+8	; 0x08
    190a:	89 85       	ldd	r24, Y+9	; 0x09
    190c:	9a 85       	ldd	r25, Y+10	; 0x0a
    190e:	20 e0       	ldi	r18, 0x00	; 0
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	40 e8       	ldi	r20, 0x80	; 128
    1914:	5f e3       	ldi	r21, 0x3F	; 63
    1916:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    191a:	88 23       	and	r24, r24
    191c:	2c f4       	brge	.+10     	; 0x1928 <main+0x84a>
		__ticks = 1;
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	9e 83       	std	Y+6, r25	; 0x06
    1924:	8d 83       	std	Y+5, r24	; 0x05
    1926:	3f c0       	rjmp	.+126    	; 0x19a6 <main+0x8c8>
	else if (__tmp > 65535)
    1928:	6f 81       	ldd	r22, Y+7	; 0x07
    192a:	78 85       	ldd	r23, Y+8	; 0x08
    192c:	89 85       	ldd	r24, Y+9	; 0x09
    192e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	3f ef       	ldi	r19, 0xFF	; 255
    1934:	4f e7       	ldi	r20, 0x7F	; 127
    1936:	57 e4       	ldi	r21, 0x47	; 71
    1938:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    193c:	18 16       	cp	r1, r24
    193e:	4c f5       	brge	.+82     	; 0x1992 <main+0x8b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1940:	6b 85       	ldd	r22, Y+11	; 0x0b
    1942:	7c 85       	ldd	r23, Y+12	; 0x0c
    1944:	8d 85       	ldd	r24, Y+13	; 0x0d
    1946:	9e 85       	ldd	r25, Y+14	; 0x0e
    1948:	20 e0       	ldi	r18, 0x00	; 0
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	40 e2       	ldi	r20, 0x20	; 32
    194e:	51 e4       	ldi	r21, 0x41	; 65
    1950:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1954:	dc 01       	movw	r26, r24
    1956:	cb 01       	movw	r24, r22
    1958:	bc 01       	movw	r22, r24
    195a:	cd 01       	movw	r24, r26
    195c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1960:	dc 01       	movw	r26, r24
    1962:	cb 01       	movw	r24, r22
    1964:	9e 83       	std	Y+6, r25	; 0x06
    1966:	8d 83       	std	Y+5, r24	; 0x05
    1968:	0f c0       	rjmp	.+30     	; 0x1988 <main+0x8aa>
    196a:	88 ec       	ldi	r24, 0xC8	; 200
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	9c 83       	std	Y+4, r25	; 0x04
    1970:	8b 83       	std	Y+3, r24	; 0x03
    1972:	8b 81       	ldd	r24, Y+3	; 0x03
    1974:	9c 81       	ldd	r25, Y+4	; 0x04
    1976:	01 97       	sbiw	r24, 0x01	; 1
    1978:	f1 f7       	brne	.-4      	; 0x1976 <main+0x898>
    197a:	9c 83       	std	Y+4, r25	; 0x04
    197c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    197e:	8d 81       	ldd	r24, Y+5	; 0x05
    1980:	9e 81       	ldd	r25, Y+6	; 0x06
    1982:	01 97       	sbiw	r24, 0x01	; 1
    1984:	9e 83       	std	Y+6, r25	; 0x06
    1986:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1988:	8d 81       	ldd	r24, Y+5	; 0x05
    198a:	9e 81       	ldd	r25, Y+6	; 0x06
    198c:	00 97       	sbiw	r24, 0x00	; 0
    198e:	69 f7       	brne	.-38     	; 0x196a <main+0x88c>
    1990:	14 c0       	rjmp	.+40     	; 0x19ba <main+0x8dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1992:	6f 81       	ldd	r22, Y+7	; 0x07
    1994:	78 85       	ldd	r23, Y+8	; 0x08
    1996:	89 85       	ldd	r24, Y+9	; 0x09
    1998:	9a 85       	ldd	r25, Y+10	; 0x0a
    199a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    199e:	dc 01       	movw	r26, r24
    19a0:	cb 01       	movw	r24, r22
    19a2:	9e 83       	std	Y+6, r25	; 0x06
    19a4:	8d 83       	std	Y+5, r24	; 0x05
    19a6:	8d 81       	ldd	r24, Y+5	; 0x05
    19a8:	9e 81       	ldd	r25, Y+6	; 0x06
    19aa:	9a 83       	std	Y+2, r25	; 0x02
    19ac:	89 83       	std	Y+1, r24	; 0x01
    19ae:	89 81       	ldd	r24, Y+1	; 0x01
    19b0:	9a 81       	ldd	r25, Y+2	; 0x02
    19b2:	01 97       	sbiw	r24, 0x01	; 1
    19b4:	f1 f7       	brne	.-4      	; 0x19b2 <main+0x8d4>
    19b6:	9a 83       	std	Y+2, r25	; 0x02
    19b8:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(1000);
					/* Send the correct password */
					for(uint8 i = 0; i<5; i++){
    19ba:	fe 01       	movw	r30, r28
    19bc:	eb 5a       	subi	r30, 0xAB	; 171
    19be:	ff 4f       	sbci	r31, 0xFF	; 255
    19c0:	10 82       	st	Z, r1
    19c2:	19 c0       	rjmp	.+50     	; 0x19f6 <main+0x918>
						delayfun(30);
    19c4:	8e e1       	ldi	r24, 0x1E	; 30
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <delayfun>
						UART_sendByte(receiveString1[i]);
    19cc:	fe 01       	movw	r30, r28
    19ce:	eb 5a       	subi	r30, 0xAB	; 171
    19d0:	ff 4f       	sbci	r31, 0xFF	; 255
    19d2:	80 81       	ld	r24, Z
    19d4:	88 2f       	mov	r24, r24
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	fc 01       	movw	r30, r24
    19da:	e2 50       	subi	r30, 0x02	; 2
    19dc:	fe 4f       	sbci	r31, 0xFE	; 254
    19de:	80 81       	ld	r24, Z
    19e0:	0e 94 8e 19 	call	0x331c	; 0x331c <UART_sendByte>
					 * and wait for the respond with the same symbol  */
					UART_sendByte(READY);
					LCD_displayCharacter(UART_recieveByte());
					_delay_ms(1000);
					/* Send the correct password */
					for(uint8 i = 0; i<5; i++){
    19e4:	de 01       	movw	r26, r28
    19e6:	ab 5a       	subi	r26, 0xAB	; 171
    19e8:	bf 4f       	sbci	r27, 0xFF	; 255
    19ea:	fe 01       	movw	r30, r28
    19ec:	eb 5a       	subi	r30, 0xAB	; 171
    19ee:	ff 4f       	sbci	r31, 0xFF	; 255
    19f0:	80 81       	ld	r24, Z
    19f2:	8f 5f       	subi	r24, 0xFF	; 255
    19f4:	8c 93       	st	X, r24
    19f6:	fe 01       	movw	r30, r28
    19f8:	eb 5a       	subi	r30, 0xAB	; 171
    19fa:	ff 4f       	sbci	r31, 0xFF	; 255
    19fc:	80 81       	ld	r24, Z
    19fe:	85 30       	cpi	r24, 0x05	; 5
    1a00:	08 f3       	brcs	.-62     	; 0x19c4 <main+0x8e6>
    1a02:	f8 cc       	rjmp	.-1552   	; 0x13f4 <main+0x316>
						delayfun(30);
						UART_sendByte(receiveString1[i]);
						}
				}
			}
			else if (success == FAIL){
    1a04:	fe 01       	movw	r30, r28
    1a06:	e9 5a       	subi	r30, 0xA9	; 169
    1a08:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0a:	80 81       	ld	r24, Z
    1a0c:	80 34       	cpi	r24, 0x40	; 64
    1a0e:	09 f0       	breq	.+2      	; 0x1a12 <main+0x934>
    1a10:	f1 cc       	rjmp	.-1566   	; 0x13f4 <main+0x316>
				mismatchCounter++;
    1a12:	80 91 0a 02 	lds	r24, 0x020A
    1a16:	8f 5f       	subi	r24, 0xFF	; 255
    1a18:	80 93 0a 02 	sts	0x020A, r24
				if(mismatchCounter == 3){
    1a1c:	80 91 0a 02 	lds	r24, 0x020A
    1a20:	83 30       	cpi	r24, 0x03	; 3
    1a22:	81 f4       	brne	.+32     	; 0x1a44 <main+0x966>
					mismatchCounter = 0;
    1a24:	10 92 0a 02 	sts	0x020A, r1
					UART_sendByte(DANGER);
    1a28:	86 e2       	ldi	r24, 0x26	; 38
    1a2a:	0e 94 8e 19 	call	0x331c	; 0x331c <UART_sendByte>
					LCD_clearScreen();
    1a2e:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_clearScreen>
					LCD_displayString("Error : Mismatch");
    1a32:	89 ec       	ldi	r24, 0xC9	; 201
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_displayString>
					delayfun(5000);
    1a3a:	88 e8       	ldi	r24, 0x88	; 136
    1a3c:	93 e1       	ldi	r25, 0x13	; 19
    1a3e:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <delayfun>
    1a42:	d8 cc       	rjmp	.-1616   	; 0x13f4 <main+0x316>
				}
				else{
					LCD_clearScreen();
    1a44:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_clearScreen>
					LCD_displayString("Wrong Password");
    1a48:	89 e7       	ldi	r24, 0x79	; 121
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_displayString>
					delayfun(2000);
    1a50:	80 ed       	ldi	r24, 0xD0	; 208
    1a52:	97 e0       	ldi	r25, 0x07	; 7
    1a54:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <delayfun>
    1a58:	cd cc       	rjmp	.-1638   	; 0x13f4 <main+0x316>

00001a5a <Buzzer_Init>:
#include "buzzer.h"

#include <avr/io.h>
#include "gpio.h"

void Buzzer_Init(void){
    1a5a:	df 93       	push	r29
    1a5c:	cf 93       	push	r28
    1a5e:	cd b7       	in	r28, 0x3d	; 61
    1a60:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT, BUZZER_PIN, PIN_OUTPUT);
    1a62:	eb e3       	ldi	r30, 0x3B	; 59
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	60 e0       	ldi	r22, 0x00	; 0
    1a6a:	41 e0       	ldi	r20, 0x01	; 1
    1a6c:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <GPIO_setupPinDirection>
}
    1a70:	cf 91       	pop	r28
    1a72:	df 91       	pop	r29
    1a74:	08 95       	ret

00001a76 <Buzzer_on>:

void Buzzer_on(void){
    1a76:	df 93       	push	r29
    1a78:	cf 93       	push	r28
    1a7a:	cd b7       	in	r28, 0x3d	; 61
    1a7c:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_HIGH);
    1a7e:	eb e3       	ldi	r30, 0x3B	; 59
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	60 e0       	ldi	r22, 0x00	; 0
    1a86:	41 e0       	ldi	r20, 0x01	; 1
    1a88:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <GPIO_writePin>
}
    1a8c:	cf 91       	pop	r28
    1a8e:	df 91       	pop	r29
    1a90:	08 95       	ret

00001a92 <Buzzer_off>:

void Buzzer_off(void){
    1a92:	df 93       	push	r29
    1a94:	cf 93       	push	r28
    1a96:	cd b7       	in	r28, 0x3d	; 61
    1a98:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
    1a9a:	eb e3       	ldi	r30, 0x3B	; 59
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	80 81       	ld	r24, Z
    1aa0:	60 e0       	ldi	r22, 0x00	; 0
    1aa2:	40 e0       	ldi	r20, 0x00	; 0
    1aa4:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <GPIO_writePin>
}
    1aa8:	cf 91       	pop	r28
    1aaa:	df 91       	pop	r29
    1aac:	08 95       	ret

00001aae <EEPROM_writeByte>:
#include "twi.h"
#include "external_eeprom.h"


uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1aae:	df 93       	push	r29
    1ab0:	cf 93       	push	r28
    1ab2:	00 d0       	rcall	.+0      	; 0x1ab4 <EEPROM_writeByte+0x6>
    1ab4:	00 d0       	rcall	.+0      	; 0x1ab6 <EEPROM_writeByte+0x8>
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
    1aba:	9a 83       	std	Y+2, r25	; 0x02
    1abc:	89 83       	std	Y+1, r24	; 0x01
    1abe:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1ac0:	0e 94 8e 18 	call	0x311c	; 0x311c <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1ac4:	0e 94 e6 18 	call	0x31cc	; 0x31cc <TWI_getStatus>
    1ac8:	88 30       	cpi	r24, 0x08	; 8
    1aca:	11 f0       	breq	.+4      	; 0x1ad0 <EEPROM_writeByte+0x22>
        return ERROR;
    1acc:	1c 82       	std	Y+4, r1	; 0x04
    1ace:	28 c0       	rjmp	.+80     	; 0x1b20 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1ad0:	89 81       	ldd	r24, Y+1	; 0x01
    1ad2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad4:	80 70       	andi	r24, 0x00	; 0
    1ad6:	97 70       	andi	r25, 0x07	; 7
    1ad8:	88 0f       	add	r24, r24
    1ada:	89 2f       	mov	r24, r25
    1adc:	88 1f       	adc	r24, r24
    1ade:	99 0b       	sbc	r25, r25
    1ae0:	91 95       	neg	r25
    1ae2:	80 6a       	ori	r24, 0xA0	; 160
    1ae4:	0e 94 a9 18 	call	0x3152	; 0x3152 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1ae8:	0e 94 e6 18 	call	0x31cc	; 0x31cc <TWI_getStatus>
    1aec:	88 31       	cpi	r24, 0x18	; 24
    1aee:	11 f0       	breq	.+4      	; 0x1af4 <EEPROM_writeByte+0x46>
        return ERROR; 
    1af0:	1c 82       	std	Y+4, r1	; 0x04
    1af2:	16 c0       	rjmp	.+44     	; 0x1b20 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1af4:	89 81       	ldd	r24, Y+1	; 0x01
    1af6:	0e 94 a9 18 	call	0x3152	; 0x3152 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1afa:	0e 94 e6 18 	call	0x31cc	; 0x31cc <TWI_getStatus>
    1afe:	88 32       	cpi	r24, 0x28	; 40
    1b00:	11 f0       	breq	.+4      	; 0x1b06 <EEPROM_writeByte+0x58>
        return ERROR;
    1b02:	1c 82       	std	Y+4, r1	; 0x04
    1b04:	0d c0       	rjmp	.+26     	; 0x1b20 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1b06:	8b 81       	ldd	r24, Y+3	; 0x03
    1b08:	0e 94 a9 18 	call	0x3152	; 0x3152 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1b0c:	0e 94 e6 18 	call	0x31cc	; 0x31cc <TWI_getStatus>
    1b10:	88 32       	cpi	r24, 0x28	; 40
    1b12:	11 f0       	breq	.+4      	; 0x1b18 <EEPROM_writeByte+0x6a>
        return ERROR;
    1b14:	1c 82       	std	Y+4, r1	; 0x04
    1b16:	04 c0       	rjmp	.+8      	; 0x1b20 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1b18:	0e 94 9e 18 	call	0x313c	; 0x313c <TWI_stop>
	
    return SUCCESS;
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	8c 83       	std	Y+4, r24	; 0x04
    1b20:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1b22:	0f 90       	pop	r0
    1b24:	0f 90       	pop	r0
    1b26:	0f 90       	pop	r0
    1b28:	0f 90       	pop	r0
    1b2a:	cf 91       	pop	r28
    1b2c:	df 91       	pop	r29
    1b2e:	08 95       	ret

00001b30 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1b30:	df 93       	push	r29
    1b32:	cf 93       	push	r28
    1b34:	00 d0       	rcall	.+0      	; 0x1b36 <EEPROM_readByte+0x6>
    1b36:	00 d0       	rcall	.+0      	; 0x1b38 <EEPROM_readByte+0x8>
    1b38:	0f 92       	push	r0
    1b3a:	cd b7       	in	r28, 0x3d	; 61
    1b3c:	de b7       	in	r29, 0x3e	; 62
    1b3e:	9a 83       	std	Y+2, r25	; 0x02
    1b40:	89 83       	std	Y+1, r24	; 0x01
    1b42:	7c 83       	std	Y+4, r23	; 0x04
    1b44:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1b46:	0e 94 8e 18 	call	0x311c	; 0x311c <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1b4a:	0e 94 e6 18 	call	0x31cc	; 0x31cc <TWI_getStatus>
    1b4e:	88 30       	cpi	r24, 0x08	; 8
    1b50:	11 f0       	breq	.+4      	; 0x1b56 <EEPROM_readByte+0x26>
        return ERROR;
    1b52:	1d 82       	std	Y+5, r1	; 0x05
    1b54:	44 c0       	rjmp	.+136    	; 0x1bde <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1b56:	89 81       	ldd	r24, Y+1	; 0x01
    1b58:	9a 81       	ldd	r25, Y+2	; 0x02
    1b5a:	80 70       	andi	r24, 0x00	; 0
    1b5c:	97 70       	andi	r25, 0x07	; 7
    1b5e:	88 0f       	add	r24, r24
    1b60:	89 2f       	mov	r24, r25
    1b62:	88 1f       	adc	r24, r24
    1b64:	99 0b       	sbc	r25, r25
    1b66:	91 95       	neg	r25
    1b68:	80 6a       	ori	r24, 0xA0	; 160
    1b6a:	0e 94 a9 18 	call	0x3152	; 0x3152 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1b6e:	0e 94 e6 18 	call	0x31cc	; 0x31cc <TWI_getStatus>
    1b72:	88 31       	cpi	r24, 0x18	; 24
    1b74:	11 f0       	breq	.+4      	; 0x1b7a <EEPROM_readByte+0x4a>
        return ERROR;
    1b76:	1d 82       	std	Y+5, r1	; 0x05
    1b78:	32 c0       	rjmp	.+100    	; 0x1bde <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1b7a:	89 81       	ldd	r24, Y+1	; 0x01
    1b7c:	0e 94 a9 18 	call	0x3152	; 0x3152 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1b80:	0e 94 e6 18 	call	0x31cc	; 0x31cc <TWI_getStatus>
    1b84:	88 32       	cpi	r24, 0x28	; 40
    1b86:	11 f0       	breq	.+4      	; 0x1b8c <EEPROM_readByte+0x5c>
        return ERROR;
    1b88:	1d 82       	std	Y+5, r1	; 0x05
    1b8a:	29 c0       	rjmp	.+82     	; 0x1bde <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1b8c:	0e 94 8e 18 	call	0x311c	; 0x311c <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1b90:	0e 94 e6 18 	call	0x31cc	; 0x31cc <TWI_getStatus>
    1b94:	80 31       	cpi	r24, 0x10	; 16
    1b96:	11 f0       	breq	.+4      	; 0x1b9c <EEPROM_readByte+0x6c>
        return ERROR;
    1b98:	1d 82       	std	Y+5, r1	; 0x05
    1b9a:	21 c0       	rjmp	.+66     	; 0x1bde <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1b9c:	89 81       	ldd	r24, Y+1	; 0x01
    1b9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba0:	80 70       	andi	r24, 0x00	; 0
    1ba2:	97 70       	andi	r25, 0x07	; 7
    1ba4:	88 0f       	add	r24, r24
    1ba6:	89 2f       	mov	r24, r25
    1ba8:	88 1f       	adc	r24, r24
    1baa:	99 0b       	sbc	r25, r25
    1bac:	91 95       	neg	r25
    1bae:	81 6a       	ori	r24, 0xA1	; 161
    1bb0:	0e 94 a9 18 	call	0x3152	; 0x3152 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1bb4:	0e 94 e6 18 	call	0x31cc	; 0x31cc <TWI_getStatus>
    1bb8:	80 34       	cpi	r24, 0x40	; 64
    1bba:	11 f0       	breq	.+4      	; 0x1bc0 <EEPROM_readByte+0x90>
        return ERROR;
    1bbc:	1d 82       	std	Y+5, r1	; 0x05
    1bbe:	0f c0       	rjmp	.+30     	; 0x1bde <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1bc0:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <TWI_readByteWithNACK>
    1bc4:	eb 81       	ldd	r30, Y+3	; 0x03
    1bc6:	fc 81       	ldd	r31, Y+4	; 0x04
    1bc8:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1bca:	0e 94 e6 18 	call	0x31cc	; 0x31cc <TWI_getStatus>
    1bce:	88 35       	cpi	r24, 0x58	; 88
    1bd0:	11 f0       	breq	.+4      	; 0x1bd6 <EEPROM_readByte+0xa6>
        return ERROR;
    1bd2:	1d 82       	std	Y+5, r1	; 0x05
    1bd4:	04 c0       	rjmp	.+8      	; 0x1bde <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1bd6:	0e 94 9e 18 	call	0x313c	; 0x313c <TWI_stop>

    return SUCCESS;
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	8d 83       	std	Y+5, r24	; 0x05
    1bde:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1be0:	0f 90       	pop	r0
    1be2:	0f 90       	pop	r0
    1be4:	0f 90       	pop	r0
    1be6:	0f 90       	pop	r0
    1be8:	0f 90       	pop	r0
    1bea:	cf 91       	pop	r28
    1bec:	df 91       	pop	r29
    1bee:	08 95       	ret

00001bf0 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1bf0:	df 93       	push	r29
    1bf2:	cf 93       	push	r28
    1bf4:	00 d0       	rcall	.+0      	; 0x1bf6 <GPIO_setupPinDirection+0x6>
    1bf6:	00 d0       	rcall	.+0      	; 0x1bf8 <GPIO_setupPinDirection+0x8>
    1bf8:	0f 92       	push	r0
    1bfa:	cd b7       	in	r28, 0x3d	; 61
    1bfc:	de b7       	in	r29, 0x3e	; 62
    1bfe:	89 83       	std	Y+1, r24	; 0x01
    1c00:	6a 83       	std	Y+2, r22	; 0x02
    1c02:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1c04:	8a 81       	ldd	r24, Y+2	; 0x02
    1c06:	88 30       	cpi	r24, 0x08	; 8
    1c08:	08 f0       	brcs	.+2      	; 0x1c0c <GPIO_setupPinDirection+0x1c>
    1c0a:	d5 c0       	rjmp	.+426    	; 0x1db6 <GPIO_setupPinDirection+0x1c6>
    1c0c:	89 81       	ldd	r24, Y+1	; 0x01
    1c0e:	84 30       	cpi	r24, 0x04	; 4
    1c10:	08 f0       	brcs	.+2      	; 0x1c14 <GPIO_setupPinDirection+0x24>
    1c12:	d1 c0       	rjmp	.+418    	; 0x1db6 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1c14:	89 81       	ldd	r24, Y+1	; 0x01
    1c16:	28 2f       	mov	r18, r24
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	3d 83       	std	Y+5, r19	; 0x05
    1c1c:	2c 83       	std	Y+4, r18	; 0x04
    1c1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c20:	9d 81       	ldd	r25, Y+5	; 0x05
    1c22:	81 30       	cpi	r24, 0x01	; 1
    1c24:	91 05       	cpc	r25, r1
    1c26:	09 f4       	brne	.+2      	; 0x1c2a <GPIO_setupPinDirection+0x3a>
    1c28:	43 c0       	rjmp	.+134    	; 0x1cb0 <GPIO_setupPinDirection+0xc0>
    1c2a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c2c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c2e:	22 30       	cpi	r18, 0x02	; 2
    1c30:	31 05       	cpc	r19, r1
    1c32:	2c f4       	brge	.+10     	; 0x1c3e <GPIO_setupPinDirection+0x4e>
    1c34:	8c 81       	ldd	r24, Y+4	; 0x04
    1c36:	9d 81       	ldd	r25, Y+5	; 0x05
    1c38:	00 97       	sbiw	r24, 0x00	; 0
    1c3a:	71 f0       	breq	.+28     	; 0x1c58 <GPIO_setupPinDirection+0x68>
    1c3c:	bc c0       	rjmp	.+376    	; 0x1db6 <GPIO_setupPinDirection+0x1c6>
    1c3e:	2c 81       	ldd	r18, Y+4	; 0x04
    1c40:	3d 81       	ldd	r19, Y+5	; 0x05
    1c42:	22 30       	cpi	r18, 0x02	; 2
    1c44:	31 05       	cpc	r19, r1
    1c46:	09 f4       	brne	.+2      	; 0x1c4a <GPIO_setupPinDirection+0x5a>
    1c48:	5f c0       	rjmp	.+190    	; 0x1d08 <GPIO_setupPinDirection+0x118>
    1c4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c4c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c4e:	83 30       	cpi	r24, 0x03	; 3
    1c50:	91 05       	cpc	r25, r1
    1c52:	09 f4       	brne	.+2      	; 0x1c56 <GPIO_setupPinDirection+0x66>
    1c54:	85 c0       	rjmp	.+266    	; 0x1d60 <GPIO_setupPinDirection+0x170>
    1c56:	af c0       	rjmp	.+350    	; 0x1db6 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1c58:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5a:	81 30       	cpi	r24, 0x01	; 1
    1c5c:	a1 f4       	brne	.+40     	; 0x1c86 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1c5e:	aa e3       	ldi	r26, 0x3A	; 58
    1c60:	b0 e0       	ldi	r27, 0x00	; 0
    1c62:	ea e3       	ldi	r30, 0x3A	; 58
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	48 2f       	mov	r20, r24
    1c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6c:	28 2f       	mov	r18, r24
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	02 2e       	mov	r0, r18
    1c76:	02 c0       	rjmp	.+4      	; 0x1c7c <GPIO_setupPinDirection+0x8c>
    1c78:	88 0f       	add	r24, r24
    1c7a:	99 1f       	adc	r25, r25
    1c7c:	0a 94       	dec	r0
    1c7e:	e2 f7       	brpl	.-8      	; 0x1c78 <GPIO_setupPinDirection+0x88>
    1c80:	84 2b       	or	r24, r20
    1c82:	8c 93       	st	X, r24
    1c84:	98 c0       	rjmp	.+304    	; 0x1db6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1c86:	aa e3       	ldi	r26, 0x3A	; 58
    1c88:	b0 e0       	ldi	r27, 0x00	; 0
    1c8a:	ea e3       	ldi	r30, 0x3A	; 58
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	80 81       	ld	r24, Z
    1c90:	48 2f       	mov	r20, r24
    1c92:	8a 81       	ldd	r24, Y+2	; 0x02
    1c94:	28 2f       	mov	r18, r24
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	02 2e       	mov	r0, r18
    1c9e:	02 c0       	rjmp	.+4      	; 0x1ca4 <GPIO_setupPinDirection+0xb4>
    1ca0:	88 0f       	add	r24, r24
    1ca2:	99 1f       	adc	r25, r25
    1ca4:	0a 94       	dec	r0
    1ca6:	e2 f7       	brpl	.-8      	; 0x1ca0 <GPIO_setupPinDirection+0xb0>
    1ca8:	80 95       	com	r24
    1caa:	84 23       	and	r24, r20
    1cac:	8c 93       	st	X, r24
    1cae:	83 c0       	rjmp	.+262    	; 0x1db6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb2:	81 30       	cpi	r24, 0x01	; 1
    1cb4:	a1 f4       	brne	.+40     	; 0x1cde <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1cb6:	a7 e3       	ldi	r26, 0x37	; 55
    1cb8:	b0 e0       	ldi	r27, 0x00	; 0
    1cba:	e7 e3       	ldi	r30, 0x37	; 55
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	80 81       	ld	r24, Z
    1cc0:	48 2f       	mov	r20, r24
    1cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc4:	28 2f       	mov	r18, r24
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	02 2e       	mov	r0, r18
    1cce:	02 c0       	rjmp	.+4      	; 0x1cd4 <GPIO_setupPinDirection+0xe4>
    1cd0:	88 0f       	add	r24, r24
    1cd2:	99 1f       	adc	r25, r25
    1cd4:	0a 94       	dec	r0
    1cd6:	e2 f7       	brpl	.-8      	; 0x1cd0 <GPIO_setupPinDirection+0xe0>
    1cd8:	84 2b       	or	r24, r20
    1cda:	8c 93       	st	X, r24
    1cdc:	6c c0       	rjmp	.+216    	; 0x1db6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1cde:	a7 e3       	ldi	r26, 0x37	; 55
    1ce0:	b0 e0       	ldi	r27, 0x00	; 0
    1ce2:	e7 e3       	ldi	r30, 0x37	; 55
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	48 2f       	mov	r20, r24
    1cea:	8a 81       	ldd	r24, Y+2	; 0x02
    1cec:	28 2f       	mov	r18, r24
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	02 2e       	mov	r0, r18
    1cf6:	02 c0       	rjmp	.+4      	; 0x1cfc <GPIO_setupPinDirection+0x10c>
    1cf8:	88 0f       	add	r24, r24
    1cfa:	99 1f       	adc	r25, r25
    1cfc:	0a 94       	dec	r0
    1cfe:	e2 f7       	brpl	.-8      	; 0x1cf8 <GPIO_setupPinDirection+0x108>
    1d00:	80 95       	com	r24
    1d02:	84 23       	and	r24, r20
    1d04:	8c 93       	st	X, r24
    1d06:	57 c0       	rjmp	.+174    	; 0x1db6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1d08:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0a:	81 30       	cpi	r24, 0x01	; 1
    1d0c:	a1 f4       	brne	.+40     	; 0x1d36 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1d0e:	a4 e3       	ldi	r26, 0x34	; 52
    1d10:	b0 e0       	ldi	r27, 0x00	; 0
    1d12:	e4 e3       	ldi	r30, 0x34	; 52
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	80 81       	ld	r24, Z
    1d18:	48 2f       	mov	r20, r24
    1d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1c:	28 2f       	mov	r18, r24
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	02 2e       	mov	r0, r18
    1d26:	02 c0       	rjmp	.+4      	; 0x1d2c <GPIO_setupPinDirection+0x13c>
    1d28:	88 0f       	add	r24, r24
    1d2a:	99 1f       	adc	r25, r25
    1d2c:	0a 94       	dec	r0
    1d2e:	e2 f7       	brpl	.-8      	; 0x1d28 <GPIO_setupPinDirection+0x138>
    1d30:	84 2b       	or	r24, r20
    1d32:	8c 93       	st	X, r24
    1d34:	40 c0       	rjmp	.+128    	; 0x1db6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1d36:	a4 e3       	ldi	r26, 0x34	; 52
    1d38:	b0 e0       	ldi	r27, 0x00	; 0
    1d3a:	e4 e3       	ldi	r30, 0x34	; 52
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	80 81       	ld	r24, Z
    1d40:	48 2f       	mov	r20, r24
    1d42:	8a 81       	ldd	r24, Y+2	; 0x02
    1d44:	28 2f       	mov	r18, r24
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	81 e0       	ldi	r24, 0x01	; 1
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	02 2e       	mov	r0, r18
    1d4e:	02 c0       	rjmp	.+4      	; 0x1d54 <GPIO_setupPinDirection+0x164>
    1d50:	88 0f       	add	r24, r24
    1d52:	99 1f       	adc	r25, r25
    1d54:	0a 94       	dec	r0
    1d56:	e2 f7       	brpl	.-8      	; 0x1d50 <GPIO_setupPinDirection+0x160>
    1d58:	80 95       	com	r24
    1d5a:	84 23       	and	r24, r20
    1d5c:	8c 93       	st	X, r24
    1d5e:	2b c0       	rjmp	.+86     	; 0x1db6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1d60:	8b 81       	ldd	r24, Y+3	; 0x03
    1d62:	81 30       	cpi	r24, 0x01	; 1
    1d64:	a1 f4       	brne	.+40     	; 0x1d8e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1d66:	a1 e3       	ldi	r26, 0x31	; 49
    1d68:	b0 e0       	ldi	r27, 0x00	; 0
    1d6a:	e1 e3       	ldi	r30, 0x31	; 49
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	80 81       	ld	r24, Z
    1d70:	48 2f       	mov	r20, r24
    1d72:	8a 81       	ldd	r24, Y+2	; 0x02
    1d74:	28 2f       	mov	r18, r24
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	02 2e       	mov	r0, r18
    1d7e:	02 c0       	rjmp	.+4      	; 0x1d84 <GPIO_setupPinDirection+0x194>
    1d80:	88 0f       	add	r24, r24
    1d82:	99 1f       	adc	r25, r25
    1d84:	0a 94       	dec	r0
    1d86:	e2 f7       	brpl	.-8      	; 0x1d80 <GPIO_setupPinDirection+0x190>
    1d88:	84 2b       	or	r24, r20
    1d8a:	8c 93       	st	X, r24
    1d8c:	14 c0       	rjmp	.+40     	; 0x1db6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1d8e:	a1 e3       	ldi	r26, 0x31	; 49
    1d90:	b0 e0       	ldi	r27, 0x00	; 0
    1d92:	e1 e3       	ldi	r30, 0x31	; 49
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	80 81       	ld	r24, Z
    1d98:	48 2f       	mov	r20, r24
    1d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9c:	28 2f       	mov	r18, r24
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	02 2e       	mov	r0, r18
    1da6:	02 c0       	rjmp	.+4      	; 0x1dac <GPIO_setupPinDirection+0x1bc>
    1da8:	88 0f       	add	r24, r24
    1daa:	99 1f       	adc	r25, r25
    1dac:	0a 94       	dec	r0
    1dae:	e2 f7       	brpl	.-8      	; 0x1da8 <GPIO_setupPinDirection+0x1b8>
    1db0:	80 95       	com	r24
    1db2:	84 23       	and	r24, r20
    1db4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1db6:	0f 90       	pop	r0
    1db8:	0f 90       	pop	r0
    1dba:	0f 90       	pop	r0
    1dbc:	0f 90       	pop	r0
    1dbe:	0f 90       	pop	r0
    1dc0:	cf 91       	pop	r28
    1dc2:	df 91       	pop	r29
    1dc4:	08 95       	ret

00001dc6 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1dc6:	df 93       	push	r29
    1dc8:	cf 93       	push	r28
    1dca:	00 d0       	rcall	.+0      	; 0x1dcc <GPIO_writePin+0x6>
    1dcc:	00 d0       	rcall	.+0      	; 0x1dce <GPIO_writePin+0x8>
    1dce:	0f 92       	push	r0
    1dd0:	cd b7       	in	r28, 0x3d	; 61
    1dd2:	de b7       	in	r29, 0x3e	; 62
    1dd4:	89 83       	std	Y+1, r24	; 0x01
    1dd6:	6a 83       	std	Y+2, r22	; 0x02
    1dd8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1dda:	8a 81       	ldd	r24, Y+2	; 0x02
    1ddc:	88 30       	cpi	r24, 0x08	; 8
    1dde:	08 f0       	brcs	.+2      	; 0x1de2 <GPIO_writePin+0x1c>
    1de0:	d5 c0       	rjmp	.+426    	; 0x1f8c <GPIO_writePin+0x1c6>
    1de2:	89 81       	ldd	r24, Y+1	; 0x01
    1de4:	84 30       	cpi	r24, 0x04	; 4
    1de6:	08 f0       	brcs	.+2      	; 0x1dea <GPIO_writePin+0x24>
    1de8:	d1 c0       	rjmp	.+418    	; 0x1f8c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1dea:	89 81       	ldd	r24, Y+1	; 0x01
    1dec:	28 2f       	mov	r18, r24
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	3d 83       	std	Y+5, r19	; 0x05
    1df2:	2c 83       	std	Y+4, r18	; 0x04
    1df4:	8c 81       	ldd	r24, Y+4	; 0x04
    1df6:	9d 81       	ldd	r25, Y+5	; 0x05
    1df8:	81 30       	cpi	r24, 0x01	; 1
    1dfa:	91 05       	cpc	r25, r1
    1dfc:	09 f4       	brne	.+2      	; 0x1e00 <GPIO_writePin+0x3a>
    1dfe:	43 c0       	rjmp	.+134    	; 0x1e86 <GPIO_writePin+0xc0>
    1e00:	2c 81       	ldd	r18, Y+4	; 0x04
    1e02:	3d 81       	ldd	r19, Y+5	; 0x05
    1e04:	22 30       	cpi	r18, 0x02	; 2
    1e06:	31 05       	cpc	r19, r1
    1e08:	2c f4       	brge	.+10     	; 0x1e14 <GPIO_writePin+0x4e>
    1e0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e0c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e0e:	00 97       	sbiw	r24, 0x00	; 0
    1e10:	71 f0       	breq	.+28     	; 0x1e2e <GPIO_writePin+0x68>
    1e12:	bc c0       	rjmp	.+376    	; 0x1f8c <GPIO_writePin+0x1c6>
    1e14:	2c 81       	ldd	r18, Y+4	; 0x04
    1e16:	3d 81       	ldd	r19, Y+5	; 0x05
    1e18:	22 30       	cpi	r18, 0x02	; 2
    1e1a:	31 05       	cpc	r19, r1
    1e1c:	09 f4       	brne	.+2      	; 0x1e20 <GPIO_writePin+0x5a>
    1e1e:	5f c0       	rjmp	.+190    	; 0x1ede <GPIO_writePin+0x118>
    1e20:	8c 81       	ldd	r24, Y+4	; 0x04
    1e22:	9d 81       	ldd	r25, Y+5	; 0x05
    1e24:	83 30       	cpi	r24, 0x03	; 3
    1e26:	91 05       	cpc	r25, r1
    1e28:	09 f4       	brne	.+2      	; 0x1e2c <GPIO_writePin+0x66>
    1e2a:	85 c0       	rjmp	.+266    	; 0x1f36 <GPIO_writePin+0x170>
    1e2c:	af c0       	rjmp	.+350    	; 0x1f8c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1e2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e30:	81 30       	cpi	r24, 0x01	; 1
    1e32:	a1 f4       	brne	.+40     	; 0x1e5c <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1e34:	ab e3       	ldi	r26, 0x3B	; 59
    1e36:	b0 e0       	ldi	r27, 0x00	; 0
    1e38:	eb e3       	ldi	r30, 0x3B	; 59
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	48 2f       	mov	r20, r24
    1e40:	8a 81       	ldd	r24, Y+2	; 0x02
    1e42:	28 2f       	mov	r18, r24
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	02 2e       	mov	r0, r18
    1e4c:	02 c0       	rjmp	.+4      	; 0x1e52 <GPIO_writePin+0x8c>
    1e4e:	88 0f       	add	r24, r24
    1e50:	99 1f       	adc	r25, r25
    1e52:	0a 94       	dec	r0
    1e54:	e2 f7       	brpl	.-8      	; 0x1e4e <GPIO_writePin+0x88>
    1e56:	84 2b       	or	r24, r20
    1e58:	8c 93       	st	X, r24
    1e5a:	98 c0       	rjmp	.+304    	; 0x1f8c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1e5c:	ab e3       	ldi	r26, 0x3B	; 59
    1e5e:	b0 e0       	ldi	r27, 0x00	; 0
    1e60:	eb e3       	ldi	r30, 0x3B	; 59
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	80 81       	ld	r24, Z
    1e66:	48 2f       	mov	r20, r24
    1e68:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6a:	28 2f       	mov	r18, r24
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	02 2e       	mov	r0, r18
    1e74:	02 c0       	rjmp	.+4      	; 0x1e7a <GPIO_writePin+0xb4>
    1e76:	88 0f       	add	r24, r24
    1e78:	99 1f       	adc	r25, r25
    1e7a:	0a 94       	dec	r0
    1e7c:	e2 f7       	brpl	.-8      	; 0x1e76 <GPIO_writePin+0xb0>
    1e7e:	80 95       	com	r24
    1e80:	84 23       	and	r24, r20
    1e82:	8c 93       	st	X, r24
    1e84:	83 c0       	rjmp	.+262    	; 0x1f8c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1e86:	8b 81       	ldd	r24, Y+3	; 0x03
    1e88:	81 30       	cpi	r24, 0x01	; 1
    1e8a:	a1 f4       	brne	.+40     	; 0x1eb4 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1e8c:	a8 e3       	ldi	r26, 0x38	; 56
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	e8 e3       	ldi	r30, 0x38	; 56
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	48 2f       	mov	r20, r24
    1e98:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9a:	28 2f       	mov	r18, r24
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	02 2e       	mov	r0, r18
    1ea4:	02 c0       	rjmp	.+4      	; 0x1eaa <GPIO_writePin+0xe4>
    1ea6:	88 0f       	add	r24, r24
    1ea8:	99 1f       	adc	r25, r25
    1eaa:	0a 94       	dec	r0
    1eac:	e2 f7       	brpl	.-8      	; 0x1ea6 <GPIO_writePin+0xe0>
    1eae:	84 2b       	or	r24, r20
    1eb0:	8c 93       	st	X, r24
    1eb2:	6c c0       	rjmp	.+216    	; 0x1f8c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1eb4:	a8 e3       	ldi	r26, 0x38	; 56
    1eb6:	b0 e0       	ldi	r27, 0x00	; 0
    1eb8:	e8 e3       	ldi	r30, 0x38	; 56
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	80 81       	ld	r24, Z
    1ebe:	48 2f       	mov	r20, r24
    1ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec2:	28 2f       	mov	r18, r24
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	02 2e       	mov	r0, r18
    1ecc:	02 c0       	rjmp	.+4      	; 0x1ed2 <GPIO_writePin+0x10c>
    1ece:	88 0f       	add	r24, r24
    1ed0:	99 1f       	adc	r25, r25
    1ed2:	0a 94       	dec	r0
    1ed4:	e2 f7       	brpl	.-8      	; 0x1ece <GPIO_writePin+0x108>
    1ed6:	80 95       	com	r24
    1ed8:	84 23       	and	r24, r20
    1eda:	8c 93       	st	X, r24
    1edc:	57 c0       	rjmp	.+174    	; 0x1f8c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1ede:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee0:	81 30       	cpi	r24, 0x01	; 1
    1ee2:	a1 f4       	brne	.+40     	; 0x1f0c <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1ee4:	a5 e3       	ldi	r26, 0x35	; 53
    1ee6:	b0 e0       	ldi	r27, 0x00	; 0
    1ee8:	e5 e3       	ldi	r30, 0x35	; 53
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	80 81       	ld	r24, Z
    1eee:	48 2f       	mov	r20, r24
    1ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef2:	28 2f       	mov	r18, r24
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	02 2e       	mov	r0, r18
    1efc:	02 c0       	rjmp	.+4      	; 0x1f02 <GPIO_writePin+0x13c>
    1efe:	88 0f       	add	r24, r24
    1f00:	99 1f       	adc	r25, r25
    1f02:	0a 94       	dec	r0
    1f04:	e2 f7       	brpl	.-8      	; 0x1efe <GPIO_writePin+0x138>
    1f06:	84 2b       	or	r24, r20
    1f08:	8c 93       	st	X, r24
    1f0a:	40 c0       	rjmp	.+128    	; 0x1f8c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1f0c:	a5 e3       	ldi	r26, 0x35	; 53
    1f0e:	b0 e0       	ldi	r27, 0x00	; 0
    1f10:	e5 e3       	ldi	r30, 0x35	; 53
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	80 81       	ld	r24, Z
    1f16:	48 2f       	mov	r20, r24
    1f18:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1a:	28 2f       	mov	r18, r24
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	02 2e       	mov	r0, r18
    1f24:	02 c0       	rjmp	.+4      	; 0x1f2a <GPIO_writePin+0x164>
    1f26:	88 0f       	add	r24, r24
    1f28:	99 1f       	adc	r25, r25
    1f2a:	0a 94       	dec	r0
    1f2c:	e2 f7       	brpl	.-8      	; 0x1f26 <GPIO_writePin+0x160>
    1f2e:	80 95       	com	r24
    1f30:	84 23       	and	r24, r20
    1f32:	8c 93       	st	X, r24
    1f34:	2b c0       	rjmp	.+86     	; 0x1f8c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1f36:	8b 81       	ldd	r24, Y+3	; 0x03
    1f38:	81 30       	cpi	r24, 0x01	; 1
    1f3a:	a1 f4       	brne	.+40     	; 0x1f64 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1f3c:	a2 e3       	ldi	r26, 0x32	; 50
    1f3e:	b0 e0       	ldi	r27, 0x00	; 0
    1f40:	e2 e3       	ldi	r30, 0x32	; 50
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	80 81       	ld	r24, Z
    1f46:	48 2f       	mov	r20, r24
    1f48:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4a:	28 2f       	mov	r18, r24
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	02 2e       	mov	r0, r18
    1f54:	02 c0       	rjmp	.+4      	; 0x1f5a <GPIO_writePin+0x194>
    1f56:	88 0f       	add	r24, r24
    1f58:	99 1f       	adc	r25, r25
    1f5a:	0a 94       	dec	r0
    1f5c:	e2 f7       	brpl	.-8      	; 0x1f56 <GPIO_writePin+0x190>
    1f5e:	84 2b       	or	r24, r20
    1f60:	8c 93       	st	X, r24
    1f62:	14 c0       	rjmp	.+40     	; 0x1f8c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1f64:	a2 e3       	ldi	r26, 0x32	; 50
    1f66:	b0 e0       	ldi	r27, 0x00	; 0
    1f68:	e2 e3       	ldi	r30, 0x32	; 50
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	48 2f       	mov	r20, r24
    1f70:	8a 81       	ldd	r24, Y+2	; 0x02
    1f72:	28 2f       	mov	r18, r24
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	02 2e       	mov	r0, r18
    1f7c:	02 c0       	rjmp	.+4      	; 0x1f82 <GPIO_writePin+0x1bc>
    1f7e:	88 0f       	add	r24, r24
    1f80:	99 1f       	adc	r25, r25
    1f82:	0a 94       	dec	r0
    1f84:	e2 f7       	brpl	.-8      	; 0x1f7e <GPIO_writePin+0x1b8>
    1f86:	80 95       	com	r24
    1f88:	84 23       	and	r24, r20
    1f8a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1f8c:	0f 90       	pop	r0
    1f8e:	0f 90       	pop	r0
    1f90:	0f 90       	pop	r0
    1f92:	0f 90       	pop	r0
    1f94:	0f 90       	pop	r0
    1f96:	cf 91       	pop	r28
    1f98:	df 91       	pop	r29
    1f9a:	08 95       	ret

00001f9c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1f9c:	df 93       	push	r29
    1f9e:	cf 93       	push	r28
    1fa0:	00 d0       	rcall	.+0      	; 0x1fa2 <GPIO_readPin+0x6>
    1fa2:	00 d0       	rcall	.+0      	; 0x1fa4 <GPIO_readPin+0x8>
    1fa4:	0f 92       	push	r0
    1fa6:	cd b7       	in	r28, 0x3d	; 61
    1fa8:	de b7       	in	r29, 0x3e	; 62
    1faa:	8a 83       	std	Y+2, r24	; 0x02
    1fac:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1fae:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1fb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb2:	88 30       	cpi	r24, 0x08	; 8
    1fb4:	08 f0       	brcs	.+2      	; 0x1fb8 <GPIO_readPin+0x1c>
    1fb6:	84 c0       	rjmp	.+264    	; 0x20c0 <GPIO_readPin+0x124>
    1fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fba:	84 30       	cpi	r24, 0x04	; 4
    1fbc:	08 f0       	brcs	.+2      	; 0x1fc0 <GPIO_readPin+0x24>
    1fbe:	80 c0       	rjmp	.+256    	; 0x20c0 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc2:	28 2f       	mov	r18, r24
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	3d 83       	std	Y+5, r19	; 0x05
    1fc8:	2c 83       	std	Y+4, r18	; 0x04
    1fca:	4c 81       	ldd	r20, Y+4	; 0x04
    1fcc:	5d 81       	ldd	r21, Y+5	; 0x05
    1fce:	41 30       	cpi	r20, 0x01	; 1
    1fd0:	51 05       	cpc	r21, r1
    1fd2:	79 f1       	breq	.+94     	; 0x2032 <GPIO_readPin+0x96>
    1fd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fd6:	9d 81       	ldd	r25, Y+5	; 0x05
    1fd8:	82 30       	cpi	r24, 0x02	; 2
    1fda:	91 05       	cpc	r25, r1
    1fdc:	34 f4       	brge	.+12     	; 0x1fea <GPIO_readPin+0x4e>
    1fde:	2c 81       	ldd	r18, Y+4	; 0x04
    1fe0:	3d 81       	ldd	r19, Y+5	; 0x05
    1fe2:	21 15       	cp	r18, r1
    1fe4:	31 05       	cpc	r19, r1
    1fe6:	69 f0       	breq	.+26     	; 0x2002 <GPIO_readPin+0x66>
    1fe8:	6b c0       	rjmp	.+214    	; 0x20c0 <GPIO_readPin+0x124>
    1fea:	4c 81       	ldd	r20, Y+4	; 0x04
    1fec:	5d 81       	ldd	r21, Y+5	; 0x05
    1fee:	42 30       	cpi	r20, 0x02	; 2
    1ff0:	51 05       	cpc	r21, r1
    1ff2:	b9 f1       	breq	.+110    	; 0x2062 <GPIO_readPin+0xc6>
    1ff4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ff8:	83 30       	cpi	r24, 0x03	; 3
    1ffa:	91 05       	cpc	r25, r1
    1ffc:	09 f4       	brne	.+2      	; 0x2000 <GPIO_readPin+0x64>
    1ffe:	49 c0       	rjmp	.+146    	; 0x2092 <GPIO_readPin+0xf6>
    2000:	5f c0       	rjmp	.+190    	; 0x20c0 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    2002:	e9 e3       	ldi	r30, 0x39	; 57
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	28 2f       	mov	r18, r24
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	8b 81       	ldd	r24, Y+3	; 0x03
    200e:	88 2f       	mov	r24, r24
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	a9 01       	movw	r20, r18
    2014:	02 c0       	rjmp	.+4      	; 0x201a <GPIO_readPin+0x7e>
    2016:	55 95       	asr	r21
    2018:	47 95       	ror	r20
    201a:	8a 95       	dec	r24
    201c:	e2 f7       	brpl	.-8      	; 0x2016 <GPIO_readPin+0x7a>
    201e:	ca 01       	movw	r24, r20
    2020:	81 70       	andi	r24, 0x01	; 1
    2022:	90 70       	andi	r25, 0x00	; 0
    2024:	88 23       	and	r24, r24
    2026:	19 f0       	breq	.+6      	; 0x202e <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	89 83       	std	Y+1, r24	; 0x01
    202c:	49 c0       	rjmp	.+146    	; 0x20c0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    202e:	19 82       	std	Y+1, r1	; 0x01
    2030:	47 c0       	rjmp	.+142    	; 0x20c0 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2032:	e6 e3       	ldi	r30, 0x36	; 54
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	80 81       	ld	r24, Z
    2038:	28 2f       	mov	r18, r24
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	8b 81       	ldd	r24, Y+3	; 0x03
    203e:	88 2f       	mov	r24, r24
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	a9 01       	movw	r20, r18
    2044:	02 c0       	rjmp	.+4      	; 0x204a <GPIO_readPin+0xae>
    2046:	55 95       	asr	r21
    2048:	47 95       	ror	r20
    204a:	8a 95       	dec	r24
    204c:	e2 f7       	brpl	.-8      	; 0x2046 <GPIO_readPin+0xaa>
    204e:	ca 01       	movw	r24, r20
    2050:	81 70       	andi	r24, 0x01	; 1
    2052:	90 70       	andi	r25, 0x00	; 0
    2054:	88 23       	and	r24, r24
    2056:	19 f0       	breq	.+6      	; 0x205e <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2058:	81 e0       	ldi	r24, 0x01	; 1
    205a:	89 83       	std	Y+1, r24	; 0x01
    205c:	31 c0       	rjmp	.+98     	; 0x20c0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    205e:	19 82       	std	Y+1, r1	; 0x01
    2060:	2f c0       	rjmp	.+94     	; 0x20c0 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2062:	e3 e3       	ldi	r30, 0x33	; 51
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	80 81       	ld	r24, Z
    2068:	28 2f       	mov	r18, r24
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	8b 81       	ldd	r24, Y+3	; 0x03
    206e:	88 2f       	mov	r24, r24
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	a9 01       	movw	r20, r18
    2074:	02 c0       	rjmp	.+4      	; 0x207a <GPIO_readPin+0xde>
    2076:	55 95       	asr	r21
    2078:	47 95       	ror	r20
    207a:	8a 95       	dec	r24
    207c:	e2 f7       	brpl	.-8      	; 0x2076 <GPIO_readPin+0xda>
    207e:	ca 01       	movw	r24, r20
    2080:	81 70       	andi	r24, 0x01	; 1
    2082:	90 70       	andi	r25, 0x00	; 0
    2084:	88 23       	and	r24, r24
    2086:	19 f0       	breq	.+6      	; 0x208e <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	89 83       	std	Y+1, r24	; 0x01
    208c:	19 c0       	rjmp	.+50     	; 0x20c0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    208e:	19 82       	std	Y+1, r1	; 0x01
    2090:	17 c0       	rjmp	.+46     	; 0x20c0 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2092:	e0 e3       	ldi	r30, 0x30	; 48
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	80 81       	ld	r24, Z
    2098:	28 2f       	mov	r18, r24
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	8b 81       	ldd	r24, Y+3	; 0x03
    209e:	88 2f       	mov	r24, r24
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	a9 01       	movw	r20, r18
    20a4:	02 c0       	rjmp	.+4      	; 0x20aa <GPIO_readPin+0x10e>
    20a6:	55 95       	asr	r21
    20a8:	47 95       	ror	r20
    20aa:	8a 95       	dec	r24
    20ac:	e2 f7       	brpl	.-8      	; 0x20a6 <GPIO_readPin+0x10a>
    20ae:	ca 01       	movw	r24, r20
    20b0:	81 70       	andi	r24, 0x01	; 1
    20b2:	90 70       	andi	r25, 0x00	; 0
    20b4:	88 23       	and	r24, r24
    20b6:	19 f0       	breq	.+6      	; 0x20be <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	89 83       	std	Y+1, r24	; 0x01
    20bc:	01 c0       	rjmp	.+2      	; 0x20c0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    20be:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    20c2:	0f 90       	pop	r0
    20c4:	0f 90       	pop	r0
    20c6:	0f 90       	pop	r0
    20c8:	0f 90       	pop	r0
    20ca:	0f 90       	pop	r0
    20cc:	cf 91       	pop	r28
    20ce:	df 91       	pop	r29
    20d0:	08 95       	ret

000020d2 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    20d2:	df 93       	push	r29
    20d4:	cf 93       	push	r28
    20d6:	00 d0       	rcall	.+0      	; 0x20d8 <GPIO_setupPortDirection+0x6>
    20d8:	00 d0       	rcall	.+0      	; 0x20da <GPIO_setupPortDirection+0x8>
    20da:	cd b7       	in	r28, 0x3d	; 61
    20dc:	de b7       	in	r29, 0x3e	; 62
    20de:	89 83       	std	Y+1, r24	; 0x01
    20e0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    20e2:	89 81       	ldd	r24, Y+1	; 0x01
    20e4:	84 30       	cpi	r24, 0x04	; 4
    20e6:	90 f5       	brcc	.+100    	; 0x214c <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    20e8:	89 81       	ldd	r24, Y+1	; 0x01
    20ea:	28 2f       	mov	r18, r24
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	3c 83       	std	Y+4, r19	; 0x04
    20f0:	2b 83       	std	Y+3, r18	; 0x03
    20f2:	8b 81       	ldd	r24, Y+3	; 0x03
    20f4:	9c 81       	ldd	r25, Y+4	; 0x04
    20f6:	81 30       	cpi	r24, 0x01	; 1
    20f8:	91 05       	cpc	r25, r1
    20fa:	d1 f0       	breq	.+52     	; 0x2130 <GPIO_setupPortDirection+0x5e>
    20fc:	2b 81       	ldd	r18, Y+3	; 0x03
    20fe:	3c 81       	ldd	r19, Y+4	; 0x04
    2100:	22 30       	cpi	r18, 0x02	; 2
    2102:	31 05       	cpc	r19, r1
    2104:	2c f4       	brge	.+10     	; 0x2110 <GPIO_setupPortDirection+0x3e>
    2106:	8b 81       	ldd	r24, Y+3	; 0x03
    2108:	9c 81       	ldd	r25, Y+4	; 0x04
    210a:	00 97       	sbiw	r24, 0x00	; 0
    210c:	61 f0       	breq	.+24     	; 0x2126 <GPIO_setupPortDirection+0x54>
    210e:	1e c0       	rjmp	.+60     	; 0x214c <GPIO_setupPortDirection+0x7a>
    2110:	2b 81       	ldd	r18, Y+3	; 0x03
    2112:	3c 81       	ldd	r19, Y+4	; 0x04
    2114:	22 30       	cpi	r18, 0x02	; 2
    2116:	31 05       	cpc	r19, r1
    2118:	81 f0       	breq	.+32     	; 0x213a <GPIO_setupPortDirection+0x68>
    211a:	8b 81       	ldd	r24, Y+3	; 0x03
    211c:	9c 81       	ldd	r25, Y+4	; 0x04
    211e:	83 30       	cpi	r24, 0x03	; 3
    2120:	91 05       	cpc	r25, r1
    2122:	81 f0       	breq	.+32     	; 0x2144 <GPIO_setupPortDirection+0x72>
    2124:	13 c0       	rjmp	.+38     	; 0x214c <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2126:	ea e3       	ldi	r30, 0x3A	; 58
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	8a 81       	ldd	r24, Y+2	; 0x02
    212c:	80 83       	st	Z, r24
    212e:	0e c0       	rjmp	.+28     	; 0x214c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2130:	e7 e3       	ldi	r30, 0x37	; 55
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	8a 81       	ldd	r24, Y+2	; 0x02
    2136:	80 83       	st	Z, r24
    2138:	09 c0       	rjmp	.+18     	; 0x214c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    213a:	e4 e3       	ldi	r30, 0x34	; 52
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	8a 81       	ldd	r24, Y+2	; 0x02
    2140:	80 83       	st	Z, r24
    2142:	04 c0       	rjmp	.+8      	; 0x214c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2144:	e1 e3       	ldi	r30, 0x31	; 49
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	8a 81       	ldd	r24, Y+2	; 0x02
    214a:	80 83       	st	Z, r24
			break;
		}
	}
}
    214c:	0f 90       	pop	r0
    214e:	0f 90       	pop	r0
    2150:	0f 90       	pop	r0
    2152:	0f 90       	pop	r0
    2154:	cf 91       	pop	r28
    2156:	df 91       	pop	r29
    2158:	08 95       	ret

0000215a <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    215a:	df 93       	push	r29
    215c:	cf 93       	push	r28
    215e:	00 d0       	rcall	.+0      	; 0x2160 <GPIO_writePort+0x6>
    2160:	00 d0       	rcall	.+0      	; 0x2162 <GPIO_writePort+0x8>
    2162:	cd b7       	in	r28, 0x3d	; 61
    2164:	de b7       	in	r29, 0x3e	; 62
    2166:	89 83       	std	Y+1, r24	; 0x01
    2168:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    216a:	89 81       	ldd	r24, Y+1	; 0x01
    216c:	84 30       	cpi	r24, 0x04	; 4
    216e:	90 f5       	brcc	.+100    	; 0x21d4 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2170:	89 81       	ldd	r24, Y+1	; 0x01
    2172:	28 2f       	mov	r18, r24
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	3c 83       	std	Y+4, r19	; 0x04
    2178:	2b 83       	std	Y+3, r18	; 0x03
    217a:	8b 81       	ldd	r24, Y+3	; 0x03
    217c:	9c 81       	ldd	r25, Y+4	; 0x04
    217e:	81 30       	cpi	r24, 0x01	; 1
    2180:	91 05       	cpc	r25, r1
    2182:	d1 f0       	breq	.+52     	; 0x21b8 <GPIO_writePort+0x5e>
    2184:	2b 81       	ldd	r18, Y+3	; 0x03
    2186:	3c 81       	ldd	r19, Y+4	; 0x04
    2188:	22 30       	cpi	r18, 0x02	; 2
    218a:	31 05       	cpc	r19, r1
    218c:	2c f4       	brge	.+10     	; 0x2198 <GPIO_writePort+0x3e>
    218e:	8b 81       	ldd	r24, Y+3	; 0x03
    2190:	9c 81       	ldd	r25, Y+4	; 0x04
    2192:	00 97       	sbiw	r24, 0x00	; 0
    2194:	61 f0       	breq	.+24     	; 0x21ae <GPIO_writePort+0x54>
    2196:	1e c0       	rjmp	.+60     	; 0x21d4 <GPIO_writePort+0x7a>
    2198:	2b 81       	ldd	r18, Y+3	; 0x03
    219a:	3c 81       	ldd	r19, Y+4	; 0x04
    219c:	22 30       	cpi	r18, 0x02	; 2
    219e:	31 05       	cpc	r19, r1
    21a0:	81 f0       	breq	.+32     	; 0x21c2 <GPIO_writePort+0x68>
    21a2:	8b 81       	ldd	r24, Y+3	; 0x03
    21a4:	9c 81       	ldd	r25, Y+4	; 0x04
    21a6:	83 30       	cpi	r24, 0x03	; 3
    21a8:	91 05       	cpc	r25, r1
    21aa:	81 f0       	breq	.+32     	; 0x21cc <GPIO_writePort+0x72>
    21ac:	13 c0       	rjmp	.+38     	; 0x21d4 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    21ae:	eb e3       	ldi	r30, 0x3B	; 59
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	8a 81       	ldd	r24, Y+2	; 0x02
    21b4:	80 83       	st	Z, r24
    21b6:	0e c0       	rjmp	.+28     	; 0x21d4 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    21b8:	e8 e3       	ldi	r30, 0x38	; 56
    21ba:	f0 e0       	ldi	r31, 0x00	; 0
    21bc:	8a 81       	ldd	r24, Y+2	; 0x02
    21be:	80 83       	st	Z, r24
    21c0:	09 c0       	rjmp	.+18     	; 0x21d4 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    21c2:	e5 e3       	ldi	r30, 0x35	; 53
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	8a 81       	ldd	r24, Y+2	; 0x02
    21c8:	80 83       	st	Z, r24
    21ca:	04 c0       	rjmp	.+8      	; 0x21d4 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    21cc:	e2 e3       	ldi	r30, 0x32	; 50
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	8a 81       	ldd	r24, Y+2	; 0x02
    21d2:	80 83       	st	Z, r24
			break;
		}
	}
}
    21d4:	0f 90       	pop	r0
    21d6:	0f 90       	pop	r0
    21d8:	0f 90       	pop	r0
    21da:	0f 90       	pop	r0
    21dc:	cf 91       	pop	r28
    21de:	df 91       	pop	r29
    21e0:	08 95       	ret

000021e2 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    21e2:	df 93       	push	r29
    21e4:	cf 93       	push	r28
    21e6:	00 d0       	rcall	.+0      	; 0x21e8 <GPIO_readPort+0x6>
    21e8:	00 d0       	rcall	.+0      	; 0x21ea <GPIO_readPort+0x8>
    21ea:	cd b7       	in	r28, 0x3d	; 61
    21ec:	de b7       	in	r29, 0x3e	; 62
    21ee:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    21f0:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    21f2:	8a 81       	ldd	r24, Y+2	; 0x02
    21f4:	84 30       	cpi	r24, 0x04	; 4
    21f6:	90 f5       	brcc	.+100    	; 0x225c <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    21f8:	8a 81       	ldd	r24, Y+2	; 0x02
    21fa:	28 2f       	mov	r18, r24
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	3c 83       	std	Y+4, r19	; 0x04
    2200:	2b 83       	std	Y+3, r18	; 0x03
    2202:	8b 81       	ldd	r24, Y+3	; 0x03
    2204:	9c 81       	ldd	r25, Y+4	; 0x04
    2206:	81 30       	cpi	r24, 0x01	; 1
    2208:	91 05       	cpc	r25, r1
    220a:	d1 f0       	breq	.+52     	; 0x2240 <GPIO_readPort+0x5e>
    220c:	2b 81       	ldd	r18, Y+3	; 0x03
    220e:	3c 81       	ldd	r19, Y+4	; 0x04
    2210:	22 30       	cpi	r18, 0x02	; 2
    2212:	31 05       	cpc	r19, r1
    2214:	2c f4       	brge	.+10     	; 0x2220 <GPIO_readPort+0x3e>
    2216:	8b 81       	ldd	r24, Y+3	; 0x03
    2218:	9c 81       	ldd	r25, Y+4	; 0x04
    221a:	00 97       	sbiw	r24, 0x00	; 0
    221c:	61 f0       	breq	.+24     	; 0x2236 <GPIO_readPort+0x54>
    221e:	1e c0       	rjmp	.+60     	; 0x225c <GPIO_readPort+0x7a>
    2220:	2b 81       	ldd	r18, Y+3	; 0x03
    2222:	3c 81       	ldd	r19, Y+4	; 0x04
    2224:	22 30       	cpi	r18, 0x02	; 2
    2226:	31 05       	cpc	r19, r1
    2228:	81 f0       	breq	.+32     	; 0x224a <GPIO_readPort+0x68>
    222a:	8b 81       	ldd	r24, Y+3	; 0x03
    222c:	9c 81       	ldd	r25, Y+4	; 0x04
    222e:	83 30       	cpi	r24, 0x03	; 3
    2230:	91 05       	cpc	r25, r1
    2232:	81 f0       	breq	.+32     	; 0x2254 <GPIO_readPort+0x72>
    2234:	13 c0       	rjmp	.+38     	; 0x225c <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2236:	e9 e3       	ldi	r30, 0x39	; 57
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	80 81       	ld	r24, Z
    223c:	89 83       	std	Y+1, r24	; 0x01
    223e:	0e c0       	rjmp	.+28     	; 0x225c <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2240:	e6 e3       	ldi	r30, 0x36	; 54
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	80 81       	ld	r24, Z
    2246:	89 83       	std	Y+1, r24	; 0x01
    2248:	09 c0       	rjmp	.+18     	; 0x225c <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    224a:	e3 e3       	ldi	r30, 0x33	; 51
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	80 81       	ld	r24, Z
    2250:	89 83       	std	Y+1, r24	; 0x01
    2252:	04 c0       	rjmp	.+8      	; 0x225c <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2254:	e0 e3       	ldi	r30, 0x30	; 48
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	80 81       	ld	r24, Z
    225a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    225c:	89 81       	ldd	r24, Y+1	; 0x01
}
    225e:	0f 90       	pop	r0
    2260:	0f 90       	pop	r0
    2262:	0f 90       	pop	r0
    2264:	0f 90       	pop	r0
    2266:	cf 91       	pop	r28
    2268:	df 91       	pop	r29
    226a:	08 95       	ret

0000226c <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    226c:	df 93       	push	r29
    226e:	cf 93       	push	r28
    2270:	00 d0       	rcall	.+0      	; 0x2272 <KEYPAD_getPressedKey+0x6>
    2272:	0f 92       	push	r0
    2274:	cd b7       	in	r28, 0x3d	; 61
    2276:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    2278:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    227a:	1b 82       	std	Y+3, r1	; 0x03
    227c:	43 c0       	rjmp	.+134    	; 0x2304 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    227e:	82 e0       	ldi	r24, 0x02	; 2
    2280:	60 e0       	ldi	r22, 0x00	; 0
    2282:	0e 94 69 10 	call	0x20d2	; 0x20d2 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    2286:	8b 81       	ldd	r24, Y+3	; 0x03
    2288:	98 2f       	mov	r25, r24
    228a:	9c 5f       	subi	r25, 0xFC	; 252
    228c:	82 e0       	ldi	r24, 0x02	; 2
    228e:	69 2f       	mov	r22, r25
    2290:	41 e0       	ldi	r20, 0x01	; 1
    2292:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    2296:	8b 81       	ldd	r24, Y+3	; 0x03
    2298:	88 2f       	mov	r24, r24
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	9c 01       	movw	r18, r24
    229e:	2c 5f       	subi	r18, 0xFC	; 252
    22a0:	3f 4f       	sbci	r19, 0xFF	; 255
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	02 c0       	rjmp	.+4      	; 0x22ac <KEYPAD_getPressedKey+0x40>
    22a8:	88 0f       	add	r24, r24
    22aa:	99 1f       	adc	r25, r25
    22ac:	2a 95       	dec	r18
    22ae:	e2 f7       	brpl	.-8      	; 0x22a8 <KEYPAD_getPressedKey+0x3c>
    22b0:	80 95       	com	r24
    22b2:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    22b4:	82 e0       	ldi	r24, 0x02	; 2
    22b6:	69 81       	ldd	r22, Y+1	; 0x01
    22b8:	0e 94 ad 10 	call	0x215a	; 0x215a <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    22bc:	1a 82       	std	Y+2, r1	; 0x02
    22be:	1c c0       	rjmp	.+56     	; 0x22f8 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    22c0:	82 e0       	ldi	r24, 0x02	; 2
    22c2:	6a 81       	ldd	r22, Y+2	; 0x02
    22c4:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <GPIO_readPin>
    22c8:	88 23       	and	r24, r24
    22ca:	99 f4       	brne	.+38     	; 0x22f2 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    22cc:	8a 81       	ldd	r24, Y+2	; 0x02
    22ce:	88 2f       	mov	r24, r24
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	88 0f       	add	r24, r24
    22d4:	99 1f       	adc	r25, r25
    22d6:	88 0f       	add	r24, r24
    22d8:	99 1f       	adc	r25, r25
    22da:	98 2f       	mov	r25, r24
    22dc:	8b 81       	ldd	r24, Y+3	; 0x03
    22de:	89 0f       	add	r24, r25
    22e0:	8f 5f       	subi	r24, 0xFF	; 255
    22e2:	0e 94 87 11 	call	0x230e	; 0x230e <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    22e6:	0f 90       	pop	r0
    22e8:	0f 90       	pop	r0
    22ea:	0f 90       	pop	r0
    22ec:	cf 91       	pop	r28
    22ee:	df 91       	pop	r29
    22f0:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    22f2:	8a 81       	ldd	r24, Y+2	; 0x02
    22f4:	8f 5f       	subi	r24, 0xFF	; 255
    22f6:	8a 83       	std	Y+2, r24	; 0x02
    22f8:	8a 81       	ldd	r24, Y+2	; 0x02
    22fa:	84 30       	cpi	r24, 0x04	; 4
    22fc:	08 f3       	brcs	.-62     	; 0x22c0 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    22fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2300:	8f 5f       	subi	r24, 0xFF	; 255
    2302:	8b 83       	std	Y+3, r24	; 0x03
    2304:	8b 81       	ldd	r24, Y+3	; 0x03
    2306:	84 30       	cpi	r24, 0x04	; 4
    2308:	08 f4       	brcc	.+2      	; 0x230c <KEYPAD_getPressedKey+0xa0>
    230a:	b9 cf       	rjmp	.-142    	; 0x227e <KEYPAD_getPressedKey+0x12>
    230c:	b6 cf       	rjmp	.-148    	; 0x227a <KEYPAD_getPressedKey+0xe>

0000230e <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    230e:	df 93       	push	r29
    2310:	cf 93       	push	r28
    2312:	00 d0       	rcall	.+0      	; 0x2314 <KEYPAD_4x4_adjustKeyNumber+0x6>
    2314:	00 d0       	rcall	.+0      	; 0x2316 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2316:	cd b7       	in	r28, 0x3d	; 61
    2318:	de b7       	in	r29, 0x3e	; 62
    231a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    231c:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    231e:	8a 81       	ldd	r24, Y+2	; 0x02
    2320:	28 2f       	mov	r18, r24
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	3c 83       	std	Y+4, r19	; 0x04
    2326:	2b 83       	std	Y+3, r18	; 0x03
    2328:	8b 81       	ldd	r24, Y+3	; 0x03
    232a:	9c 81       	ldd	r25, Y+4	; 0x04
    232c:	88 30       	cpi	r24, 0x08	; 8
    232e:	91 05       	cpc	r25, r1
    2330:	09 f4       	brne	.+2      	; 0x2334 <KEYPAD_4x4_adjustKeyNumber+0x26>
    2332:	70 c0       	rjmp	.+224    	; 0x2414 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2334:	2b 81       	ldd	r18, Y+3	; 0x03
    2336:	3c 81       	ldd	r19, Y+4	; 0x04
    2338:	29 30       	cpi	r18, 0x09	; 9
    233a:	31 05       	cpc	r19, r1
    233c:	5c f5       	brge	.+86     	; 0x2394 <KEYPAD_4x4_adjustKeyNumber+0x86>
    233e:	8b 81       	ldd	r24, Y+3	; 0x03
    2340:	9c 81       	ldd	r25, Y+4	; 0x04
    2342:	84 30       	cpi	r24, 0x04	; 4
    2344:	91 05       	cpc	r25, r1
    2346:	09 f4       	brne	.+2      	; 0x234a <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2348:	59 c0       	rjmp	.+178    	; 0x23fc <KEYPAD_4x4_adjustKeyNumber+0xee>
    234a:	2b 81       	ldd	r18, Y+3	; 0x03
    234c:	3c 81       	ldd	r19, Y+4	; 0x04
    234e:	25 30       	cpi	r18, 0x05	; 5
    2350:	31 05       	cpc	r19, r1
    2352:	9c f4       	brge	.+38     	; 0x237a <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2354:	8b 81       	ldd	r24, Y+3	; 0x03
    2356:	9c 81       	ldd	r25, Y+4	; 0x04
    2358:	82 30       	cpi	r24, 0x02	; 2
    235a:	91 05       	cpc	r25, r1
    235c:	09 f4       	brne	.+2      	; 0x2360 <KEYPAD_4x4_adjustKeyNumber+0x52>
    235e:	48 c0       	rjmp	.+144    	; 0x23f0 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2360:	2b 81       	ldd	r18, Y+3	; 0x03
    2362:	3c 81       	ldd	r19, Y+4	; 0x04
    2364:	23 30       	cpi	r18, 0x03	; 3
    2366:	31 05       	cpc	r19, r1
    2368:	0c f0       	brlt	.+2      	; 0x236c <KEYPAD_4x4_adjustKeyNumber+0x5e>
    236a:	45 c0       	rjmp	.+138    	; 0x23f6 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    236c:	8b 81       	ldd	r24, Y+3	; 0x03
    236e:	9c 81       	ldd	r25, Y+4	; 0x04
    2370:	81 30       	cpi	r24, 0x01	; 1
    2372:	91 05       	cpc	r25, r1
    2374:	09 f4       	brne	.+2      	; 0x2378 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2376:	39 c0       	rjmp	.+114    	; 0x23ea <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2378:	67 c0       	rjmp	.+206    	; 0x2448 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    237a:	2b 81       	ldd	r18, Y+3	; 0x03
    237c:	3c 81       	ldd	r19, Y+4	; 0x04
    237e:	26 30       	cpi	r18, 0x06	; 6
    2380:	31 05       	cpc	r19, r1
    2382:	09 f4       	brne	.+2      	; 0x2386 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2384:	41 c0       	rjmp	.+130    	; 0x2408 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2386:	8b 81       	ldd	r24, Y+3	; 0x03
    2388:	9c 81       	ldd	r25, Y+4	; 0x04
    238a:	87 30       	cpi	r24, 0x07	; 7
    238c:	91 05       	cpc	r25, r1
    238e:	0c f0       	brlt	.+2      	; 0x2392 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2390:	3e c0       	rjmp	.+124    	; 0x240e <KEYPAD_4x4_adjustKeyNumber+0x100>
    2392:	37 c0       	rjmp	.+110    	; 0x2402 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2394:	2b 81       	ldd	r18, Y+3	; 0x03
    2396:	3c 81       	ldd	r19, Y+4	; 0x04
    2398:	2c 30       	cpi	r18, 0x0C	; 12
    239a:	31 05       	cpc	r19, r1
    239c:	09 f4       	brne	.+2      	; 0x23a0 <KEYPAD_4x4_adjustKeyNumber+0x92>
    239e:	46 c0       	rjmp	.+140    	; 0x242c <KEYPAD_4x4_adjustKeyNumber+0x11e>
    23a0:	8b 81       	ldd	r24, Y+3	; 0x03
    23a2:	9c 81       	ldd	r25, Y+4	; 0x04
    23a4:	8d 30       	cpi	r24, 0x0D	; 13
    23a6:	91 05       	cpc	r25, r1
    23a8:	5c f4       	brge	.+22     	; 0x23c0 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    23aa:	2b 81       	ldd	r18, Y+3	; 0x03
    23ac:	3c 81       	ldd	r19, Y+4	; 0x04
    23ae:	2a 30       	cpi	r18, 0x0A	; 10
    23b0:	31 05       	cpc	r19, r1
    23b2:	b1 f1       	breq	.+108    	; 0x2420 <KEYPAD_4x4_adjustKeyNumber+0x112>
    23b4:	8b 81       	ldd	r24, Y+3	; 0x03
    23b6:	9c 81       	ldd	r25, Y+4	; 0x04
    23b8:	8b 30       	cpi	r24, 0x0B	; 11
    23ba:	91 05       	cpc	r25, r1
    23bc:	a4 f5       	brge	.+104    	; 0x2426 <KEYPAD_4x4_adjustKeyNumber+0x118>
    23be:	2d c0       	rjmp	.+90     	; 0x241a <KEYPAD_4x4_adjustKeyNumber+0x10c>
    23c0:	2b 81       	ldd	r18, Y+3	; 0x03
    23c2:	3c 81       	ldd	r19, Y+4	; 0x04
    23c4:	2e 30       	cpi	r18, 0x0E	; 14
    23c6:	31 05       	cpc	r19, r1
    23c8:	b9 f1       	breq	.+110    	; 0x2438 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    23ca:	8b 81       	ldd	r24, Y+3	; 0x03
    23cc:	9c 81       	ldd	r25, Y+4	; 0x04
    23ce:	8e 30       	cpi	r24, 0x0E	; 14
    23d0:	91 05       	cpc	r25, r1
    23d2:	7c f1       	brlt	.+94     	; 0x2432 <KEYPAD_4x4_adjustKeyNumber+0x124>
    23d4:	2b 81       	ldd	r18, Y+3	; 0x03
    23d6:	3c 81       	ldd	r19, Y+4	; 0x04
    23d8:	2f 30       	cpi	r18, 0x0F	; 15
    23da:	31 05       	cpc	r19, r1
    23dc:	79 f1       	breq	.+94     	; 0x243c <KEYPAD_4x4_adjustKeyNumber+0x12e>
    23de:	8b 81       	ldd	r24, Y+3	; 0x03
    23e0:	9c 81       	ldd	r25, Y+4	; 0x04
    23e2:	80 31       	cpi	r24, 0x10	; 16
    23e4:	91 05       	cpc	r25, r1
    23e6:	69 f1       	breq	.+90     	; 0x2442 <KEYPAD_4x4_adjustKeyNumber+0x134>
    23e8:	2f c0       	rjmp	.+94     	; 0x2448 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    23ea:	87 e0       	ldi	r24, 0x07	; 7
    23ec:	89 83       	std	Y+1, r24	; 0x01
    23ee:	2e c0       	rjmp	.+92     	; 0x244c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    23f0:	88 e0       	ldi	r24, 0x08	; 8
    23f2:	89 83       	std	Y+1, r24	; 0x01
    23f4:	2b c0       	rjmp	.+86     	; 0x244c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    23f6:	89 e0       	ldi	r24, 0x09	; 9
    23f8:	89 83       	std	Y+1, r24	; 0x01
    23fa:	28 c0       	rjmp	.+80     	; 0x244c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    23fc:	85 e2       	ldi	r24, 0x25	; 37
    23fe:	89 83       	std	Y+1, r24	; 0x01
    2400:	25 c0       	rjmp	.+74     	; 0x244c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2402:	84 e0       	ldi	r24, 0x04	; 4
    2404:	89 83       	std	Y+1, r24	; 0x01
    2406:	22 c0       	rjmp	.+68     	; 0x244c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2408:	85 e0       	ldi	r24, 0x05	; 5
    240a:	89 83       	std	Y+1, r24	; 0x01
    240c:	1f c0       	rjmp	.+62     	; 0x244c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    240e:	86 e0       	ldi	r24, 0x06	; 6
    2410:	89 83       	std	Y+1, r24	; 0x01
    2412:	1c c0       	rjmp	.+56     	; 0x244c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2414:	8a e2       	ldi	r24, 0x2A	; 42
    2416:	89 83       	std	Y+1, r24	; 0x01
    2418:	19 c0       	rjmp	.+50     	; 0x244c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    241a:	81 e0       	ldi	r24, 0x01	; 1
    241c:	89 83       	std	Y+1, r24	; 0x01
    241e:	16 c0       	rjmp	.+44     	; 0x244c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2420:	82 e0       	ldi	r24, 0x02	; 2
    2422:	89 83       	std	Y+1, r24	; 0x01
    2424:	13 c0       	rjmp	.+38     	; 0x244c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    2426:	83 e0       	ldi	r24, 0x03	; 3
    2428:	89 83       	std	Y+1, r24	; 0x01
    242a:	10 c0       	rjmp	.+32     	; 0x244c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    242c:	8d e2       	ldi	r24, 0x2D	; 45
    242e:	89 83       	std	Y+1, r24	; 0x01
    2430:	0d c0       	rjmp	.+26     	; 0x244c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2432:	8d e0       	ldi	r24, 0x0D	; 13
    2434:	89 83       	std	Y+1, r24	; 0x01
    2436:	0a c0       	rjmp	.+20     	; 0x244c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    2438:	19 82       	std	Y+1, r1	; 0x01
    243a:	08 c0       	rjmp	.+16     	; 0x244c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    243c:	8d e3       	ldi	r24, 0x3D	; 61
    243e:	89 83       	std	Y+1, r24	; 0x01
    2440:	05 c0       	rjmp	.+10     	; 0x244c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2442:	8b e2       	ldi	r24, 0x2B	; 43
    2444:	89 83       	std	Y+1, r24	; 0x01
    2446:	02 c0       	rjmp	.+4      	; 0x244c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2448:	8a 81       	ldd	r24, Y+2	; 0x02
    244a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    244c:	89 81       	ldd	r24, Y+1	; 0x01
} 
    244e:	0f 90       	pop	r0
    2450:	0f 90       	pop	r0
    2452:	0f 90       	pop	r0
    2454:	0f 90       	pop	r0
    2456:	cf 91       	pop	r28
    2458:	df 91       	pop	r29
    245a:	08 95       	ret

0000245c <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    245c:	df 93       	push	r29
    245e:	cf 93       	push	r28
    2460:	cd b7       	in	r28, 0x3d	; 61
    2462:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2464:	80 e0       	ldi	r24, 0x00	; 0
    2466:	65 e0       	ldi	r22, 0x05	; 5
    2468:	41 e0       	ldi	r20, 0x01	; 1
    246a:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    246e:	80 e0       	ldi	r24, 0x00	; 0
    2470:	66 e0       	ldi	r22, 0x06	; 6
    2472:	41 e0       	ldi	r20, 0x01	; 1
    2474:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2478:	80 e0       	ldi	r24, 0x00	; 0
    247a:	67 e0       	ldi	r22, 0x07	; 7
    247c:	41 e0       	ldi	r20, 0x01	; 1
    247e:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2482:	81 e0       	ldi	r24, 0x01	; 1
    2484:	6f ef       	ldi	r22, 0xFF	; 255
    2486:	0e 94 69 10 	call	0x20d2	; 0x20d2 <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    248a:	88 e3       	ldi	r24, 0x38	; 56
    248c:	0e 94 51 12 	call	0x24a2	; 0x24a2 <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2490:	8c e0       	ldi	r24, 0x0C	; 12
    2492:	0e 94 51 12 	call	0x24a2	; 0x24a2 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2496:	81 e0       	ldi	r24, 0x01	; 1
    2498:	0e 94 51 12 	call	0x24a2	; 0x24a2 <LCD_sendCommand>
}
    249c:	cf 91       	pop	r28
    249e:	df 91       	pop	r29
    24a0:	08 95       	ret

000024a2 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    24a2:	df 93       	push	r29
    24a4:	cf 93       	push	r28
    24a6:	cd b7       	in	r28, 0x3d	; 61
    24a8:	de b7       	in	r29, 0x3e	; 62
    24aa:	ea 97       	sbiw	r28, 0x3a	; 58
    24ac:	0f b6       	in	r0, 0x3f	; 63
    24ae:	f8 94       	cli
    24b0:	de bf       	out	0x3e, r29	; 62
    24b2:	0f be       	out	0x3f, r0	; 63
    24b4:	cd bf       	out	0x3d, r28	; 61
    24b6:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    24b8:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    24ba:	80 e0       	ldi	r24, 0x00	; 0
    24bc:	65 e0       	ldi	r22, 0x05	; 5
    24be:	40 e0       	ldi	r20, 0x00	; 0
    24c0:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	66 e0       	ldi	r22, 0x06	; 6
    24c8:	40 e0       	ldi	r20, 0x00	; 0
    24ca:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <GPIO_writePin>
    24ce:	80 e0       	ldi	r24, 0x00	; 0
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	a0 e8       	ldi	r26, 0x80	; 128
    24d4:	bf e3       	ldi	r27, 0x3F	; 63
    24d6:	8d ab       	std	Y+53, r24	; 0x35
    24d8:	9e ab       	std	Y+54, r25	; 0x36
    24da:	af ab       	std	Y+55, r26	; 0x37
    24dc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24de:	6d a9       	ldd	r22, Y+53	; 0x35
    24e0:	7e a9       	ldd	r23, Y+54	; 0x36
    24e2:	8f a9       	ldd	r24, Y+55	; 0x37
    24e4:	98 ad       	ldd	r25, Y+56	; 0x38
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	4a ef       	ldi	r20, 0xFA	; 250
    24ec:	54 e4       	ldi	r21, 0x44	; 68
    24ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f2:	dc 01       	movw	r26, r24
    24f4:	cb 01       	movw	r24, r22
    24f6:	89 ab       	std	Y+49, r24	; 0x31
    24f8:	9a ab       	std	Y+50, r25	; 0x32
    24fa:	ab ab       	std	Y+51, r26	; 0x33
    24fc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    24fe:	69 a9       	ldd	r22, Y+49	; 0x31
    2500:	7a a9       	ldd	r23, Y+50	; 0x32
    2502:	8b a9       	ldd	r24, Y+51	; 0x33
    2504:	9c a9       	ldd	r25, Y+52	; 0x34
    2506:	20 e0       	ldi	r18, 0x00	; 0
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	40 e8       	ldi	r20, 0x80	; 128
    250c:	5f e3       	ldi	r21, 0x3F	; 63
    250e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2512:	88 23       	and	r24, r24
    2514:	2c f4       	brge	.+10     	; 0x2520 <LCD_sendCommand+0x7e>
		__ticks = 1;
    2516:	81 e0       	ldi	r24, 0x01	; 1
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	98 ab       	std	Y+48, r25	; 0x30
    251c:	8f a7       	std	Y+47, r24	; 0x2f
    251e:	3f c0       	rjmp	.+126    	; 0x259e <LCD_sendCommand+0xfc>
	else if (__tmp > 65535)
    2520:	69 a9       	ldd	r22, Y+49	; 0x31
    2522:	7a a9       	ldd	r23, Y+50	; 0x32
    2524:	8b a9       	ldd	r24, Y+51	; 0x33
    2526:	9c a9       	ldd	r25, Y+52	; 0x34
    2528:	20 e0       	ldi	r18, 0x00	; 0
    252a:	3f ef       	ldi	r19, 0xFF	; 255
    252c:	4f e7       	ldi	r20, 0x7F	; 127
    252e:	57 e4       	ldi	r21, 0x47	; 71
    2530:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2534:	18 16       	cp	r1, r24
    2536:	4c f5       	brge	.+82     	; 0x258a <LCD_sendCommand+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2538:	6d a9       	ldd	r22, Y+53	; 0x35
    253a:	7e a9       	ldd	r23, Y+54	; 0x36
    253c:	8f a9       	ldd	r24, Y+55	; 0x37
    253e:	98 ad       	ldd	r25, Y+56	; 0x38
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	40 e2       	ldi	r20, 0x20	; 32
    2546:	51 e4       	ldi	r21, 0x41	; 65
    2548:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	bc 01       	movw	r22, r24
    2552:	cd 01       	movw	r24, r26
    2554:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	98 ab       	std	Y+48, r25	; 0x30
    255e:	8f a7       	std	Y+47, r24	; 0x2f
    2560:	0f c0       	rjmp	.+30     	; 0x2580 <LCD_sendCommand+0xde>
    2562:	88 ec       	ldi	r24, 0xC8	; 200
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	9e a7       	std	Y+46, r25	; 0x2e
    2568:	8d a7       	std	Y+45, r24	; 0x2d
    256a:	8d a5       	ldd	r24, Y+45	; 0x2d
    256c:	9e a5       	ldd	r25, Y+46	; 0x2e
    256e:	01 97       	sbiw	r24, 0x01	; 1
    2570:	f1 f7       	brne	.-4      	; 0x256e <LCD_sendCommand+0xcc>
    2572:	9e a7       	std	Y+46, r25	; 0x2e
    2574:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2576:	8f a5       	ldd	r24, Y+47	; 0x2f
    2578:	98 a9       	ldd	r25, Y+48	; 0x30
    257a:	01 97       	sbiw	r24, 0x01	; 1
    257c:	98 ab       	std	Y+48, r25	; 0x30
    257e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2580:	8f a5       	ldd	r24, Y+47	; 0x2f
    2582:	98 a9       	ldd	r25, Y+48	; 0x30
    2584:	00 97       	sbiw	r24, 0x00	; 0
    2586:	69 f7       	brne	.-38     	; 0x2562 <LCD_sendCommand+0xc0>
    2588:	14 c0       	rjmp	.+40     	; 0x25b2 <LCD_sendCommand+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    258a:	69 a9       	ldd	r22, Y+49	; 0x31
    258c:	7a a9       	ldd	r23, Y+50	; 0x32
    258e:	8b a9       	ldd	r24, Y+51	; 0x33
    2590:	9c a9       	ldd	r25, Y+52	; 0x34
    2592:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2596:	dc 01       	movw	r26, r24
    2598:	cb 01       	movw	r24, r22
    259a:	98 ab       	std	Y+48, r25	; 0x30
    259c:	8f a7       	std	Y+47, r24	; 0x2f
    259e:	8f a5       	ldd	r24, Y+47	; 0x2f
    25a0:	98 a9       	ldd	r25, Y+48	; 0x30
    25a2:	9c a7       	std	Y+44, r25	; 0x2c
    25a4:	8b a7       	std	Y+43, r24	; 0x2b
    25a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    25a8:	9c a5       	ldd	r25, Y+44	; 0x2c
    25aa:	01 97       	sbiw	r24, 0x01	; 1
    25ac:	f1 f7       	brne	.-4      	; 0x25aa <LCD_sendCommand+0x108>
    25ae:	9c a7       	std	Y+44, r25	; 0x2c
    25b0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    25b2:	80 e0       	ldi	r24, 0x00	; 0
    25b4:	67 e0       	ldi	r22, 0x07	; 7
    25b6:	41 e0       	ldi	r20, 0x01	; 1
    25b8:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <GPIO_writePin>
    25bc:	80 e0       	ldi	r24, 0x00	; 0
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	a0 e8       	ldi	r26, 0x80	; 128
    25c2:	bf e3       	ldi	r27, 0x3F	; 63
    25c4:	8f a3       	std	Y+39, r24	; 0x27
    25c6:	98 a7       	std	Y+40, r25	; 0x28
    25c8:	a9 a7       	std	Y+41, r26	; 0x29
    25ca:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25cc:	6f a1       	ldd	r22, Y+39	; 0x27
    25ce:	78 a5       	ldd	r23, Y+40	; 0x28
    25d0:	89 a5       	ldd	r24, Y+41	; 0x29
    25d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	4a ef       	ldi	r20, 0xFA	; 250
    25da:	54 e4       	ldi	r21, 0x44	; 68
    25dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e0:	dc 01       	movw	r26, r24
    25e2:	cb 01       	movw	r24, r22
    25e4:	8b a3       	std	Y+35, r24	; 0x23
    25e6:	9c a3       	std	Y+36, r25	; 0x24
    25e8:	ad a3       	std	Y+37, r26	; 0x25
    25ea:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    25ec:	6b a1       	ldd	r22, Y+35	; 0x23
    25ee:	7c a1       	ldd	r23, Y+36	; 0x24
    25f0:	8d a1       	ldd	r24, Y+37	; 0x25
    25f2:	9e a1       	ldd	r25, Y+38	; 0x26
    25f4:	20 e0       	ldi	r18, 0x00	; 0
    25f6:	30 e0       	ldi	r19, 0x00	; 0
    25f8:	40 e8       	ldi	r20, 0x80	; 128
    25fa:	5f e3       	ldi	r21, 0x3F	; 63
    25fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2600:	88 23       	and	r24, r24
    2602:	2c f4       	brge	.+10     	; 0x260e <LCD_sendCommand+0x16c>
		__ticks = 1;
    2604:	81 e0       	ldi	r24, 0x01	; 1
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	9a a3       	std	Y+34, r25	; 0x22
    260a:	89 a3       	std	Y+33, r24	; 0x21
    260c:	3f c0       	rjmp	.+126    	; 0x268c <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    260e:	6b a1       	ldd	r22, Y+35	; 0x23
    2610:	7c a1       	ldd	r23, Y+36	; 0x24
    2612:	8d a1       	ldd	r24, Y+37	; 0x25
    2614:	9e a1       	ldd	r25, Y+38	; 0x26
    2616:	20 e0       	ldi	r18, 0x00	; 0
    2618:	3f ef       	ldi	r19, 0xFF	; 255
    261a:	4f e7       	ldi	r20, 0x7F	; 127
    261c:	57 e4       	ldi	r21, 0x47	; 71
    261e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2622:	18 16       	cp	r1, r24
    2624:	4c f5       	brge	.+82     	; 0x2678 <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2626:	6f a1       	ldd	r22, Y+39	; 0x27
    2628:	78 a5       	ldd	r23, Y+40	; 0x28
    262a:	89 a5       	ldd	r24, Y+41	; 0x29
    262c:	9a a5       	ldd	r25, Y+42	; 0x2a
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	40 e2       	ldi	r20, 0x20	; 32
    2634:	51 e4       	ldi	r21, 0x41	; 65
    2636:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    263a:	dc 01       	movw	r26, r24
    263c:	cb 01       	movw	r24, r22
    263e:	bc 01       	movw	r22, r24
    2640:	cd 01       	movw	r24, r26
    2642:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2646:	dc 01       	movw	r26, r24
    2648:	cb 01       	movw	r24, r22
    264a:	9a a3       	std	Y+34, r25	; 0x22
    264c:	89 a3       	std	Y+33, r24	; 0x21
    264e:	0f c0       	rjmp	.+30     	; 0x266e <LCD_sendCommand+0x1cc>
    2650:	88 ec       	ldi	r24, 0xC8	; 200
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	98 a3       	std	Y+32, r25	; 0x20
    2656:	8f 8f       	std	Y+31, r24	; 0x1f
    2658:	8f 8d       	ldd	r24, Y+31	; 0x1f
    265a:	98 a1       	ldd	r25, Y+32	; 0x20
    265c:	01 97       	sbiw	r24, 0x01	; 1
    265e:	f1 f7       	brne	.-4      	; 0x265c <LCD_sendCommand+0x1ba>
    2660:	98 a3       	std	Y+32, r25	; 0x20
    2662:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2664:	89 a1       	ldd	r24, Y+33	; 0x21
    2666:	9a a1       	ldd	r25, Y+34	; 0x22
    2668:	01 97       	sbiw	r24, 0x01	; 1
    266a:	9a a3       	std	Y+34, r25	; 0x22
    266c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    266e:	89 a1       	ldd	r24, Y+33	; 0x21
    2670:	9a a1       	ldd	r25, Y+34	; 0x22
    2672:	00 97       	sbiw	r24, 0x00	; 0
    2674:	69 f7       	brne	.-38     	; 0x2650 <LCD_sendCommand+0x1ae>
    2676:	14 c0       	rjmp	.+40     	; 0x26a0 <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2678:	6b a1       	ldd	r22, Y+35	; 0x23
    267a:	7c a1       	ldd	r23, Y+36	; 0x24
    267c:	8d a1       	ldd	r24, Y+37	; 0x25
    267e:	9e a1       	ldd	r25, Y+38	; 0x26
    2680:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2684:	dc 01       	movw	r26, r24
    2686:	cb 01       	movw	r24, r22
    2688:	9a a3       	std	Y+34, r25	; 0x22
    268a:	89 a3       	std	Y+33, r24	; 0x21
    268c:	89 a1       	ldd	r24, Y+33	; 0x21
    268e:	9a a1       	ldd	r25, Y+34	; 0x22
    2690:	9e 8f       	std	Y+30, r25	; 0x1e
    2692:	8d 8f       	std	Y+29, r24	; 0x1d
    2694:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2696:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2698:	01 97       	sbiw	r24, 0x01	; 1
    269a:	f1 f7       	brne	.-4      	; 0x2698 <LCD_sendCommand+0x1f6>
    269c:	9e 8f       	std	Y+30, r25	; 0x1e
    269e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	6a ad       	ldd	r22, Y+58	; 0x3a
    26a4:	0e 94 ad 10 	call	0x215a	; 0x215a <GPIO_writePort>
    26a8:	80 e0       	ldi	r24, 0x00	; 0
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	a0 e8       	ldi	r26, 0x80	; 128
    26ae:	bf e3       	ldi	r27, 0x3F	; 63
    26b0:	89 8f       	std	Y+25, r24	; 0x19
    26b2:	9a 8f       	std	Y+26, r25	; 0x1a
    26b4:	ab 8f       	std	Y+27, r26	; 0x1b
    26b6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26b8:	69 8d       	ldd	r22, Y+25	; 0x19
    26ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	4a ef       	ldi	r20, 0xFA	; 250
    26c6:	54 e4       	ldi	r21, 0x44	; 68
    26c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	8d 8b       	std	Y+21, r24	; 0x15
    26d2:	9e 8b       	std	Y+22, r25	; 0x16
    26d4:	af 8b       	std	Y+23, r26	; 0x17
    26d6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26d8:	6d 89       	ldd	r22, Y+21	; 0x15
    26da:	7e 89       	ldd	r23, Y+22	; 0x16
    26dc:	8f 89       	ldd	r24, Y+23	; 0x17
    26de:	98 8d       	ldd	r25, Y+24	; 0x18
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	40 e8       	ldi	r20, 0x80	; 128
    26e6:	5f e3       	ldi	r21, 0x3F	; 63
    26e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26ec:	88 23       	and	r24, r24
    26ee:	2c f4       	brge	.+10     	; 0x26fa <LCD_sendCommand+0x258>
		__ticks = 1;
    26f0:	81 e0       	ldi	r24, 0x01	; 1
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	9c 8b       	std	Y+20, r25	; 0x14
    26f6:	8b 8b       	std	Y+19, r24	; 0x13
    26f8:	3f c0       	rjmp	.+126    	; 0x2778 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    26fa:	6d 89       	ldd	r22, Y+21	; 0x15
    26fc:	7e 89       	ldd	r23, Y+22	; 0x16
    26fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2700:	98 8d       	ldd	r25, Y+24	; 0x18
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	3f ef       	ldi	r19, 0xFF	; 255
    2706:	4f e7       	ldi	r20, 0x7F	; 127
    2708:	57 e4       	ldi	r21, 0x47	; 71
    270a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    270e:	18 16       	cp	r1, r24
    2710:	4c f5       	brge	.+82     	; 0x2764 <LCD_sendCommand+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2712:	69 8d       	ldd	r22, Y+25	; 0x19
    2714:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2716:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2718:	9c 8d       	ldd	r25, Y+28	; 0x1c
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	40 e2       	ldi	r20, 0x20	; 32
    2720:	51 e4       	ldi	r21, 0x41	; 65
    2722:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2726:	dc 01       	movw	r26, r24
    2728:	cb 01       	movw	r24, r22
    272a:	bc 01       	movw	r22, r24
    272c:	cd 01       	movw	r24, r26
    272e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	9c 8b       	std	Y+20, r25	; 0x14
    2738:	8b 8b       	std	Y+19, r24	; 0x13
    273a:	0f c0       	rjmp	.+30     	; 0x275a <LCD_sendCommand+0x2b8>
    273c:	88 ec       	ldi	r24, 0xC8	; 200
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	9a 8b       	std	Y+18, r25	; 0x12
    2742:	89 8b       	std	Y+17, r24	; 0x11
    2744:	89 89       	ldd	r24, Y+17	; 0x11
    2746:	9a 89       	ldd	r25, Y+18	; 0x12
    2748:	01 97       	sbiw	r24, 0x01	; 1
    274a:	f1 f7       	brne	.-4      	; 0x2748 <LCD_sendCommand+0x2a6>
    274c:	9a 8b       	std	Y+18, r25	; 0x12
    274e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2750:	8b 89       	ldd	r24, Y+19	; 0x13
    2752:	9c 89       	ldd	r25, Y+20	; 0x14
    2754:	01 97       	sbiw	r24, 0x01	; 1
    2756:	9c 8b       	std	Y+20, r25	; 0x14
    2758:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    275a:	8b 89       	ldd	r24, Y+19	; 0x13
    275c:	9c 89       	ldd	r25, Y+20	; 0x14
    275e:	00 97       	sbiw	r24, 0x00	; 0
    2760:	69 f7       	brne	.-38     	; 0x273c <LCD_sendCommand+0x29a>
    2762:	14 c0       	rjmp	.+40     	; 0x278c <LCD_sendCommand+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2764:	6d 89       	ldd	r22, Y+21	; 0x15
    2766:	7e 89       	ldd	r23, Y+22	; 0x16
    2768:	8f 89       	ldd	r24, Y+23	; 0x17
    276a:	98 8d       	ldd	r25, Y+24	; 0x18
    276c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2770:	dc 01       	movw	r26, r24
    2772:	cb 01       	movw	r24, r22
    2774:	9c 8b       	std	Y+20, r25	; 0x14
    2776:	8b 8b       	std	Y+19, r24	; 0x13
    2778:	8b 89       	ldd	r24, Y+19	; 0x13
    277a:	9c 89       	ldd	r25, Y+20	; 0x14
    277c:	98 8b       	std	Y+16, r25	; 0x10
    277e:	8f 87       	std	Y+15, r24	; 0x0f
    2780:	8f 85       	ldd	r24, Y+15	; 0x0f
    2782:	98 89       	ldd	r25, Y+16	; 0x10
    2784:	01 97       	sbiw	r24, 0x01	; 1
    2786:	f1 f7       	brne	.-4      	; 0x2784 <LCD_sendCommand+0x2e2>
    2788:	98 8b       	std	Y+16, r25	; 0x10
    278a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    278c:	80 e0       	ldi	r24, 0x00	; 0
    278e:	67 e0       	ldi	r22, 0x07	; 7
    2790:	40 e0       	ldi	r20, 0x00	; 0
    2792:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <GPIO_writePin>
    2796:	80 e0       	ldi	r24, 0x00	; 0
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	a0 e8       	ldi	r26, 0x80	; 128
    279c:	bf e3       	ldi	r27, 0x3F	; 63
    279e:	8b 87       	std	Y+11, r24	; 0x0b
    27a0:	9c 87       	std	Y+12, r25	; 0x0c
    27a2:	ad 87       	std	Y+13, r26	; 0x0d
    27a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    27a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    27aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    27ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    27ae:	20 e0       	ldi	r18, 0x00	; 0
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	4a ef       	ldi	r20, 0xFA	; 250
    27b4:	54 e4       	ldi	r21, 0x44	; 68
    27b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ba:	dc 01       	movw	r26, r24
    27bc:	cb 01       	movw	r24, r22
    27be:	8f 83       	std	Y+7, r24	; 0x07
    27c0:	98 87       	std	Y+8, r25	; 0x08
    27c2:	a9 87       	std	Y+9, r26	; 0x09
    27c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27c6:	6f 81       	ldd	r22, Y+7	; 0x07
    27c8:	78 85       	ldd	r23, Y+8	; 0x08
    27ca:	89 85       	ldd	r24, Y+9	; 0x09
    27cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	40 e8       	ldi	r20, 0x80	; 128
    27d4:	5f e3       	ldi	r21, 0x3F	; 63
    27d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27da:	88 23       	and	r24, r24
    27dc:	2c f4       	brge	.+10     	; 0x27e8 <LCD_sendCommand+0x346>
		__ticks = 1;
    27de:	81 e0       	ldi	r24, 0x01	; 1
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	9e 83       	std	Y+6, r25	; 0x06
    27e4:	8d 83       	std	Y+5, r24	; 0x05
    27e6:	3f c0       	rjmp	.+126    	; 0x2866 <LCD_sendCommand+0x3c4>
	else if (__tmp > 65535)
    27e8:	6f 81       	ldd	r22, Y+7	; 0x07
    27ea:	78 85       	ldd	r23, Y+8	; 0x08
    27ec:	89 85       	ldd	r24, Y+9	; 0x09
    27ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f0:	20 e0       	ldi	r18, 0x00	; 0
    27f2:	3f ef       	ldi	r19, 0xFF	; 255
    27f4:	4f e7       	ldi	r20, 0x7F	; 127
    27f6:	57 e4       	ldi	r21, 0x47	; 71
    27f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27fc:	18 16       	cp	r1, r24
    27fe:	4c f5       	brge	.+82     	; 0x2852 <LCD_sendCommand+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2800:	6b 85       	ldd	r22, Y+11	; 0x0b
    2802:	7c 85       	ldd	r23, Y+12	; 0x0c
    2804:	8d 85       	ldd	r24, Y+13	; 0x0d
    2806:	9e 85       	ldd	r25, Y+14	; 0x0e
    2808:	20 e0       	ldi	r18, 0x00	; 0
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	40 e2       	ldi	r20, 0x20	; 32
    280e:	51 e4       	ldi	r21, 0x41	; 65
    2810:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2814:	dc 01       	movw	r26, r24
    2816:	cb 01       	movw	r24, r22
    2818:	bc 01       	movw	r22, r24
    281a:	cd 01       	movw	r24, r26
    281c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2820:	dc 01       	movw	r26, r24
    2822:	cb 01       	movw	r24, r22
    2824:	9e 83       	std	Y+6, r25	; 0x06
    2826:	8d 83       	std	Y+5, r24	; 0x05
    2828:	0f c0       	rjmp	.+30     	; 0x2848 <LCD_sendCommand+0x3a6>
    282a:	88 ec       	ldi	r24, 0xC8	; 200
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	9c 83       	std	Y+4, r25	; 0x04
    2830:	8b 83       	std	Y+3, r24	; 0x03
    2832:	8b 81       	ldd	r24, Y+3	; 0x03
    2834:	9c 81       	ldd	r25, Y+4	; 0x04
    2836:	01 97       	sbiw	r24, 0x01	; 1
    2838:	f1 f7       	brne	.-4      	; 0x2836 <LCD_sendCommand+0x394>
    283a:	9c 83       	std	Y+4, r25	; 0x04
    283c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    283e:	8d 81       	ldd	r24, Y+5	; 0x05
    2840:	9e 81       	ldd	r25, Y+6	; 0x06
    2842:	01 97       	sbiw	r24, 0x01	; 1
    2844:	9e 83       	std	Y+6, r25	; 0x06
    2846:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2848:	8d 81       	ldd	r24, Y+5	; 0x05
    284a:	9e 81       	ldd	r25, Y+6	; 0x06
    284c:	00 97       	sbiw	r24, 0x00	; 0
    284e:	69 f7       	brne	.-38     	; 0x282a <LCD_sendCommand+0x388>
    2850:	14 c0       	rjmp	.+40     	; 0x287a <LCD_sendCommand+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2852:	6f 81       	ldd	r22, Y+7	; 0x07
    2854:	78 85       	ldd	r23, Y+8	; 0x08
    2856:	89 85       	ldd	r24, Y+9	; 0x09
    2858:	9a 85       	ldd	r25, Y+10	; 0x0a
    285a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    285e:	dc 01       	movw	r26, r24
    2860:	cb 01       	movw	r24, r22
    2862:	9e 83       	std	Y+6, r25	; 0x06
    2864:	8d 83       	std	Y+5, r24	; 0x05
    2866:	8d 81       	ldd	r24, Y+5	; 0x05
    2868:	9e 81       	ldd	r25, Y+6	; 0x06
    286a:	9a 83       	std	Y+2, r25	; 0x02
    286c:	89 83       	std	Y+1, r24	; 0x01
    286e:	89 81       	ldd	r24, Y+1	; 0x01
    2870:	9a 81       	ldd	r25, Y+2	; 0x02
    2872:	01 97       	sbiw	r24, 0x01	; 1
    2874:	f1 f7       	brne	.-4      	; 0x2872 <LCD_sendCommand+0x3d0>
    2876:	9a 83       	std	Y+2, r25	; 0x02
    2878:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    287a:	ea 96       	adiw	r28, 0x3a	; 58
    287c:	0f b6       	in	r0, 0x3f	; 63
    287e:	f8 94       	cli
    2880:	de bf       	out	0x3e, r29	; 62
    2882:	0f be       	out	0x3f, r0	; 63
    2884:	cd bf       	out	0x3d, r28	; 61
    2886:	cf 91       	pop	r28
    2888:	df 91       	pop	r29
    288a:	08 95       	ret

0000288c <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    288c:	df 93       	push	r29
    288e:	cf 93       	push	r28
    2890:	cd b7       	in	r28, 0x3d	; 61
    2892:	de b7       	in	r29, 0x3e	; 62
    2894:	ea 97       	sbiw	r28, 0x3a	; 58
    2896:	0f b6       	in	r0, 0x3f	; 63
    2898:	f8 94       	cli
    289a:	de bf       	out	0x3e, r29	; 62
    289c:	0f be       	out	0x3f, r0	; 63
    289e:	cd bf       	out	0x3d, r28	; 61
    28a0:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    28a2:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    28a4:	80 e0       	ldi	r24, 0x00	; 0
    28a6:	65 e0       	ldi	r22, 0x05	; 5
    28a8:	41 e0       	ldi	r20, 0x01	; 1
    28aa:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    28ae:	80 e0       	ldi	r24, 0x00	; 0
    28b0:	66 e0       	ldi	r22, 0x06	; 6
    28b2:	40 e0       	ldi	r20, 0x00	; 0
    28b4:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <GPIO_writePin>
    28b8:	80 e0       	ldi	r24, 0x00	; 0
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	a0 e8       	ldi	r26, 0x80	; 128
    28be:	bf e3       	ldi	r27, 0x3F	; 63
    28c0:	8d ab       	std	Y+53, r24	; 0x35
    28c2:	9e ab       	std	Y+54, r25	; 0x36
    28c4:	af ab       	std	Y+55, r26	; 0x37
    28c6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28c8:	6d a9       	ldd	r22, Y+53	; 0x35
    28ca:	7e a9       	ldd	r23, Y+54	; 0x36
    28cc:	8f a9       	ldd	r24, Y+55	; 0x37
    28ce:	98 ad       	ldd	r25, Y+56	; 0x38
    28d0:	20 e0       	ldi	r18, 0x00	; 0
    28d2:	30 e0       	ldi	r19, 0x00	; 0
    28d4:	4a ef       	ldi	r20, 0xFA	; 250
    28d6:	54 e4       	ldi	r21, 0x44	; 68
    28d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	89 ab       	std	Y+49, r24	; 0x31
    28e2:	9a ab       	std	Y+50, r25	; 0x32
    28e4:	ab ab       	std	Y+51, r26	; 0x33
    28e6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    28e8:	69 a9       	ldd	r22, Y+49	; 0x31
    28ea:	7a a9       	ldd	r23, Y+50	; 0x32
    28ec:	8b a9       	ldd	r24, Y+51	; 0x33
    28ee:	9c a9       	ldd	r25, Y+52	; 0x34
    28f0:	20 e0       	ldi	r18, 0x00	; 0
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	40 e8       	ldi	r20, 0x80	; 128
    28f6:	5f e3       	ldi	r21, 0x3F	; 63
    28f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28fc:	88 23       	and	r24, r24
    28fe:	2c f4       	brge	.+10     	; 0x290a <LCD_displayCharacter+0x7e>
		__ticks = 1;
    2900:	81 e0       	ldi	r24, 0x01	; 1
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	98 ab       	std	Y+48, r25	; 0x30
    2906:	8f a7       	std	Y+47, r24	; 0x2f
    2908:	3f c0       	rjmp	.+126    	; 0x2988 <LCD_displayCharacter+0xfc>
	else if (__tmp > 65535)
    290a:	69 a9       	ldd	r22, Y+49	; 0x31
    290c:	7a a9       	ldd	r23, Y+50	; 0x32
    290e:	8b a9       	ldd	r24, Y+51	; 0x33
    2910:	9c a9       	ldd	r25, Y+52	; 0x34
    2912:	20 e0       	ldi	r18, 0x00	; 0
    2914:	3f ef       	ldi	r19, 0xFF	; 255
    2916:	4f e7       	ldi	r20, 0x7F	; 127
    2918:	57 e4       	ldi	r21, 0x47	; 71
    291a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    291e:	18 16       	cp	r1, r24
    2920:	4c f5       	brge	.+82     	; 0x2974 <LCD_displayCharacter+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2922:	6d a9       	ldd	r22, Y+53	; 0x35
    2924:	7e a9       	ldd	r23, Y+54	; 0x36
    2926:	8f a9       	ldd	r24, Y+55	; 0x37
    2928:	98 ad       	ldd	r25, Y+56	; 0x38
    292a:	20 e0       	ldi	r18, 0x00	; 0
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	40 e2       	ldi	r20, 0x20	; 32
    2930:	51 e4       	ldi	r21, 0x41	; 65
    2932:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2936:	dc 01       	movw	r26, r24
    2938:	cb 01       	movw	r24, r22
    293a:	bc 01       	movw	r22, r24
    293c:	cd 01       	movw	r24, r26
    293e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2942:	dc 01       	movw	r26, r24
    2944:	cb 01       	movw	r24, r22
    2946:	98 ab       	std	Y+48, r25	; 0x30
    2948:	8f a7       	std	Y+47, r24	; 0x2f
    294a:	0f c0       	rjmp	.+30     	; 0x296a <LCD_displayCharacter+0xde>
    294c:	88 ec       	ldi	r24, 0xC8	; 200
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	9e a7       	std	Y+46, r25	; 0x2e
    2952:	8d a7       	std	Y+45, r24	; 0x2d
    2954:	8d a5       	ldd	r24, Y+45	; 0x2d
    2956:	9e a5       	ldd	r25, Y+46	; 0x2e
    2958:	01 97       	sbiw	r24, 0x01	; 1
    295a:	f1 f7       	brne	.-4      	; 0x2958 <LCD_displayCharacter+0xcc>
    295c:	9e a7       	std	Y+46, r25	; 0x2e
    295e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2960:	8f a5       	ldd	r24, Y+47	; 0x2f
    2962:	98 a9       	ldd	r25, Y+48	; 0x30
    2964:	01 97       	sbiw	r24, 0x01	; 1
    2966:	98 ab       	std	Y+48, r25	; 0x30
    2968:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    296a:	8f a5       	ldd	r24, Y+47	; 0x2f
    296c:	98 a9       	ldd	r25, Y+48	; 0x30
    296e:	00 97       	sbiw	r24, 0x00	; 0
    2970:	69 f7       	brne	.-38     	; 0x294c <LCD_displayCharacter+0xc0>
    2972:	14 c0       	rjmp	.+40     	; 0x299c <LCD_displayCharacter+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2974:	69 a9       	ldd	r22, Y+49	; 0x31
    2976:	7a a9       	ldd	r23, Y+50	; 0x32
    2978:	8b a9       	ldd	r24, Y+51	; 0x33
    297a:	9c a9       	ldd	r25, Y+52	; 0x34
    297c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2980:	dc 01       	movw	r26, r24
    2982:	cb 01       	movw	r24, r22
    2984:	98 ab       	std	Y+48, r25	; 0x30
    2986:	8f a7       	std	Y+47, r24	; 0x2f
    2988:	8f a5       	ldd	r24, Y+47	; 0x2f
    298a:	98 a9       	ldd	r25, Y+48	; 0x30
    298c:	9c a7       	std	Y+44, r25	; 0x2c
    298e:	8b a7       	std	Y+43, r24	; 0x2b
    2990:	8b a5       	ldd	r24, Y+43	; 0x2b
    2992:	9c a5       	ldd	r25, Y+44	; 0x2c
    2994:	01 97       	sbiw	r24, 0x01	; 1
    2996:	f1 f7       	brne	.-4      	; 0x2994 <LCD_displayCharacter+0x108>
    2998:	9c a7       	std	Y+44, r25	; 0x2c
    299a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    299c:	80 e0       	ldi	r24, 0x00	; 0
    299e:	67 e0       	ldi	r22, 0x07	; 7
    29a0:	41 e0       	ldi	r20, 0x01	; 1
    29a2:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <GPIO_writePin>
    29a6:	80 e0       	ldi	r24, 0x00	; 0
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	a0 e8       	ldi	r26, 0x80	; 128
    29ac:	bf e3       	ldi	r27, 0x3F	; 63
    29ae:	8f a3       	std	Y+39, r24	; 0x27
    29b0:	98 a7       	std	Y+40, r25	; 0x28
    29b2:	a9 a7       	std	Y+41, r26	; 0x29
    29b4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29b6:	6f a1       	ldd	r22, Y+39	; 0x27
    29b8:	78 a5       	ldd	r23, Y+40	; 0x28
    29ba:	89 a5       	ldd	r24, Y+41	; 0x29
    29bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    29be:	20 e0       	ldi	r18, 0x00	; 0
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	4a ef       	ldi	r20, 0xFA	; 250
    29c4:	54 e4       	ldi	r21, 0x44	; 68
    29c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ca:	dc 01       	movw	r26, r24
    29cc:	cb 01       	movw	r24, r22
    29ce:	8b a3       	std	Y+35, r24	; 0x23
    29d0:	9c a3       	std	Y+36, r25	; 0x24
    29d2:	ad a3       	std	Y+37, r26	; 0x25
    29d4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29d6:	6b a1       	ldd	r22, Y+35	; 0x23
    29d8:	7c a1       	ldd	r23, Y+36	; 0x24
    29da:	8d a1       	ldd	r24, Y+37	; 0x25
    29dc:	9e a1       	ldd	r25, Y+38	; 0x26
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	40 e8       	ldi	r20, 0x80	; 128
    29e4:	5f e3       	ldi	r21, 0x3F	; 63
    29e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29ea:	88 23       	and	r24, r24
    29ec:	2c f4       	brge	.+10     	; 0x29f8 <LCD_displayCharacter+0x16c>
		__ticks = 1;
    29ee:	81 e0       	ldi	r24, 0x01	; 1
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	9a a3       	std	Y+34, r25	; 0x22
    29f4:	89 a3       	std	Y+33, r24	; 0x21
    29f6:	3f c0       	rjmp	.+126    	; 0x2a76 <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    29f8:	6b a1       	ldd	r22, Y+35	; 0x23
    29fa:	7c a1       	ldd	r23, Y+36	; 0x24
    29fc:	8d a1       	ldd	r24, Y+37	; 0x25
    29fe:	9e a1       	ldd	r25, Y+38	; 0x26
    2a00:	20 e0       	ldi	r18, 0x00	; 0
    2a02:	3f ef       	ldi	r19, 0xFF	; 255
    2a04:	4f e7       	ldi	r20, 0x7F	; 127
    2a06:	57 e4       	ldi	r21, 0x47	; 71
    2a08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a0c:	18 16       	cp	r1, r24
    2a0e:	4c f5       	brge	.+82     	; 0x2a62 <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a10:	6f a1       	ldd	r22, Y+39	; 0x27
    2a12:	78 a5       	ldd	r23, Y+40	; 0x28
    2a14:	89 a5       	ldd	r24, Y+41	; 0x29
    2a16:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	40 e2       	ldi	r20, 0x20	; 32
    2a1e:	51 e4       	ldi	r21, 0x41	; 65
    2a20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	bc 01       	movw	r22, r24
    2a2a:	cd 01       	movw	r24, r26
    2a2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a30:	dc 01       	movw	r26, r24
    2a32:	cb 01       	movw	r24, r22
    2a34:	9a a3       	std	Y+34, r25	; 0x22
    2a36:	89 a3       	std	Y+33, r24	; 0x21
    2a38:	0f c0       	rjmp	.+30     	; 0x2a58 <LCD_displayCharacter+0x1cc>
    2a3a:	88 ec       	ldi	r24, 0xC8	; 200
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	98 a3       	std	Y+32, r25	; 0x20
    2a40:	8f 8f       	std	Y+31, r24	; 0x1f
    2a42:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a44:	98 a1       	ldd	r25, Y+32	; 0x20
    2a46:	01 97       	sbiw	r24, 0x01	; 1
    2a48:	f1 f7       	brne	.-4      	; 0x2a46 <LCD_displayCharacter+0x1ba>
    2a4a:	98 a3       	std	Y+32, r25	; 0x20
    2a4c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a4e:	89 a1       	ldd	r24, Y+33	; 0x21
    2a50:	9a a1       	ldd	r25, Y+34	; 0x22
    2a52:	01 97       	sbiw	r24, 0x01	; 1
    2a54:	9a a3       	std	Y+34, r25	; 0x22
    2a56:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a58:	89 a1       	ldd	r24, Y+33	; 0x21
    2a5a:	9a a1       	ldd	r25, Y+34	; 0x22
    2a5c:	00 97       	sbiw	r24, 0x00	; 0
    2a5e:	69 f7       	brne	.-38     	; 0x2a3a <LCD_displayCharacter+0x1ae>
    2a60:	14 c0       	rjmp	.+40     	; 0x2a8a <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a62:	6b a1       	ldd	r22, Y+35	; 0x23
    2a64:	7c a1       	ldd	r23, Y+36	; 0x24
    2a66:	8d a1       	ldd	r24, Y+37	; 0x25
    2a68:	9e a1       	ldd	r25, Y+38	; 0x26
    2a6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	9a a3       	std	Y+34, r25	; 0x22
    2a74:	89 a3       	std	Y+33, r24	; 0x21
    2a76:	89 a1       	ldd	r24, Y+33	; 0x21
    2a78:	9a a1       	ldd	r25, Y+34	; 0x22
    2a7a:	9e 8f       	std	Y+30, r25	; 0x1e
    2a7c:	8d 8f       	std	Y+29, r24	; 0x1d
    2a7e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a80:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a82:	01 97       	sbiw	r24, 0x01	; 1
    2a84:	f1 f7       	brne	.-4      	; 0x2a82 <LCD_displayCharacter+0x1f6>
    2a86:	9e 8f       	std	Y+30, r25	; 0x1e
    2a88:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
    2a8a:	81 e0       	ldi	r24, 0x01	; 1
    2a8c:	6a ad       	ldd	r22, Y+58	; 0x3a
    2a8e:	0e 94 ad 10 	call	0x215a	; 0x215a <GPIO_writePort>
    2a92:	80 e0       	ldi	r24, 0x00	; 0
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	a0 e8       	ldi	r26, 0x80	; 128
    2a98:	bf e3       	ldi	r27, 0x3F	; 63
    2a9a:	89 8f       	std	Y+25, r24	; 0x19
    2a9c:	9a 8f       	std	Y+26, r25	; 0x1a
    2a9e:	ab 8f       	std	Y+27, r26	; 0x1b
    2aa0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aa2:	69 8d       	ldd	r22, Y+25	; 0x19
    2aa4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2aa6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2aa8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2aaa:	20 e0       	ldi	r18, 0x00	; 0
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	4a ef       	ldi	r20, 0xFA	; 250
    2ab0:	54 e4       	ldi	r21, 0x44	; 68
    2ab2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab6:	dc 01       	movw	r26, r24
    2ab8:	cb 01       	movw	r24, r22
    2aba:	8d 8b       	std	Y+21, r24	; 0x15
    2abc:	9e 8b       	std	Y+22, r25	; 0x16
    2abe:	af 8b       	std	Y+23, r26	; 0x17
    2ac0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ac2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ac4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ac6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ac8:	98 8d       	ldd	r25, Y+24	; 0x18
    2aca:	20 e0       	ldi	r18, 0x00	; 0
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	40 e8       	ldi	r20, 0x80	; 128
    2ad0:	5f e3       	ldi	r21, 0x3F	; 63
    2ad2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ad6:	88 23       	and	r24, r24
    2ad8:	2c f4       	brge	.+10     	; 0x2ae4 <LCD_displayCharacter+0x258>
		__ticks = 1;
    2ada:	81 e0       	ldi	r24, 0x01	; 1
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	9c 8b       	std	Y+20, r25	; 0x14
    2ae0:	8b 8b       	std	Y+19, r24	; 0x13
    2ae2:	3f c0       	rjmp	.+126    	; 0x2b62 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2ae4:	6d 89       	ldd	r22, Y+21	; 0x15
    2ae6:	7e 89       	ldd	r23, Y+22	; 0x16
    2ae8:	8f 89       	ldd	r24, Y+23	; 0x17
    2aea:	98 8d       	ldd	r25, Y+24	; 0x18
    2aec:	20 e0       	ldi	r18, 0x00	; 0
    2aee:	3f ef       	ldi	r19, 0xFF	; 255
    2af0:	4f e7       	ldi	r20, 0x7F	; 127
    2af2:	57 e4       	ldi	r21, 0x47	; 71
    2af4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2af8:	18 16       	cp	r1, r24
    2afa:	4c f5       	brge	.+82     	; 0x2b4e <LCD_displayCharacter+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2afc:	69 8d       	ldd	r22, Y+25	; 0x19
    2afe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b04:	20 e0       	ldi	r18, 0x00	; 0
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	40 e2       	ldi	r20, 0x20	; 32
    2b0a:	51 e4       	ldi	r21, 0x41	; 65
    2b0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b10:	dc 01       	movw	r26, r24
    2b12:	cb 01       	movw	r24, r22
    2b14:	bc 01       	movw	r22, r24
    2b16:	cd 01       	movw	r24, r26
    2b18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b1c:	dc 01       	movw	r26, r24
    2b1e:	cb 01       	movw	r24, r22
    2b20:	9c 8b       	std	Y+20, r25	; 0x14
    2b22:	8b 8b       	std	Y+19, r24	; 0x13
    2b24:	0f c0       	rjmp	.+30     	; 0x2b44 <LCD_displayCharacter+0x2b8>
    2b26:	88 ec       	ldi	r24, 0xC8	; 200
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	9a 8b       	std	Y+18, r25	; 0x12
    2b2c:	89 8b       	std	Y+17, r24	; 0x11
    2b2e:	89 89       	ldd	r24, Y+17	; 0x11
    2b30:	9a 89       	ldd	r25, Y+18	; 0x12
    2b32:	01 97       	sbiw	r24, 0x01	; 1
    2b34:	f1 f7       	brne	.-4      	; 0x2b32 <LCD_displayCharacter+0x2a6>
    2b36:	9a 8b       	std	Y+18, r25	; 0x12
    2b38:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b3a:	8b 89       	ldd	r24, Y+19	; 0x13
    2b3c:	9c 89       	ldd	r25, Y+20	; 0x14
    2b3e:	01 97       	sbiw	r24, 0x01	; 1
    2b40:	9c 8b       	std	Y+20, r25	; 0x14
    2b42:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b44:	8b 89       	ldd	r24, Y+19	; 0x13
    2b46:	9c 89       	ldd	r25, Y+20	; 0x14
    2b48:	00 97       	sbiw	r24, 0x00	; 0
    2b4a:	69 f7       	brne	.-38     	; 0x2b26 <LCD_displayCharacter+0x29a>
    2b4c:	14 c0       	rjmp	.+40     	; 0x2b76 <LCD_displayCharacter+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b4e:	6d 89       	ldd	r22, Y+21	; 0x15
    2b50:	7e 89       	ldd	r23, Y+22	; 0x16
    2b52:	8f 89       	ldd	r24, Y+23	; 0x17
    2b54:	98 8d       	ldd	r25, Y+24	; 0x18
    2b56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b5a:	dc 01       	movw	r26, r24
    2b5c:	cb 01       	movw	r24, r22
    2b5e:	9c 8b       	std	Y+20, r25	; 0x14
    2b60:	8b 8b       	std	Y+19, r24	; 0x13
    2b62:	8b 89       	ldd	r24, Y+19	; 0x13
    2b64:	9c 89       	ldd	r25, Y+20	; 0x14
    2b66:	98 8b       	std	Y+16, r25	; 0x10
    2b68:	8f 87       	std	Y+15, r24	; 0x0f
    2b6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b6c:	98 89       	ldd	r25, Y+16	; 0x10
    2b6e:	01 97       	sbiw	r24, 0x01	; 1
    2b70:	f1 f7       	brne	.-4      	; 0x2b6e <LCD_displayCharacter+0x2e2>
    2b72:	98 8b       	std	Y+16, r25	; 0x10
    2b74:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2b76:	80 e0       	ldi	r24, 0x00	; 0
    2b78:	67 e0       	ldi	r22, 0x07	; 7
    2b7a:	40 e0       	ldi	r20, 0x00	; 0
    2b7c:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <GPIO_writePin>
    2b80:	80 e0       	ldi	r24, 0x00	; 0
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	a0 e8       	ldi	r26, 0x80	; 128
    2b86:	bf e3       	ldi	r27, 0x3F	; 63
    2b88:	8b 87       	std	Y+11, r24	; 0x0b
    2b8a:	9c 87       	std	Y+12, r25	; 0x0c
    2b8c:	ad 87       	std	Y+13, r26	; 0x0d
    2b8e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b90:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b92:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b94:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b96:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b98:	20 e0       	ldi	r18, 0x00	; 0
    2b9a:	30 e0       	ldi	r19, 0x00	; 0
    2b9c:	4a ef       	ldi	r20, 0xFA	; 250
    2b9e:	54 e4       	ldi	r21, 0x44	; 68
    2ba0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba4:	dc 01       	movw	r26, r24
    2ba6:	cb 01       	movw	r24, r22
    2ba8:	8f 83       	std	Y+7, r24	; 0x07
    2baa:	98 87       	std	Y+8, r25	; 0x08
    2bac:	a9 87       	std	Y+9, r26	; 0x09
    2bae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bb0:	6f 81       	ldd	r22, Y+7	; 0x07
    2bb2:	78 85       	ldd	r23, Y+8	; 0x08
    2bb4:	89 85       	ldd	r24, Y+9	; 0x09
    2bb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bb8:	20 e0       	ldi	r18, 0x00	; 0
    2bba:	30 e0       	ldi	r19, 0x00	; 0
    2bbc:	40 e8       	ldi	r20, 0x80	; 128
    2bbe:	5f e3       	ldi	r21, 0x3F	; 63
    2bc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bc4:	88 23       	and	r24, r24
    2bc6:	2c f4       	brge	.+10     	; 0x2bd2 <LCD_displayCharacter+0x346>
		__ticks = 1;
    2bc8:	81 e0       	ldi	r24, 0x01	; 1
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	9e 83       	std	Y+6, r25	; 0x06
    2bce:	8d 83       	std	Y+5, r24	; 0x05
    2bd0:	3f c0       	rjmp	.+126    	; 0x2c50 <LCD_displayCharacter+0x3c4>
	else if (__tmp > 65535)
    2bd2:	6f 81       	ldd	r22, Y+7	; 0x07
    2bd4:	78 85       	ldd	r23, Y+8	; 0x08
    2bd6:	89 85       	ldd	r24, Y+9	; 0x09
    2bd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bda:	20 e0       	ldi	r18, 0x00	; 0
    2bdc:	3f ef       	ldi	r19, 0xFF	; 255
    2bde:	4f e7       	ldi	r20, 0x7F	; 127
    2be0:	57 e4       	ldi	r21, 0x47	; 71
    2be2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2be6:	18 16       	cp	r1, r24
    2be8:	4c f5       	brge	.+82     	; 0x2c3c <LCD_displayCharacter+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bea:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bec:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bee:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bf0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bf2:	20 e0       	ldi	r18, 0x00	; 0
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	40 e2       	ldi	r20, 0x20	; 32
    2bf8:	51 e4       	ldi	r21, 0x41	; 65
    2bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	bc 01       	movw	r22, r24
    2c04:	cd 01       	movw	r24, r26
    2c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c0a:	dc 01       	movw	r26, r24
    2c0c:	cb 01       	movw	r24, r22
    2c0e:	9e 83       	std	Y+6, r25	; 0x06
    2c10:	8d 83       	std	Y+5, r24	; 0x05
    2c12:	0f c0       	rjmp	.+30     	; 0x2c32 <LCD_displayCharacter+0x3a6>
    2c14:	88 ec       	ldi	r24, 0xC8	; 200
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	9c 83       	std	Y+4, r25	; 0x04
    2c1a:	8b 83       	std	Y+3, r24	; 0x03
    2c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c1e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c20:	01 97       	sbiw	r24, 0x01	; 1
    2c22:	f1 f7       	brne	.-4      	; 0x2c20 <LCD_displayCharacter+0x394>
    2c24:	9c 83       	std	Y+4, r25	; 0x04
    2c26:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c28:	8d 81       	ldd	r24, Y+5	; 0x05
    2c2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c2c:	01 97       	sbiw	r24, 0x01	; 1
    2c2e:	9e 83       	std	Y+6, r25	; 0x06
    2c30:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c32:	8d 81       	ldd	r24, Y+5	; 0x05
    2c34:	9e 81       	ldd	r25, Y+6	; 0x06
    2c36:	00 97       	sbiw	r24, 0x00	; 0
    2c38:	69 f7       	brne	.-38     	; 0x2c14 <LCD_displayCharacter+0x388>
    2c3a:	14 c0       	rjmp	.+40     	; 0x2c64 <LCD_displayCharacter+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c3c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c3e:	78 85       	ldd	r23, Y+8	; 0x08
    2c40:	89 85       	ldd	r24, Y+9	; 0x09
    2c42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c48:	dc 01       	movw	r26, r24
    2c4a:	cb 01       	movw	r24, r22
    2c4c:	9e 83       	std	Y+6, r25	; 0x06
    2c4e:	8d 83       	std	Y+5, r24	; 0x05
    2c50:	8d 81       	ldd	r24, Y+5	; 0x05
    2c52:	9e 81       	ldd	r25, Y+6	; 0x06
    2c54:	9a 83       	std	Y+2, r25	; 0x02
    2c56:	89 83       	std	Y+1, r24	; 0x01
    2c58:	89 81       	ldd	r24, Y+1	; 0x01
    2c5a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c5c:	01 97       	sbiw	r24, 0x01	; 1
    2c5e:	f1 f7       	brne	.-4      	; 0x2c5c <LCD_displayCharacter+0x3d0>
    2c60:	9a 83       	std	Y+2, r25	; 0x02
    2c62:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2c64:	ea 96       	adiw	r28, 0x3a	; 58
    2c66:	0f b6       	in	r0, 0x3f	; 63
    2c68:	f8 94       	cli
    2c6a:	de bf       	out	0x3e, r29	; 62
    2c6c:	0f be       	out	0x3f, r0	; 63
    2c6e:	cd bf       	out	0x3d, r28	; 61
    2c70:	cf 91       	pop	r28
    2c72:	df 91       	pop	r29
    2c74:	08 95       	ret

00002c76 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2c76:	df 93       	push	r29
    2c78:	cf 93       	push	r28
    2c7a:	00 d0       	rcall	.+0      	; 0x2c7c <LCD_displayString+0x6>
    2c7c:	0f 92       	push	r0
    2c7e:	cd b7       	in	r28, 0x3d	; 61
    2c80:	de b7       	in	r29, 0x3e	; 62
    2c82:	9b 83       	std	Y+3, r25	; 0x03
    2c84:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2c86:	19 82       	std	Y+1, r1	; 0x01
    2c88:	0e c0       	rjmp	.+28     	; 0x2ca6 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2c8a:	89 81       	ldd	r24, Y+1	; 0x01
    2c8c:	28 2f       	mov	r18, r24
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	8a 81       	ldd	r24, Y+2	; 0x02
    2c92:	9b 81       	ldd	r25, Y+3	; 0x03
    2c94:	fc 01       	movw	r30, r24
    2c96:	e2 0f       	add	r30, r18
    2c98:	f3 1f       	adc	r31, r19
    2c9a:	80 81       	ld	r24, Z
    2c9c:	0e 94 46 14 	call	0x288c	; 0x288c <LCD_displayCharacter>
		i++;
    2ca0:	89 81       	ldd	r24, Y+1	; 0x01
    2ca2:	8f 5f       	subi	r24, 0xFF	; 255
    2ca4:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2ca6:	89 81       	ldd	r24, Y+1	; 0x01
    2ca8:	28 2f       	mov	r18, r24
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	8a 81       	ldd	r24, Y+2	; 0x02
    2cae:	9b 81       	ldd	r25, Y+3	; 0x03
    2cb0:	fc 01       	movw	r30, r24
    2cb2:	e2 0f       	add	r30, r18
    2cb4:	f3 1f       	adc	r31, r19
    2cb6:	80 81       	ld	r24, Z
    2cb8:	88 23       	and	r24, r24
    2cba:	39 f7       	brne	.-50     	; 0x2c8a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2cbc:	0f 90       	pop	r0
    2cbe:	0f 90       	pop	r0
    2cc0:	0f 90       	pop	r0
    2cc2:	cf 91       	pop	r28
    2cc4:	df 91       	pop	r29
    2cc6:	08 95       	ret

00002cc8 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2cc8:	df 93       	push	r29
    2cca:	cf 93       	push	r28
    2ccc:	00 d0       	rcall	.+0      	; 0x2cce <LCD_moveCursor+0x6>
    2cce:	00 d0       	rcall	.+0      	; 0x2cd0 <LCD_moveCursor+0x8>
    2cd0:	0f 92       	push	r0
    2cd2:	cd b7       	in	r28, 0x3d	; 61
    2cd4:	de b7       	in	r29, 0x3e	; 62
    2cd6:	8a 83       	std	Y+2, r24	; 0x02
    2cd8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2cda:	8a 81       	ldd	r24, Y+2	; 0x02
    2cdc:	28 2f       	mov	r18, r24
    2cde:	30 e0       	ldi	r19, 0x00	; 0
    2ce0:	3d 83       	std	Y+5, r19	; 0x05
    2ce2:	2c 83       	std	Y+4, r18	; 0x04
    2ce4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ce6:	9d 81       	ldd	r25, Y+5	; 0x05
    2ce8:	81 30       	cpi	r24, 0x01	; 1
    2cea:	91 05       	cpc	r25, r1
    2cec:	c1 f0       	breq	.+48     	; 0x2d1e <LCD_moveCursor+0x56>
    2cee:	2c 81       	ldd	r18, Y+4	; 0x04
    2cf0:	3d 81       	ldd	r19, Y+5	; 0x05
    2cf2:	22 30       	cpi	r18, 0x02	; 2
    2cf4:	31 05       	cpc	r19, r1
    2cf6:	2c f4       	brge	.+10     	; 0x2d02 <LCD_moveCursor+0x3a>
    2cf8:	8c 81       	ldd	r24, Y+4	; 0x04
    2cfa:	9d 81       	ldd	r25, Y+5	; 0x05
    2cfc:	00 97       	sbiw	r24, 0x00	; 0
    2cfe:	61 f0       	breq	.+24     	; 0x2d18 <LCD_moveCursor+0x50>
    2d00:	19 c0       	rjmp	.+50     	; 0x2d34 <LCD_moveCursor+0x6c>
    2d02:	2c 81       	ldd	r18, Y+4	; 0x04
    2d04:	3d 81       	ldd	r19, Y+5	; 0x05
    2d06:	22 30       	cpi	r18, 0x02	; 2
    2d08:	31 05       	cpc	r19, r1
    2d0a:	69 f0       	breq	.+26     	; 0x2d26 <LCD_moveCursor+0x5e>
    2d0c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d0e:	9d 81       	ldd	r25, Y+5	; 0x05
    2d10:	83 30       	cpi	r24, 0x03	; 3
    2d12:	91 05       	cpc	r25, r1
    2d14:	61 f0       	breq	.+24     	; 0x2d2e <LCD_moveCursor+0x66>
    2d16:	0e c0       	rjmp	.+28     	; 0x2d34 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2d18:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1a:	89 83       	std	Y+1, r24	; 0x01
    2d1c:	0b c0       	rjmp	.+22     	; 0x2d34 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d20:	80 5c       	subi	r24, 0xC0	; 192
    2d22:	89 83       	std	Y+1, r24	; 0x01
    2d24:	07 c0       	rjmp	.+14     	; 0x2d34 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2d26:	8b 81       	ldd	r24, Y+3	; 0x03
    2d28:	80 5f       	subi	r24, 0xF0	; 240
    2d2a:	89 83       	std	Y+1, r24	; 0x01
    2d2c:	03 c0       	rjmp	.+6      	; 0x2d34 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d30:	80 5b       	subi	r24, 0xB0	; 176
    2d32:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2d34:	89 81       	ldd	r24, Y+1	; 0x01
    2d36:	80 68       	ori	r24, 0x80	; 128
    2d38:	0e 94 51 12 	call	0x24a2	; 0x24a2 <LCD_sendCommand>
}
    2d3c:	0f 90       	pop	r0
    2d3e:	0f 90       	pop	r0
    2d40:	0f 90       	pop	r0
    2d42:	0f 90       	pop	r0
    2d44:	0f 90       	pop	r0
    2d46:	cf 91       	pop	r28
    2d48:	df 91       	pop	r29
    2d4a:	08 95       	ret

00002d4c <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2d4c:	df 93       	push	r29
    2d4e:	cf 93       	push	r28
    2d50:	00 d0       	rcall	.+0      	; 0x2d52 <LCD_displayStringRowColumn+0x6>
    2d52:	00 d0       	rcall	.+0      	; 0x2d54 <LCD_displayStringRowColumn+0x8>
    2d54:	cd b7       	in	r28, 0x3d	; 61
    2d56:	de b7       	in	r29, 0x3e	; 62
    2d58:	89 83       	std	Y+1, r24	; 0x01
    2d5a:	6a 83       	std	Y+2, r22	; 0x02
    2d5c:	5c 83       	std	Y+4, r21	; 0x04
    2d5e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2d60:	89 81       	ldd	r24, Y+1	; 0x01
    2d62:	6a 81       	ldd	r22, Y+2	; 0x02
    2d64:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2d68:	8b 81       	ldd	r24, Y+3	; 0x03
    2d6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d6c:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_displayString>
}
    2d70:	0f 90       	pop	r0
    2d72:	0f 90       	pop	r0
    2d74:	0f 90       	pop	r0
    2d76:	0f 90       	pop	r0
    2d78:	cf 91       	pop	r28
    2d7a:	df 91       	pop	r29
    2d7c:	08 95       	ret

00002d7e <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2d7e:	df 93       	push	r29
    2d80:	cf 93       	push	r28
    2d82:	cd b7       	in	r28, 0x3d	; 61
    2d84:	de b7       	in	r29, 0x3e	; 62
    2d86:	62 97       	sbiw	r28, 0x12	; 18
    2d88:	0f b6       	in	r0, 0x3f	; 63
    2d8a:	f8 94       	cli
    2d8c:	de bf       	out	0x3e, r29	; 62
    2d8e:	0f be       	out	0x3f, r0	; 63
    2d90:	cd bf       	out	0x3d, r28	; 61
    2d92:	9a 8b       	std	Y+18, r25	; 0x12
    2d94:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2d96:	89 89       	ldd	r24, Y+17	; 0x11
    2d98:	9a 89       	ldd	r25, Y+18	; 0x12
    2d9a:	9e 01       	movw	r18, r28
    2d9c:	2f 5f       	subi	r18, 0xFF	; 255
    2d9e:	3f 4f       	sbci	r19, 0xFF	; 255
    2da0:	b9 01       	movw	r22, r18
    2da2:	4a e0       	ldi	r20, 0x0A	; 10
    2da4:	50 e0       	ldi	r21, 0x00	; 0
    2da6:	0e 94 a0 1a 	call	0x3540	; 0x3540 <itoa>
   LCD_displayString(buff); /* Display the string */
    2daa:	ce 01       	movw	r24, r28
    2dac:	01 96       	adiw	r24, 0x01	; 1
    2dae:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <LCD_displayString>
}
    2db2:	62 96       	adiw	r28, 0x12	; 18
    2db4:	0f b6       	in	r0, 0x3f	; 63
    2db6:	f8 94       	cli
    2db8:	de bf       	out	0x3e, r29	; 62
    2dba:	0f be       	out	0x3f, r0	; 63
    2dbc:	cd bf       	out	0x3d, r28	; 61
    2dbe:	cf 91       	pop	r28
    2dc0:	df 91       	pop	r29
    2dc2:	08 95       	ret

00002dc4 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2dc4:	df 93       	push	r29
    2dc6:	cf 93       	push	r28
    2dc8:	cd b7       	in	r28, 0x3d	; 61
    2dca:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2dcc:	81 e0       	ldi	r24, 0x01	; 1
    2dce:	0e 94 51 12 	call	0x24a2	; 0x24a2 <LCD_sendCommand>
}
    2dd2:	cf 91       	pop	r28
    2dd4:	df 91       	pop	r29
    2dd6:	08 95       	ret

00002dd8 <DcMotor_Init>:
#include <avr/io.h>

#include "pwm.h"


void DcMotor_Init(){
    2dd8:	df 93       	push	r29
    2dda:	cf 93       	push	r28
    2ddc:	cd b7       	in	r28, 0x3d	; 61
    2dde:	de b7       	in	r29, 0x3e	; 62

	/* Set OC0 as output (PD7)
	 * Set direction pins as output */
	GPIO_setupPinDirection(MOTOR_EN_PORT_ID,MOTOR_EN_PIN_ID,PIN_OUTPUT);
    2de0:	82 e0       	ldi	r24, 0x02	; 2
    2de2:	65 e0       	ldi	r22, 0x05	; 5
    2de4:	41 e0       	ldi	r20, 0x01	; 1
    2de6:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_PIN1_PORT_ID,MOTOR_PIN1_PIN_ID,PIN_OUTPUT);
    2dea:	82 e0       	ldi	r24, 0x02	; 2
    2dec:	66 e0       	ldi	r22, 0x06	; 6
    2dee:	41 e0       	ldi	r20, 0x01	; 1
    2df0:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_PIN2_PORT_ID,MOTOR_PIN2_PIN_ID,PIN_OUTPUT);
    2df4:	82 e0       	ldi	r24, 0x02	; 2
    2df6:	67 e0       	ldi	r22, 0x07	; 7
    2df8:	41 e0       	ldi	r20, 0x01	; 1
    2dfa:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <GPIO_setupPinDirection>

	/* DC Motor initially OFF */
	GPIO_writePin(MOTOR_EN_PORT_ID,MOTOR_EN_PIN_ID,LOGIC_HIGH);
    2dfe:	82 e0       	ldi	r24, 0x02	; 2
    2e00:	65 e0       	ldi	r22, 0x05	; 5
    2e02:	41 e0       	ldi	r20, 0x01	; 1
    2e04:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <GPIO_writePin>
	GPIO_writePin(MOTOR_PIN1_PORT_ID,MOTOR_PIN1_PIN_ID,LOGIC_LOW);
    2e08:	82 e0       	ldi	r24, 0x02	; 2
    2e0a:	66 e0       	ldi	r22, 0x06	; 6
    2e0c:	40 e0       	ldi	r20, 0x00	; 0
    2e0e:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <GPIO_writePin>
	GPIO_writePin(MOTOR_PIN2_PORT_ID,MOTOR_PIN2_PIN_ID,LOGIC_LOW);
    2e12:	82 e0       	ldi	r24, 0x02	; 2
    2e14:	67 e0       	ldi	r22, 0x07	; 7
    2e16:	40 e0       	ldi	r20, 0x00	; 0
    2e18:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <GPIO_writePin>
}
    2e1c:	cf 91       	pop	r28
    2e1e:	df 91       	pop	r29
    2e20:	08 95       	ret

00002e22 <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state, uint8 speed){
    2e22:	df 93       	push	r29
    2e24:	cf 93       	push	r28
    2e26:	00 d0       	rcall	.+0      	; 0x2e28 <DcMotor_Rotate+0x6>
    2e28:	cd b7       	in	r28, 0x3d	; 61
    2e2a:	de b7       	in	r29, 0x3e	; 62
    2e2c:	89 83       	std	Y+1, r24	; 0x01
    2e2e:	6a 83       	std	Y+2, r22	; 0x02
	/* Write state (OFF, CW, Anti-CW) into motor pins
	 * by writing (0, 1, 2) into two seperate pins
	 * First pin gets first bit value
	 * Second pin gets second bit value shifted to the right
	 */
	GPIO_writePin(MOTOR_PIN1_PORT_ID,MOTOR_PIN1_PIN_ID,((state & 2)>>1));
    2e30:	89 81       	ldd	r24, Y+1	; 0x01
    2e32:	88 2f       	mov	r24, r24
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	82 70       	andi	r24, 0x02	; 2
    2e38:	90 70       	andi	r25, 0x00	; 0
    2e3a:	95 95       	asr	r25
    2e3c:	87 95       	ror	r24
    2e3e:	98 2f       	mov	r25, r24
    2e40:	82 e0       	ldi	r24, 0x02	; 2
    2e42:	66 e0       	ldi	r22, 0x06	; 6
    2e44:	49 2f       	mov	r20, r25
    2e46:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <GPIO_writePin>
	GPIO_writePin(MOTOR_PIN2_PORT_ID,MOTOR_PIN2_PIN_ID,(state & 1));
    2e4a:	89 81       	ldd	r24, Y+1	; 0x01
    2e4c:	98 2f       	mov	r25, r24
    2e4e:	91 70       	andi	r25, 0x01	; 1
    2e50:	82 e0       	ldi	r24, 0x02	; 2
    2e52:	67 e0       	ldi	r22, 0x07	; 7
    2e54:	49 2f       	mov	r20, r25
    2e56:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <GPIO_writePin>

	/* Start Timer0 in PWM Mode */
	PWM_Timer0_Start(speed);
    2e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e5c:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <PWM_Timer0_Start>
}
    2e60:	0f 90       	pop	r0
    2e62:	0f 90       	pop	r0
    2e64:	cf 91       	pop	r28
    2e66:	df 91       	pop	r29
    2e68:	08 95       	ret

00002e6a <PWM_Timer0_Start>:
#include "pwm.h"

#include <avr/io.h>
#include "common_macros.h"

void PWM_Timer0_Start(uint8 duty_cycle){
    2e6a:	df 93       	push	r29
    2e6c:	cf 93       	push	r28
    2e6e:	0f 92       	push	r0
    2e70:	cd b7       	in	r28, 0x3d	; 61
    2e72:	de b7       	in	r29, 0x3e	; 62
    2e74:	89 83       	std	Y+1, r24	; 0x01

	/* Setup OC0 as output pin */
	SET_BIT(DDRB,PB3);
    2e76:	a7 e3       	ldi	r26, 0x37	; 55
    2e78:	b0 e0       	ldi	r27, 0x00	; 0
    2e7a:	e7 e3       	ldi	r30, 0x37	; 55
    2e7c:	f0 e0       	ldi	r31, 0x00	; 0
    2e7e:	80 81       	ld	r24, Z
    2e80:	88 60       	ori	r24, 0x08	; 8
    2e82:	8c 93       	st	X, r24

	/* Set initial timer value to 0 */
	TCNT0 = 0;
    2e84:	e2 e5       	ldi	r30, 0x52	; 82
    2e86:	f0 e0       	ldi	r31, 0x00	; 0
    2e88:	10 82       	st	Z, r1

	/* Fast PWM
	* Non-Inverting mode
	* Prescaler = FCPU/8 (CS01 = 1)           */
	TCCR0 |= (1<<COM01) | (1<<WGM01) | (1<<WGM00) | (1<<CS01);
    2e8a:	a3 e5       	ldi	r26, 0x53	; 83
    2e8c:	b0 e0       	ldi	r27, 0x00	; 0
    2e8e:	e3 e5       	ldi	r30, 0x53	; 83
    2e90:	f0 e0       	ldi	r31, 0x00	; 0
    2e92:	80 81       	ld	r24, Z
    2e94:	8a 66       	ori	r24, 0x6A	; 106
    2e96:	8c 93       	st	X, r24

	/* Set OCR0 to required compare value */
	OCR0 = duty_cycle * 255/100;
    2e98:	ec e5       	ldi	r30, 0x5C	; 92
    2e9a:	f0 e0       	ldi	r31, 0x00	; 0
    2e9c:	89 81       	ldd	r24, Y+1	; 0x01
    2e9e:	48 2f       	mov	r20, r24
    2ea0:	50 e0       	ldi	r21, 0x00	; 0
    2ea2:	ca 01       	movw	r24, r20
    2ea4:	9c 01       	movw	r18, r24
    2ea6:	22 0f       	add	r18, r18
    2ea8:	33 1f       	adc	r19, r19
    2eaa:	c9 01       	movw	r24, r18
    2eac:	96 95       	lsr	r25
    2eae:	98 2f       	mov	r25, r24
    2eb0:	88 27       	eor	r24, r24
    2eb2:	97 95       	ror	r25
    2eb4:	87 95       	ror	r24
    2eb6:	82 1b       	sub	r24, r18
    2eb8:	93 0b       	sbc	r25, r19
    2eba:	84 0f       	add	r24, r20
    2ebc:	95 1f       	adc	r25, r21
    2ebe:	24 e6       	ldi	r18, 0x64	; 100
    2ec0:	30 e0       	ldi	r19, 0x00	; 0
    2ec2:	b9 01       	movw	r22, r18
    2ec4:	0e 94 20 1a 	call	0x3440	; 0x3440 <__divmodhi4>
    2ec8:	cb 01       	movw	r24, r22
    2eca:	80 83       	st	Z, r24
}
    2ecc:	0f 90       	pop	r0
    2ece:	cf 91       	pop	r28
    2ed0:	df 91       	pop	r29
    2ed2:	08 95       	ret

00002ed4 <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    2ed4:	1f 92       	push	r1
    2ed6:	0f 92       	push	r0
    2ed8:	0f b6       	in	r0, 0x3f	; 63
    2eda:	0f 92       	push	r0
    2edc:	11 24       	eor	r1, r1
    2ede:	2f 93       	push	r18
    2ee0:	3f 93       	push	r19
    2ee2:	4f 93       	push	r20
    2ee4:	5f 93       	push	r21
    2ee6:	6f 93       	push	r22
    2ee8:	7f 93       	push	r23
    2eea:	8f 93       	push	r24
    2eec:	9f 93       	push	r25
    2eee:	af 93       	push	r26
    2ef0:	bf 93       	push	r27
    2ef2:	ef 93       	push	r30
    2ef4:	ff 93       	push	r31
    2ef6:	df 93       	push	r29
    2ef8:	cf 93       	push	r28
    2efa:	cd b7       	in	r28, 0x3d	; 61
    2efc:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2efe:	80 91 0b 02 	lds	r24, 0x020B
    2f02:	90 91 0c 02 	lds	r25, 0x020C
    2f06:	00 97       	sbiw	r24, 0x00	; 0
    2f08:	29 f0       	breq	.+10     	; 0x2f14 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2f0a:	e0 91 0b 02 	lds	r30, 0x020B
    2f0e:	f0 91 0c 02 	lds	r31, 0x020C
    2f12:	09 95       	icall
	}
}
    2f14:	cf 91       	pop	r28
    2f16:	df 91       	pop	r29
    2f18:	ff 91       	pop	r31
    2f1a:	ef 91       	pop	r30
    2f1c:	bf 91       	pop	r27
    2f1e:	af 91       	pop	r26
    2f20:	9f 91       	pop	r25
    2f22:	8f 91       	pop	r24
    2f24:	7f 91       	pop	r23
    2f26:	6f 91       	pop	r22
    2f28:	5f 91       	pop	r21
    2f2a:	4f 91       	pop	r20
    2f2c:	3f 91       	pop	r19
    2f2e:	2f 91       	pop	r18
    2f30:	0f 90       	pop	r0
    2f32:	0f be       	out	0x3f, r0	; 63
    2f34:	0f 90       	pop	r0
    2f36:	1f 90       	pop	r1
    2f38:	18 95       	reti

00002f3a <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    2f3a:	1f 92       	push	r1
    2f3c:	0f 92       	push	r0
    2f3e:	0f b6       	in	r0, 0x3f	; 63
    2f40:	0f 92       	push	r0
    2f42:	11 24       	eor	r1, r1
    2f44:	2f 93       	push	r18
    2f46:	3f 93       	push	r19
    2f48:	4f 93       	push	r20
    2f4a:	5f 93       	push	r21
    2f4c:	6f 93       	push	r22
    2f4e:	7f 93       	push	r23
    2f50:	8f 93       	push	r24
    2f52:	9f 93       	push	r25
    2f54:	af 93       	push	r26
    2f56:	bf 93       	push	r27
    2f58:	ef 93       	push	r30
    2f5a:	ff 93       	push	r31
    2f5c:	df 93       	push	r29
    2f5e:	cf 93       	push	r28
    2f60:	cd b7       	in	r28, 0x3d	; 61
    2f62:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2f64:	80 91 0b 02 	lds	r24, 0x020B
    2f68:	90 91 0c 02 	lds	r25, 0x020C
    2f6c:	00 97       	sbiw	r24, 0x00	; 0
    2f6e:	29 f0       	breq	.+10     	; 0x2f7a <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2f70:	e0 91 0b 02 	lds	r30, 0x020B
    2f74:	f0 91 0c 02 	lds	r31, 0x020C
    2f78:	09 95       	icall
	}
}
    2f7a:	cf 91       	pop	r28
    2f7c:	df 91       	pop	r29
    2f7e:	ff 91       	pop	r31
    2f80:	ef 91       	pop	r30
    2f82:	bf 91       	pop	r27
    2f84:	af 91       	pop	r26
    2f86:	9f 91       	pop	r25
    2f88:	8f 91       	pop	r24
    2f8a:	7f 91       	pop	r23
    2f8c:	6f 91       	pop	r22
    2f8e:	5f 91       	pop	r21
    2f90:	4f 91       	pop	r20
    2f92:	3f 91       	pop	r19
    2f94:	2f 91       	pop	r18
    2f96:	0f 90       	pop	r0
    2f98:	0f be       	out	0x3f, r0	; 63
    2f9a:	0f 90       	pop	r0
    2f9c:	1f 90       	pop	r1
    2f9e:	18 95       	reti

00002fa0 <Timer0_Init>:

void Timer0_Init(Timer_ConfigType *Config_Ptr){
    2fa0:	df 93       	push	r29
    2fa2:	cf 93       	push	r28
    2fa4:	00 d0       	rcall	.+0      	; 0x2fa6 <Timer0_Init+0x6>
    2fa6:	cd b7       	in	r28, 0x3d	; 61
    2fa8:	de b7       	in	r29, 0x3e	; 62
    2faa:	9a 83       	std	Y+2, r25	; 0x02
    2fac:	89 83       	std	Y+1, r24	; 0x01

	/* Set Initial Timer value */
	TCNT0 = Config_Ptr->Initial_Value;
    2fae:	a2 e5       	ldi	r26, 0x52	; 82
    2fb0:	b0 e0       	ldi	r27, 0x00	; 0
    2fb2:	e9 81       	ldd	r30, Y+1	; 0x01
    2fb4:	fa 81       	ldd	r31, Y+2	; 0x02
    2fb6:	81 81       	ldd	r24, Z+1	; 0x01
    2fb8:	92 81       	ldd	r25, Z+2	; 0x02
    2fba:	8c 93       	st	X, r24

	/* Set Compare Value for CTC mode */
	OCR0 = Config_Ptr->Compare_Value;
    2fbc:	ac e5       	ldi	r26, 0x5C	; 92
    2fbe:	b0 e0       	ldi	r27, 0x00	; 0
    2fc0:	e9 81       	ldd	r30, Y+1	; 0x01
    2fc2:	fa 81       	ldd	r31, Y+2	; 0x02
    2fc4:	83 81       	ldd	r24, Z+3	; 0x03
    2fc6:	94 81       	ldd	r25, Z+4	; 0x04
    2fc8:	8c 93       	st	X, r24

	/* FOC0 is only active when using PWM mode */
	TCCR0 |= (1<<FOC0);
    2fca:	a3 e5       	ldi	r26, 0x53	; 83
    2fcc:	b0 e0       	ldi	r27, 0x00	; 0
    2fce:	e3 e5       	ldi	r30, 0x53	; 83
    2fd0:	f0 e0       	ldi	r31, 0x00	; 0
    2fd2:	80 81       	ld	r24, Z
    2fd4:	80 68       	ori	r24, 0x80	; 128
    2fd6:	8c 93       	st	X, r24

	/* Clearing WGM01 before writing */
	TCCR0 &= ~(1<<WGM01);
    2fd8:	a3 e5       	ldi	r26, 0x53	; 83
    2fda:	b0 e0       	ldi	r27, 0x00	; 0
    2fdc:	e3 e5       	ldi	r30, 0x53	; 83
    2fde:	f0 e0       	ldi	r31, 0x00	; 0
    2fe0:	80 81       	ld	r24, Z
    2fe2:	87 7f       	andi	r24, 0xF7	; 247
    2fe4:	8c 93       	st	X, r24

	/* writing in WGM01 depending on the mode
	 * Normal = 0
	 * CTC = 1                                */
	TCCR0 |= ((Config_Ptr->mode)<<WGM01);
    2fe6:	a3 e5       	ldi	r26, 0x53	; 83
    2fe8:	b0 e0       	ldi	r27, 0x00	; 0
    2fea:	e3 e5       	ldi	r30, 0x53	; 83
    2fec:	f0 e0       	ldi	r31, 0x00	; 0
    2fee:	80 81       	ld	r24, Z
    2ff0:	28 2f       	mov	r18, r24
    2ff2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ff4:	fa 81       	ldd	r31, Y+2	; 0x02
    2ff6:	80 81       	ld	r24, Z
    2ff8:	88 2f       	mov	r24, r24
    2ffa:	90 e0       	ldi	r25, 0x00	; 0
    2ffc:	88 0f       	add	r24, r24
    2ffe:	99 1f       	adc	r25, r25
    3000:	88 0f       	add	r24, r24
    3002:	99 1f       	adc	r25, r25
    3004:	88 0f       	add	r24, r24
    3006:	99 1f       	adc	r25, r25
    3008:	82 2b       	or	r24, r18
    300a:	8c 93       	st	X, r24

	/* Set the Clock Prescaler */
	TCCR0 |= (Config_Ptr->prescaler);
    300c:	a3 e5       	ldi	r26, 0x53	; 83
    300e:	b0 e0       	ldi	r27, 0x00	; 0
    3010:	e3 e5       	ldi	r30, 0x53	; 83
    3012:	f0 e0       	ldi	r31, 0x00	; 0
    3014:	90 81       	ld	r25, Z
    3016:	e9 81       	ldd	r30, Y+1	; 0x01
    3018:	fa 81       	ldd	r31, Y+2	; 0x02
    301a:	85 81       	ldd	r24, Z+5	; 0x05
    301c:	89 2b       	or	r24, r25
    301e:	8c 93       	st	X, r24

	/* Enable Interrupts */
	if(Config_Ptr->mode == NORMAL){
    3020:	e9 81       	ldd	r30, Y+1	; 0x01
    3022:	fa 81       	ldd	r31, Y+2	; 0x02
    3024:	80 81       	ld	r24, Z
    3026:	88 23       	and	r24, r24
    3028:	41 f4       	brne	.+16     	; 0x303a <Timer0_Init+0x9a>
		TIMSK |= (1<<TOIE0);
    302a:	a9 e5       	ldi	r26, 0x59	; 89
    302c:	b0 e0       	ldi	r27, 0x00	; 0
    302e:	e9 e5       	ldi	r30, 0x59	; 89
    3030:	f0 e0       	ldi	r31, 0x00	; 0
    3032:	80 81       	ld	r24, Z
    3034:	81 60       	ori	r24, 0x01	; 1
    3036:	8c 93       	st	X, r24
    3038:	0c c0       	rjmp	.+24     	; 0x3052 <Timer0_Init+0xb2>
	}
	else if(Config_Ptr->mode == COMPARE){
    303a:	e9 81       	ldd	r30, Y+1	; 0x01
    303c:	fa 81       	ldd	r31, Y+2	; 0x02
    303e:	80 81       	ld	r24, Z
    3040:	81 30       	cpi	r24, 0x01	; 1
    3042:	39 f4       	brne	.+14     	; 0x3052 <Timer0_Init+0xb2>
		TIMSK |= (1<<OCIE0);
    3044:	a9 e5       	ldi	r26, 0x59	; 89
    3046:	b0 e0       	ldi	r27, 0x00	; 0
    3048:	e9 e5       	ldi	r30, 0x59	; 89
    304a:	f0 e0       	ldi	r31, 0x00	; 0
    304c:	80 81       	ld	r24, Z
    304e:	82 60       	ori	r24, 0x02	; 2
    3050:	8c 93       	st	X, r24
	}
}
    3052:	0f 90       	pop	r0
    3054:	0f 90       	pop	r0
    3056:	cf 91       	pop	r28
    3058:	df 91       	pop	r29
    305a:	08 95       	ret

0000305c <Timer0_SetCallback>:

void Timer0_SetCallback(void (*a_Ptr)(void)){
    305c:	df 93       	push	r29
    305e:	cf 93       	push	r28
    3060:	00 d0       	rcall	.+0      	; 0x3062 <Timer0_SetCallback+0x6>
    3062:	cd b7       	in	r28, 0x3d	; 61
    3064:	de b7       	in	r29, 0x3e	; 62
    3066:	9a 83       	std	Y+2, r25	; 0x02
    3068:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_Ptr;
    306a:	89 81       	ldd	r24, Y+1	; 0x01
    306c:	9a 81       	ldd	r25, Y+2	; 0x02
    306e:	90 93 0c 02 	sts	0x020C, r25
    3072:	80 93 0b 02 	sts	0x020B, r24
}
    3076:	0f 90       	pop	r0
    3078:	0f 90       	pop	r0
    307a:	cf 91       	pop	r28
    307c:	df 91       	pop	r29
    307e:	08 95       	ret

00003080 <Timer0_DeInit>:

void Timer0_DeInit(void){
    3080:	df 93       	push	r29
    3082:	cf 93       	push	r28
    3084:	cd b7       	in	r28, 0x3d	; 61
    3086:	de b7       	in	r29, 0x3e	; 62
	/* Clear all Timer0 Registers */
	TCCR0 = 0x00;
    3088:	e3 e5       	ldi	r30, 0x53	; 83
    308a:	f0 e0       	ldi	r31, 0x00	; 0
    308c:	10 82       	st	Z, r1
	TCNT0 = 0;
    308e:	e2 e5       	ldi	r30, 0x52	; 82
    3090:	f0 e0       	ldi	r31, 0x00	; 0
    3092:	10 82       	st	Z, r1
	OCR0 = 0;
    3094:	ec e5       	ldi	r30, 0x5C	; 92
    3096:	f0 e0       	ldi	r31, 0x00	; 0
    3098:	10 82       	st	Z, r1

	/* Disable Interrupts */
	TIMSK &= ~(1<<OCIE0) & ~(1<<TOIE0);
    309a:	a9 e5       	ldi	r26, 0x59	; 89
    309c:	b0 e0       	ldi	r27, 0x00	; 0
    309e:	e9 e5       	ldi	r30, 0x59	; 89
    30a0:	f0 e0       	ldi	r31, 0x00	; 0
    30a2:	80 81       	ld	r24, Z
    30a4:	8c 7f       	andi	r24, 0xFC	; 252
    30a6:	8c 93       	st	X, r24
}
    30a8:	cf 91       	pop	r28
    30aa:	df 91       	pop	r29
    30ac:	08 95       	ret

000030ae <TWI_init>:
#include "common_macros.h"
#include <avr/io.h>


void TWI_init(TWI_ConfigType *Config_Ptr)
{
    30ae:	df 93       	push	r29
    30b0:	cf 93       	push	r28
    30b2:	00 d0       	rcall	.+0      	; 0x30b4 <TWI_init+0x6>
    30b4:	0f 92       	push	r0
    30b6:	cd b7       	in	r28, 0x3d	; 61
    30b8:	de b7       	in	r29, 0x3e	; 62
    30ba:	9b 83       	std	Y+3, r25	; 0x03
    30bc:	8a 83       	std	Y+2, r24	; 0x02
    /* Bit Rate: Predefined macro, using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    uint8 TWBR_Value = (uint8)(((F_CPU/(Config_Ptr->MY_BIT_RATE))-16)/2);
    30be:	ea 81       	ldd	r30, Y+2	; 0x02
    30c0:	fb 81       	ldd	r31, Y+3	; 0x03
    30c2:	20 81       	ld	r18, Z
    30c4:	31 81       	ldd	r19, Z+1	; 0x01
    30c6:	42 81       	ldd	r20, Z+2	; 0x02
    30c8:	53 81       	ldd	r21, Z+3	; 0x03
    30ca:	80 e0       	ldi	r24, 0x00	; 0
    30cc:	92 e1       	ldi	r25, 0x12	; 18
    30ce:	aa e7       	ldi	r26, 0x7A	; 122
    30d0:	b0 e0       	ldi	r27, 0x00	; 0
    30d2:	bc 01       	movw	r22, r24
    30d4:	cd 01       	movw	r24, r26
    30d6:	0e 94 33 1a 	call	0x3466	; 0x3466 <__udivmodsi4>
    30da:	da 01       	movw	r26, r20
    30dc:	c9 01       	movw	r24, r18
    30de:	40 97       	sbiw	r24, 0x10	; 16
    30e0:	a1 09       	sbc	r26, r1
    30e2:	b1 09       	sbc	r27, r1
    30e4:	b6 95       	lsr	r27
    30e6:	a7 95       	ror	r26
    30e8:	97 95       	ror	r25
    30ea:	87 95       	ror	r24
    30ec:	89 83       	std	Y+1, r24	; 0x01
	TWBR = TWBR_Value;
    30ee:	e0 e2       	ldi	r30, 0x20	; 32
    30f0:	f0 e0       	ldi	r31, 0x00	; 0
    30f2:	89 81       	ldd	r24, Y+1	; 0x01
    30f4:	80 83       	st	Z, r24
	TWSR = 0x00;
    30f6:	e1 e2       	ldi	r30, 0x21	; 33
    30f8:	f0 e0       	ldi	r31, 0x00	; 0
    30fa:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = Config_Ptr->MY_ADDRESS; // my address = Predefined macro :)
    30fc:	a2 e2       	ldi	r26, 0x22	; 34
    30fe:	b0 e0       	ldi	r27, 0x00	; 0
    3100:	ea 81       	ldd	r30, Y+2	; 0x02
    3102:	fb 81       	ldd	r31, Y+3	; 0x03
    3104:	84 81       	ldd	r24, Z+4	; 0x04
    3106:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    3108:	e6 e5       	ldi	r30, 0x56	; 86
    310a:	f0 e0       	ldi	r31, 0x00	; 0
    310c:	84 e0       	ldi	r24, 0x04	; 4
    310e:	80 83       	st	Z, r24
}
    3110:	0f 90       	pop	r0
    3112:	0f 90       	pop	r0
    3114:	0f 90       	pop	r0
    3116:	cf 91       	pop	r28
    3118:	df 91       	pop	r29
    311a:	08 95       	ret

0000311c <TWI_start>:

void TWI_start(void)
{
    311c:	df 93       	push	r29
    311e:	cf 93       	push	r28
    3120:	cd b7       	in	r28, 0x3d	; 61
    3122:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    3124:	e6 e5       	ldi	r30, 0x56	; 86
    3126:	f0 e0       	ldi	r31, 0x00	; 0
    3128:	84 ea       	ldi	r24, 0xA4	; 164
    312a:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    312c:	e6 e5       	ldi	r30, 0x56	; 86
    312e:	f0 e0       	ldi	r31, 0x00	; 0
    3130:	80 81       	ld	r24, Z
    3132:	88 23       	and	r24, r24
    3134:	dc f7       	brge	.-10     	; 0x312c <TWI_start+0x10>
}
    3136:	cf 91       	pop	r28
    3138:	df 91       	pop	r29
    313a:	08 95       	ret

0000313c <TWI_stop>:

void TWI_stop(void)
{
    313c:	df 93       	push	r29
    313e:	cf 93       	push	r28
    3140:	cd b7       	in	r28, 0x3d	; 61
    3142:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    3144:	e6 e5       	ldi	r30, 0x56	; 86
    3146:	f0 e0       	ldi	r31, 0x00	; 0
    3148:	84 e9       	ldi	r24, 0x94	; 148
    314a:	80 83       	st	Z, r24
}
    314c:	cf 91       	pop	r28
    314e:	df 91       	pop	r29
    3150:	08 95       	ret

00003152 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    3152:	df 93       	push	r29
    3154:	cf 93       	push	r28
    3156:	0f 92       	push	r0
    3158:	cd b7       	in	r28, 0x3d	; 61
    315a:	de b7       	in	r29, 0x3e	; 62
    315c:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    315e:	e3 e2       	ldi	r30, 0x23	; 35
    3160:	f0 e0       	ldi	r31, 0x00	; 0
    3162:	89 81       	ldd	r24, Y+1	; 0x01
    3164:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    3166:	e6 e5       	ldi	r30, 0x56	; 86
    3168:	f0 e0       	ldi	r31, 0x00	; 0
    316a:	84 e8       	ldi	r24, 0x84	; 132
    316c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    316e:	e6 e5       	ldi	r30, 0x56	; 86
    3170:	f0 e0       	ldi	r31, 0x00	; 0
    3172:	80 81       	ld	r24, Z
    3174:	88 23       	and	r24, r24
    3176:	dc f7       	brge	.-10     	; 0x316e <TWI_writeByte+0x1c>
}
    3178:	0f 90       	pop	r0
    317a:	cf 91       	pop	r28
    317c:	df 91       	pop	r29
    317e:	08 95       	ret

00003180 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    3180:	df 93       	push	r29
    3182:	cf 93       	push	r28
    3184:	cd b7       	in	r28, 0x3d	; 61
    3186:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    3188:	e6 e5       	ldi	r30, 0x56	; 86
    318a:	f0 e0       	ldi	r31, 0x00	; 0
    318c:	84 ec       	ldi	r24, 0xC4	; 196
    318e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    3190:	e6 e5       	ldi	r30, 0x56	; 86
    3192:	f0 e0       	ldi	r31, 0x00	; 0
    3194:	80 81       	ld	r24, Z
    3196:	88 23       	and	r24, r24
    3198:	dc f7       	brge	.-10     	; 0x3190 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    319a:	e3 e2       	ldi	r30, 0x23	; 35
    319c:	f0 e0       	ldi	r31, 0x00	; 0
    319e:	80 81       	ld	r24, Z
}
    31a0:	cf 91       	pop	r28
    31a2:	df 91       	pop	r29
    31a4:	08 95       	ret

000031a6 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    31a6:	df 93       	push	r29
    31a8:	cf 93       	push	r28
    31aa:	cd b7       	in	r28, 0x3d	; 61
    31ac:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    31ae:	e6 e5       	ldi	r30, 0x56	; 86
    31b0:	f0 e0       	ldi	r31, 0x00	; 0
    31b2:	84 e8       	ldi	r24, 0x84	; 132
    31b4:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    31b6:	e6 e5       	ldi	r30, 0x56	; 86
    31b8:	f0 e0       	ldi	r31, 0x00	; 0
    31ba:	80 81       	ld	r24, Z
    31bc:	88 23       	and	r24, r24
    31be:	dc f7       	brge	.-10     	; 0x31b6 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    31c0:	e3 e2       	ldi	r30, 0x23	; 35
    31c2:	f0 e0       	ldi	r31, 0x00	; 0
    31c4:	80 81       	ld	r24, Z
}
    31c6:	cf 91       	pop	r28
    31c8:	df 91       	pop	r29
    31ca:	08 95       	ret

000031cc <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    31cc:	df 93       	push	r29
    31ce:	cf 93       	push	r28
    31d0:	0f 92       	push	r0
    31d2:	cd b7       	in	r28, 0x3d	; 61
    31d4:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    31d6:	e1 e2       	ldi	r30, 0x21	; 33
    31d8:	f0 e0       	ldi	r31, 0x00	; 0
    31da:	80 81       	ld	r24, Z
    31dc:	88 7f       	andi	r24, 0xF8	; 248
    31de:	89 83       	std	Y+1, r24	; 0x01
    return status;
    31e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    31e2:	0f 90       	pop	r0
    31e4:	cf 91       	pop	r28
    31e6:	df 91       	pop	r29
    31e8:	08 95       	ret

000031ea <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(UART_ConfigType *Config_Ptr)
{
    31ea:	df 93       	push	r29
    31ec:	cf 93       	push	r28
    31ee:	00 d0       	rcall	.+0      	; 0x31f0 <UART_init+0x6>
    31f0:	00 d0       	rcall	.+0      	; 0x31f2 <UART_init+0x8>
    31f2:	cd b7       	in	r28, 0x3d	; 61
    31f4:	de b7       	in	r29, 0x3e	; 62
    31f6:	9c 83       	std	Y+4, r25	; 0x04
    31f8:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    31fa:	1a 82       	std	Y+2, r1	; 0x02
    31fc:	19 82       	std	Y+1, r1	; 0x01

	/* Adjust the value inside the variable
	 * to match the value in the table used
	 * in UBRR Register
	 */
	if(Config_Ptr->num_of_data_bits < 9){
    31fe:	eb 81       	ldd	r30, Y+3	; 0x03
    3200:	fc 81       	ldd	r31, Y+4	; 0x04
    3202:	82 81       	ldd	r24, Z+2	; 0x02
    3204:	89 30       	cpi	r24, 0x09	; 9
    3206:	40 f4       	brcc	.+16     	; 0x3218 <UART_init+0x2e>
		Config_Ptr->num_of_data_bits -= 5;
    3208:	eb 81       	ldd	r30, Y+3	; 0x03
    320a:	fc 81       	ldd	r31, Y+4	; 0x04
    320c:	82 81       	ldd	r24, Z+2	; 0x02
    320e:	85 50       	subi	r24, 0x05	; 5
    3210:	eb 81       	ldd	r30, Y+3	; 0x03
    3212:	fc 81       	ldd	r31, Y+4	; 0x04
    3214:	82 83       	std	Z+2, r24	; 0x02
    3216:	04 c0       	rjmp	.+8      	; 0x3220 <UART_init+0x36>
	}
	else{
		Config_Ptr->num_of_data_bits = 7;
    3218:	eb 81       	ldd	r30, Y+3	; 0x03
    321a:	fc 81       	ldd	r31, Y+4	; 0x04
    321c:	87 e0       	ldi	r24, 0x07	; 7
    321e:	82 83       	std	Z+2, r24	; 0x02
	}

	Config_Ptr->num_of_stop_bits -= 1;
    3220:	eb 81       	ldd	r30, Y+3	; 0x03
    3222:	fc 81       	ldd	r31, Y+4	; 0x04
    3224:	83 81       	ldd	r24, Z+3	; 0x03
    3226:	81 50       	subi	r24, 0x01	; 1
    3228:	eb 81       	ldd	r30, Y+3	; 0x03
    322a:	fc 81       	ldd	r31, Y+4	; 0x04
    322c:	83 83       	std	Z+3, r24	; 0x03

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    322e:	eb e2       	ldi	r30, 0x2B	; 43
    3230:	f0 e0       	ldi	r31, 0x00	; 0
    3232:	82 e0       	ldi	r24, 0x02	; 2
    3234:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3236:	ea e2       	ldi	r30, 0x2A	; 42
    3238:	f0 e0       	ldi	r31, 0x00	; 0
    323a:	88 e1       	ldi	r24, 0x18	; 24
    323c:	80 83       	st	Z, r24
	UCSRB |= ((Config_Ptr->num_of_data_bits & 0x04));
    323e:	aa e2       	ldi	r26, 0x2A	; 42
    3240:	b0 e0       	ldi	r27, 0x00	; 0
    3242:	ea e2       	ldi	r30, 0x2A	; 42
    3244:	f0 e0       	ldi	r31, 0x00	; 0
    3246:	80 81       	ld	r24, Z
    3248:	98 2f       	mov	r25, r24
    324a:	eb 81       	ldd	r30, Y+3	; 0x03
    324c:	fc 81       	ldd	r31, Y+4	; 0x04
    324e:	82 81       	ldd	r24, Z+2	; 0x02
    3250:	84 70       	andi	r24, 0x04	; 4
    3252:	89 2b       	or	r24, r25
    3254:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    3256:	e0 e4       	ldi	r30, 0x40	; 64
    3258:	f0 e0       	ldi	r31, 0x00	; 0
    325a:	80 e8       	ldi	r24, 0x80	; 128
    325c:	80 83       	st	Z, r24
	UCSRC |= ((Config_Ptr->num_of_data_bits & 0x03)<<UCSZ0);
    325e:	a0 e4       	ldi	r26, 0x40	; 64
    3260:	b0 e0       	ldi	r27, 0x00	; 0
    3262:	e0 e4       	ldi	r30, 0x40	; 64
    3264:	f0 e0       	ldi	r31, 0x00	; 0
    3266:	80 81       	ld	r24, Z
    3268:	28 2f       	mov	r18, r24
    326a:	eb 81       	ldd	r30, Y+3	; 0x03
    326c:	fc 81       	ldd	r31, Y+4	; 0x04
    326e:	82 81       	ldd	r24, Z+2	; 0x02
    3270:	88 2f       	mov	r24, r24
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	83 70       	andi	r24, 0x03	; 3
    3276:	90 70       	andi	r25, 0x00	; 0
    3278:	88 0f       	add	r24, r24
    327a:	99 1f       	adc	r25, r25
    327c:	82 2b       	or	r24, r18
    327e:	8c 93       	st	X, r24
	UCSRC |= (Config_Ptr->num_of_stop_bits << USBS);
    3280:	a0 e4       	ldi	r26, 0x40	; 64
    3282:	b0 e0       	ldi	r27, 0x00	; 0
    3284:	e0 e4       	ldi	r30, 0x40	; 64
    3286:	f0 e0       	ldi	r31, 0x00	; 0
    3288:	80 81       	ld	r24, Z
    328a:	28 2f       	mov	r18, r24
    328c:	eb 81       	ldd	r30, Y+3	; 0x03
    328e:	fc 81       	ldd	r31, Y+4	; 0x04
    3290:	83 81       	ldd	r24, Z+3	; 0x03
    3292:	88 2f       	mov	r24, r24
    3294:	90 e0       	ldi	r25, 0x00	; 0
    3296:	88 0f       	add	r24, r24
    3298:	99 1f       	adc	r25, r25
    329a:	88 0f       	add	r24, r24
    329c:	99 1f       	adc	r25, r25
    329e:	88 0f       	add	r24, r24
    32a0:	99 1f       	adc	r25, r25
    32a2:	82 2b       	or	r24, r18
    32a4:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    32a6:	eb 81       	ldd	r30, Y+3	; 0x03
    32a8:	fc 81       	ldd	r31, Y+4	; 0x04
    32aa:	80 81       	ld	r24, Z
    32ac:	91 81       	ldd	r25, Z+1	; 0x01
    32ae:	cc 01       	movw	r24, r24
    32b0:	a0 e0       	ldi	r26, 0x00	; 0
    32b2:	b0 e0       	ldi	r27, 0x00	; 0
    32b4:	88 0f       	add	r24, r24
    32b6:	99 1f       	adc	r25, r25
    32b8:	aa 1f       	adc	r26, r26
    32ba:	bb 1f       	adc	r27, r27
    32bc:	88 0f       	add	r24, r24
    32be:	99 1f       	adc	r25, r25
    32c0:	aa 1f       	adc	r26, r26
    32c2:	bb 1f       	adc	r27, r27
    32c4:	88 0f       	add	r24, r24
    32c6:	99 1f       	adc	r25, r25
    32c8:	aa 1f       	adc	r26, r26
    32ca:	bb 1f       	adc	r27, r27
    32cc:	9c 01       	movw	r18, r24
    32ce:	ad 01       	movw	r20, r26
    32d0:	80 e0       	ldi	r24, 0x00	; 0
    32d2:	92 e1       	ldi	r25, 0x12	; 18
    32d4:	aa e7       	ldi	r26, 0x7A	; 122
    32d6:	b0 e0       	ldi	r27, 0x00	; 0
    32d8:	bc 01       	movw	r22, r24
    32da:	cd 01       	movw	r24, r26
    32dc:	0e 94 33 1a 	call	0x3466	; 0x3466 <__udivmodsi4>
    32e0:	da 01       	movw	r26, r20
    32e2:	c9 01       	movw	r24, r18
    32e4:	01 97       	sbiw	r24, 0x01	; 1
    32e6:	9a 83       	std	Y+2, r25	; 0x02
    32e8:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UCSRC &= ~(1<<URSEL);
    32ea:	a0 e4       	ldi	r26, 0x40	; 64
    32ec:	b0 e0       	ldi	r27, 0x00	; 0
    32ee:	e0 e4       	ldi	r30, 0x40	; 64
    32f0:	f0 e0       	ldi	r31, 0x00	; 0
    32f2:	80 81       	ld	r24, Z
    32f4:	8f 77       	andi	r24, 0x7F	; 127
    32f6:	8c 93       	st	X, r24
	UBRRH = ubrr_value>>8;
    32f8:	e0 e4       	ldi	r30, 0x40	; 64
    32fa:	f0 e0       	ldi	r31, 0x00	; 0
    32fc:	89 81       	ldd	r24, Y+1	; 0x01
    32fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3300:	89 2f       	mov	r24, r25
    3302:	99 27       	eor	r25, r25
    3304:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3306:	e9 e2       	ldi	r30, 0x29	; 41
    3308:	f0 e0       	ldi	r31, 0x00	; 0
    330a:	89 81       	ldd	r24, Y+1	; 0x01
    330c:	80 83       	st	Z, r24

}
    330e:	0f 90       	pop	r0
    3310:	0f 90       	pop	r0
    3312:	0f 90       	pop	r0
    3314:	0f 90       	pop	r0
    3316:	cf 91       	pop	r28
    3318:	df 91       	pop	r29
    331a:	08 95       	ret

0000331c <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    331c:	df 93       	push	r29
    331e:	cf 93       	push	r28
    3320:	0f 92       	push	r0
    3322:	cd b7       	in	r28, 0x3d	; 61
    3324:	de b7       	in	r29, 0x3e	; 62
    3326:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3328:	eb e2       	ldi	r30, 0x2B	; 43
    332a:	f0 e0       	ldi	r31, 0x00	; 0
    332c:	80 81       	ld	r24, Z
    332e:	88 2f       	mov	r24, r24
    3330:	90 e0       	ldi	r25, 0x00	; 0
    3332:	80 72       	andi	r24, 0x20	; 32
    3334:	90 70       	andi	r25, 0x00	; 0
    3336:	00 97       	sbiw	r24, 0x00	; 0
    3338:	b9 f3       	breq	.-18     	; 0x3328 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    333a:	ec e2       	ldi	r30, 0x2C	; 44
    333c:	f0 e0       	ldi	r31, 0x00	; 0
    333e:	89 81       	ldd	r24, Y+1	; 0x01
    3340:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3342:	0f 90       	pop	r0
    3344:	cf 91       	pop	r28
    3346:	df 91       	pop	r29
    3348:	08 95       	ret

0000334a <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    334a:	df 93       	push	r29
    334c:	cf 93       	push	r28
    334e:	cd b7       	in	r28, 0x3d	; 61
    3350:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3352:	eb e2       	ldi	r30, 0x2B	; 43
    3354:	f0 e0       	ldi	r31, 0x00	; 0
    3356:	80 81       	ld	r24, Z
    3358:	88 23       	and	r24, r24
    335a:	dc f7       	brge	.-10     	; 0x3352 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    335c:	ec e2       	ldi	r30, 0x2C	; 44
    335e:	f0 e0       	ldi	r31, 0x00	; 0
    3360:	80 81       	ld	r24, Z
}
    3362:	cf 91       	pop	r28
    3364:	df 91       	pop	r29
    3366:	08 95       	ret

00003368 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3368:	df 93       	push	r29
    336a:	cf 93       	push	r28
    336c:	00 d0       	rcall	.+0      	; 0x336e <UART_sendString+0x6>
    336e:	0f 92       	push	r0
    3370:	cd b7       	in	r28, 0x3d	; 61
    3372:	de b7       	in	r29, 0x3e	; 62
    3374:	9b 83       	std	Y+3, r25	; 0x03
    3376:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3378:	19 82       	std	Y+1, r1	; 0x01
    337a:	0e c0       	rjmp	.+28     	; 0x3398 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    337c:	89 81       	ldd	r24, Y+1	; 0x01
    337e:	28 2f       	mov	r18, r24
    3380:	30 e0       	ldi	r19, 0x00	; 0
    3382:	8a 81       	ldd	r24, Y+2	; 0x02
    3384:	9b 81       	ldd	r25, Y+3	; 0x03
    3386:	fc 01       	movw	r30, r24
    3388:	e2 0f       	add	r30, r18
    338a:	f3 1f       	adc	r31, r19
    338c:	80 81       	ld	r24, Z
    338e:	0e 94 8e 19 	call	0x331c	; 0x331c <UART_sendByte>
		i++;
    3392:	89 81       	ldd	r24, Y+1	; 0x01
    3394:	8f 5f       	subi	r24, 0xFF	; 255
    3396:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3398:	89 81       	ldd	r24, Y+1	; 0x01
    339a:	28 2f       	mov	r18, r24
    339c:	30 e0       	ldi	r19, 0x00	; 0
    339e:	8a 81       	ldd	r24, Y+2	; 0x02
    33a0:	9b 81       	ldd	r25, Y+3	; 0x03
    33a2:	fc 01       	movw	r30, r24
    33a4:	e2 0f       	add	r30, r18
    33a6:	f3 1f       	adc	r31, r19
    33a8:	80 81       	ld	r24, Z
    33aa:	88 23       	and	r24, r24
    33ac:	39 f7       	brne	.-50     	; 0x337c <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    33ae:	0f 90       	pop	r0
    33b0:	0f 90       	pop	r0
    33b2:	0f 90       	pop	r0
    33b4:	cf 91       	pop	r28
    33b6:	df 91       	pop	r29
    33b8:	08 95       	ret

000033ba <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    33ba:	0f 93       	push	r16
    33bc:	1f 93       	push	r17
    33be:	df 93       	push	r29
    33c0:	cf 93       	push	r28
    33c2:	00 d0       	rcall	.+0      	; 0x33c4 <UART_receiveString+0xa>
    33c4:	0f 92       	push	r0
    33c6:	cd b7       	in	r28, 0x3d	; 61
    33c8:	de b7       	in	r29, 0x3e	; 62
    33ca:	9b 83       	std	Y+3, r25	; 0x03
    33cc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    33ce:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    33d0:	89 81       	ldd	r24, Y+1	; 0x01
    33d2:	28 2f       	mov	r18, r24
    33d4:	30 e0       	ldi	r19, 0x00	; 0
    33d6:	8a 81       	ldd	r24, Y+2	; 0x02
    33d8:	9b 81       	ldd	r25, Y+3	; 0x03
    33da:	8c 01       	movw	r16, r24
    33dc:	02 0f       	add	r16, r18
    33de:	13 1f       	adc	r17, r19
    33e0:	0e 94 a5 19 	call	0x334a	; 0x334a <UART_recieveByte>
    33e4:	f8 01       	movw	r30, r16
    33e6:	80 83       	st	Z, r24
    33e8:	0f c0       	rjmp	.+30     	; 0x3408 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    33ea:	89 81       	ldd	r24, Y+1	; 0x01
    33ec:	8f 5f       	subi	r24, 0xFF	; 255
    33ee:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    33f0:	89 81       	ldd	r24, Y+1	; 0x01
    33f2:	28 2f       	mov	r18, r24
    33f4:	30 e0       	ldi	r19, 0x00	; 0
    33f6:	8a 81       	ldd	r24, Y+2	; 0x02
    33f8:	9b 81       	ldd	r25, Y+3	; 0x03
    33fa:	8c 01       	movw	r16, r24
    33fc:	02 0f       	add	r16, r18
    33fe:	13 1f       	adc	r17, r19
    3400:	0e 94 a5 19 	call	0x334a	; 0x334a <UART_recieveByte>
    3404:	f8 01       	movw	r30, r16
    3406:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3408:	89 81       	ldd	r24, Y+1	; 0x01
    340a:	28 2f       	mov	r18, r24
    340c:	30 e0       	ldi	r19, 0x00	; 0
    340e:	8a 81       	ldd	r24, Y+2	; 0x02
    3410:	9b 81       	ldd	r25, Y+3	; 0x03
    3412:	fc 01       	movw	r30, r24
    3414:	e2 0f       	add	r30, r18
    3416:	f3 1f       	adc	r31, r19
    3418:	80 81       	ld	r24, Z
    341a:	83 32       	cpi	r24, 0x23	; 35
    341c:	31 f7       	brne	.-52     	; 0x33ea <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    341e:	89 81       	ldd	r24, Y+1	; 0x01
    3420:	28 2f       	mov	r18, r24
    3422:	30 e0       	ldi	r19, 0x00	; 0
    3424:	8a 81       	ldd	r24, Y+2	; 0x02
    3426:	9b 81       	ldd	r25, Y+3	; 0x03
    3428:	fc 01       	movw	r30, r24
    342a:	e2 0f       	add	r30, r18
    342c:	f3 1f       	adc	r31, r19
    342e:	10 82       	st	Z, r1
}
    3430:	0f 90       	pop	r0
    3432:	0f 90       	pop	r0
    3434:	0f 90       	pop	r0
    3436:	cf 91       	pop	r28
    3438:	df 91       	pop	r29
    343a:	1f 91       	pop	r17
    343c:	0f 91       	pop	r16
    343e:	08 95       	ret

00003440 <__divmodhi4>:
    3440:	97 fb       	bst	r25, 7
    3442:	09 2e       	mov	r0, r25
    3444:	07 26       	eor	r0, r23
    3446:	0a d0       	rcall	.+20     	; 0x345c <__divmodhi4_neg1>
    3448:	77 fd       	sbrc	r23, 7
    344a:	04 d0       	rcall	.+8      	; 0x3454 <__divmodhi4_neg2>
    344c:	2e d0       	rcall	.+92     	; 0x34aa <__udivmodhi4>
    344e:	06 d0       	rcall	.+12     	; 0x345c <__divmodhi4_neg1>
    3450:	00 20       	and	r0, r0
    3452:	1a f4       	brpl	.+6      	; 0x345a <__divmodhi4_exit>

00003454 <__divmodhi4_neg2>:
    3454:	70 95       	com	r23
    3456:	61 95       	neg	r22
    3458:	7f 4f       	sbci	r23, 0xFF	; 255

0000345a <__divmodhi4_exit>:
    345a:	08 95       	ret

0000345c <__divmodhi4_neg1>:
    345c:	f6 f7       	brtc	.-4      	; 0x345a <__divmodhi4_exit>
    345e:	90 95       	com	r25
    3460:	81 95       	neg	r24
    3462:	9f 4f       	sbci	r25, 0xFF	; 255
    3464:	08 95       	ret

00003466 <__udivmodsi4>:
    3466:	a1 e2       	ldi	r26, 0x21	; 33
    3468:	1a 2e       	mov	r1, r26
    346a:	aa 1b       	sub	r26, r26
    346c:	bb 1b       	sub	r27, r27
    346e:	fd 01       	movw	r30, r26
    3470:	0d c0       	rjmp	.+26     	; 0x348c <__udivmodsi4_ep>

00003472 <__udivmodsi4_loop>:
    3472:	aa 1f       	adc	r26, r26
    3474:	bb 1f       	adc	r27, r27
    3476:	ee 1f       	adc	r30, r30
    3478:	ff 1f       	adc	r31, r31
    347a:	a2 17       	cp	r26, r18
    347c:	b3 07       	cpc	r27, r19
    347e:	e4 07       	cpc	r30, r20
    3480:	f5 07       	cpc	r31, r21
    3482:	20 f0       	brcs	.+8      	; 0x348c <__udivmodsi4_ep>
    3484:	a2 1b       	sub	r26, r18
    3486:	b3 0b       	sbc	r27, r19
    3488:	e4 0b       	sbc	r30, r20
    348a:	f5 0b       	sbc	r31, r21

0000348c <__udivmodsi4_ep>:
    348c:	66 1f       	adc	r22, r22
    348e:	77 1f       	adc	r23, r23
    3490:	88 1f       	adc	r24, r24
    3492:	99 1f       	adc	r25, r25
    3494:	1a 94       	dec	r1
    3496:	69 f7       	brne	.-38     	; 0x3472 <__udivmodsi4_loop>
    3498:	60 95       	com	r22
    349a:	70 95       	com	r23
    349c:	80 95       	com	r24
    349e:	90 95       	com	r25
    34a0:	9b 01       	movw	r18, r22
    34a2:	ac 01       	movw	r20, r24
    34a4:	bd 01       	movw	r22, r26
    34a6:	cf 01       	movw	r24, r30
    34a8:	08 95       	ret

000034aa <__udivmodhi4>:
    34aa:	aa 1b       	sub	r26, r26
    34ac:	bb 1b       	sub	r27, r27
    34ae:	51 e1       	ldi	r21, 0x11	; 17
    34b0:	07 c0       	rjmp	.+14     	; 0x34c0 <__udivmodhi4_ep>

000034b2 <__udivmodhi4_loop>:
    34b2:	aa 1f       	adc	r26, r26
    34b4:	bb 1f       	adc	r27, r27
    34b6:	a6 17       	cp	r26, r22
    34b8:	b7 07       	cpc	r27, r23
    34ba:	10 f0       	brcs	.+4      	; 0x34c0 <__udivmodhi4_ep>
    34bc:	a6 1b       	sub	r26, r22
    34be:	b7 0b       	sbc	r27, r23

000034c0 <__udivmodhi4_ep>:
    34c0:	88 1f       	adc	r24, r24
    34c2:	99 1f       	adc	r25, r25
    34c4:	5a 95       	dec	r21
    34c6:	a9 f7       	brne	.-22     	; 0x34b2 <__udivmodhi4_loop>
    34c8:	80 95       	com	r24
    34ca:	90 95       	com	r25
    34cc:	bc 01       	movw	r22, r24
    34ce:	cd 01       	movw	r24, r26
    34d0:	08 95       	ret

000034d2 <__prologue_saves__>:
    34d2:	2f 92       	push	r2
    34d4:	3f 92       	push	r3
    34d6:	4f 92       	push	r4
    34d8:	5f 92       	push	r5
    34da:	6f 92       	push	r6
    34dc:	7f 92       	push	r7
    34de:	8f 92       	push	r8
    34e0:	9f 92       	push	r9
    34e2:	af 92       	push	r10
    34e4:	bf 92       	push	r11
    34e6:	cf 92       	push	r12
    34e8:	df 92       	push	r13
    34ea:	ef 92       	push	r14
    34ec:	ff 92       	push	r15
    34ee:	0f 93       	push	r16
    34f0:	1f 93       	push	r17
    34f2:	cf 93       	push	r28
    34f4:	df 93       	push	r29
    34f6:	cd b7       	in	r28, 0x3d	; 61
    34f8:	de b7       	in	r29, 0x3e	; 62
    34fa:	ca 1b       	sub	r28, r26
    34fc:	db 0b       	sbc	r29, r27
    34fe:	0f b6       	in	r0, 0x3f	; 63
    3500:	f8 94       	cli
    3502:	de bf       	out	0x3e, r29	; 62
    3504:	0f be       	out	0x3f, r0	; 63
    3506:	cd bf       	out	0x3d, r28	; 61
    3508:	09 94       	ijmp

0000350a <__epilogue_restores__>:
    350a:	2a 88       	ldd	r2, Y+18	; 0x12
    350c:	39 88       	ldd	r3, Y+17	; 0x11
    350e:	48 88       	ldd	r4, Y+16	; 0x10
    3510:	5f 84       	ldd	r5, Y+15	; 0x0f
    3512:	6e 84       	ldd	r6, Y+14	; 0x0e
    3514:	7d 84       	ldd	r7, Y+13	; 0x0d
    3516:	8c 84       	ldd	r8, Y+12	; 0x0c
    3518:	9b 84       	ldd	r9, Y+11	; 0x0b
    351a:	aa 84       	ldd	r10, Y+10	; 0x0a
    351c:	b9 84       	ldd	r11, Y+9	; 0x09
    351e:	c8 84       	ldd	r12, Y+8	; 0x08
    3520:	df 80       	ldd	r13, Y+7	; 0x07
    3522:	ee 80       	ldd	r14, Y+6	; 0x06
    3524:	fd 80       	ldd	r15, Y+5	; 0x05
    3526:	0c 81       	ldd	r16, Y+4	; 0x04
    3528:	1b 81       	ldd	r17, Y+3	; 0x03
    352a:	aa 81       	ldd	r26, Y+2	; 0x02
    352c:	b9 81       	ldd	r27, Y+1	; 0x01
    352e:	ce 0f       	add	r28, r30
    3530:	d1 1d       	adc	r29, r1
    3532:	0f b6       	in	r0, 0x3f	; 63
    3534:	f8 94       	cli
    3536:	de bf       	out	0x3e, r29	; 62
    3538:	0f be       	out	0x3f, r0	; 63
    353a:	cd bf       	out	0x3d, r28	; 61
    353c:	ed 01       	movw	r28, r26
    353e:	08 95       	ret

00003540 <itoa>:
    3540:	fb 01       	movw	r30, r22
    3542:	9f 01       	movw	r18, r30
    3544:	e8 94       	clt
    3546:	42 30       	cpi	r20, 0x02	; 2
    3548:	c4 f0       	brlt	.+48     	; 0x357a <itoa+0x3a>
    354a:	45 32       	cpi	r20, 0x25	; 37
    354c:	b4 f4       	brge	.+44     	; 0x357a <itoa+0x3a>
    354e:	4a 30       	cpi	r20, 0x0A	; 10
    3550:	29 f4       	brne	.+10     	; 0x355c <itoa+0x1c>
    3552:	97 fb       	bst	r25, 7
    3554:	1e f4       	brtc	.+6      	; 0x355c <itoa+0x1c>
    3556:	90 95       	com	r25
    3558:	81 95       	neg	r24
    355a:	9f 4f       	sbci	r25, 0xFF	; 255
    355c:	64 2f       	mov	r22, r20
    355e:	77 27       	eor	r23, r23
    3560:	0e 94 55 1a 	call	0x34aa	; 0x34aa <__udivmodhi4>
    3564:	80 5d       	subi	r24, 0xD0	; 208
    3566:	8a 33       	cpi	r24, 0x3A	; 58
    3568:	0c f0       	brlt	.+2      	; 0x356c <itoa+0x2c>
    356a:	89 5d       	subi	r24, 0xD9	; 217
    356c:	81 93       	st	Z+, r24
    356e:	cb 01       	movw	r24, r22
    3570:	00 97       	sbiw	r24, 0x00	; 0
    3572:	a1 f7       	brne	.-24     	; 0x355c <itoa+0x1c>
    3574:	16 f4       	brtc	.+4      	; 0x357a <itoa+0x3a>
    3576:	5d e2       	ldi	r21, 0x2D	; 45
    3578:	51 93       	st	Z+, r21
    357a:	10 82       	st	Z, r1
    357c:	c9 01       	movw	r24, r18
    357e:	0c 94 c1 1a 	jmp	0x3582	; 0x3582 <strrev>

00003582 <strrev>:
    3582:	dc 01       	movw	r26, r24
    3584:	fc 01       	movw	r30, r24
    3586:	67 2f       	mov	r22, r23
    3588:	71 91       	ld	r23, Z+
    358a:	77 23       	and	r23, r23
    358c:	e1 f7       	brne	.-8      	; 0x3586 <strrev+0x4>
    358e:	32 97       	sbiw	r30, 0x02	; 2
    3590:	04 c0       	rjmp	.+8      	; 0x359a <strrev+0x18>
    3592:	7c 91       	ld	r23, X
    3594:	6d 93       	st	X+, r22
    3596:	70 83       	st	Z, r23
    3598:	62 91       	ld	r22, -Z
    359a:	ae 17       	cp	r26, r30
    359c:	bf 07       	cpc	r27, r31
    359e:	c8 f3       	brcs	.-14     	; 0x3592 <strrev+0x10>
    35a0:	08 95       	ret

000035a2 <_exit>:
    35a2:	f8 94       	cli

000035a4 <__stop_program>:
    35a4:	ff cf       	rjmp	.-2      	; 0x35a4 <__stop_program>
